Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> ext_decl
Rule 2     program -> program ext_decl
Rule 3     ext_decl -> func_def
Rule 4     ext_decl -> decl
Rule 5     decl -> decl_specs ;
Rule 6     decl -> decl_specs init_decl_list ;
Rule 7     init_decl_list -> init_decl
Rule 8     init_decl_list -> init_decl_list , init_decl
Rule 9     init_decl -> declr
Rule 10    init_decl -> declr = init
Rule 11    decl_specs -> stor_class_spec
Rule 12    decl_specs -> stor_class_spec decl_specs
Rule 13    decl_specs -> type_spec
Rule 14    decl_specs -> type_spec decl_specs
Rule 15    decl_specs -> type_qual
Rule 16    decl_specs -> type_qual decl_specs
Rule 17    decl_specs -> func_spec
Rule 18    decl_specs -> func_spec decl_specs
Rule 19    stor_class_spec -> TYPEDEF
Rule 20    stor_class_spec -> EXTERN
Rule 21    stor_class_spec -> STATIC
Rule 22    stor_class_spec -> AUTO
Rule 23    stor_class_spec -> REGISTER
Rule 24    func_spec -> INLINE
Rule 25    type_spec -> VOID
Rule 26    type_spec -> CHAR
Rule 27    type_spec -> SHORT
Rule 28    type_spec -> INT
Rule 29    type_spec -> LONG
Rule 30    type_spec -> FLOAT
Rule 31    type_spec -> DOUBLE
Rule 32    type_spec -> SIGNED
Rule 33    type_spec -> UNSIGNED
Rule 34    type_spec -> BOOL
Rule 35    type_spec -> struct_or_union_spec
Rule 36    type_spec -> enum_spec
Rule 37    type_qual -> CONST
Rule 38    type_qual -> RESTRICT
Rule 39    type_qual -> VOLATILE
Rule 40    enum_spec -> ENUM { enum_list }
Rule 41    enum_spec -> ENUM IDENTIFIER { enum_list }
Rule 42    enum_spec -> ENUM { enum_list , }
Rule 43    enum_spec -> ENUM IDENTIFIER { enum_list , }
Rule 44    enum_spec -> ENUM IDENTIFIER
Rule 45    enum_list -> enum
Rule 46    enum_list -> enum_list , enum
Rule 47    enum -> IDENTIFIER
Rule 48    enum -> IDENTIFIER = const_expr
Rule 49    struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list }
Rule 50    struct_or_union_spec -> struct_or_union { struct_decl_list }
Rule 51    struct_or_union_spec -> struct_or_union IDENTIFIER
Rule 52    struct_or_union -> STRUCT
Rule 53    struct_or_union -> UNION
Rule 54    struct_decl_list -> struct_decl
Rule 55    struct_decl_list -> struct_decl_list struct_decl
Rule 56    struct_decl -> spec_qual_list struct_declr_list ;
Rule 57    spec_qual_list -> type_spec spec_qual_list
Rule 58    spec_qual_list -> type_spec
Rule 59    spec_qual_list -> type_qual spec_qual_list
Rule 60    spec_qual_list -> type_qual
Rule 61    struct_declr_list -> struct_declr
Rule 62    struct_declr_list -> struct_declr_list , struct_declr
Rule 63    struct_declr -> declr
Rule 64    struct_declr -> : const_expr
Rule 65    struct_declr -> declr : const_expr
Rule 66    declr -> ptr direct_declr
Rule 67    declr -> direct_declr
Rule 68    ptr -> *
Rule 69    ptr -> * type_qual_list
Rule 70    ptr -> * ptr
Rule 71    ptr -> * type_qual_list ptr
Rule 72    type_qual_list -> type_qual
Rule 73    type_qual_list -> type_qual_list type_qual
Rule 74    direct_declr -> IDENTIFIER
Rule 75    direct_declr -> ( declr )
Rule 76    direct_declr -> direct_declr [ type_qual_list assign_expr ]
Rule 77    direct_declr -> direct_declr [ type_qual_list ]
Rule 78    direct_declr -> direct_declr [ assign_expr ]
Rule 79    direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ]
Rule 80    direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ]
Rule 81    direct_declr -> direct_declr [ type_qual_list * ]
Rule 82    direct_declr -> direct_declr [ * ]
Rule 83    direct_declr -> direct_declr [ ]
Rule 84    direct_declr -> direct_declr ( param_type_list )
Rule 85    direct_declr -> direct_declr ( id_list )
Rule 86    direct_declr -> direct_declr ( )
Rule 87    id_list -> IDENTIFIER
Rule 88    id_list -> id_list , IDENTIFIER
Rule 89    assign_expr -> cond_expr
Rule 90    assign_expr -> unary_expr assign_op assign_expr
Rule 91    assign_op -> =
Rule 92    assign_op -> MUL_ASSIGN
Rule 93    assign_op -> DIV_ASSIGN
Rule 94    assign_op -> MOD_ASSIGN
Rule 95    assign_op -> ADD_ASSIGN
Rule 96    assign_op -> SUB_ASSIGN
Rule 97    assign_op -> LEFT_ASSIGN
Rule 98    assign_op -> RIGHT_ASSIGN
Rule 99    assign_op -> AND_ASSIGN
Rule 100   assign_op -> XOR_ASSIGN
Rule 101   assign_op -> OR_ASSIGN
Rule 102   const_expr -> cond_expr
Rule 103   cond_expr -> log_or_expr
Rule 104   cond_expr -> log_or_expr ? expr : cond_expr
Rule 105   log_or_expr -> log_and_expr
Rule 106   log_or_expr -> log_or_expr OR_OP log_and_expr
Rule 107   log_and_expr -> incl_or_expr
Rule 108   log_and_expr -> log_and_expr AND_OP incl_or_expr
Rule 109   incl_or_expr -> excl_or_expr
Rule 110   incl_or_expr -> incl_or_expr | excl_or_expr
Rule 111   excl_or_expr -> and_expr
Rule 112   excl_or_expr -> excl_or_expr ^ and_expr
Rule 113   and_expr -> eq_expr
Rule 114   and_expr -> and_expr & eq_expr
Rule 115   eq_expr -> rel_expr
Rule 116   eq_expr -> eq_expr EQ_OP rel_expr
Rule 117   eq_expr -> eq_expr NE_OP rel_expr
Rule 118   rel_expr -> shift_expr
Rule 119   rel_expr -> rel_expr < shift_expr
Rule 120   rel_expr -> rel_expr > shift_expr
Rule 121   rel_expr -> rel_expr LE_OP shift_expr
Rule 122   rel_expr -> rel_expr GE_OP shift_expr
Rule 123   shift_expr -> add_expr
Rule 124   shift_expr -> shift_expr LEFT_OP add_expr
Rule 125   shift_expr -> shift_expr RIGHT_OP add_expr
Rule 126   add_expr -> mult_expr
Rule 127   add_expr -> add_expr + mult_expr
Rule 128   add_expr -> add_expr - mult_expr
Rule 129   mult_expr -> cast_expr
Rule 130   mult_expr -> mult_expr * cast_expr
Rule 131   mult_expr -> mult_expr / cast_expr
Rule 132   mult_expr -> mult_expr % cast_expr
Rule 133   cast_expr -> unary_expr
Rule 134   cast_expr -> ( type_name ) cast_expr
Rule 135   unary_expr -> post_expr
Rule 136   unary_expr -> INC_OP unary_expr
Rule 137   unary_expr -> DEC_OP unary_expr
Rule 138   unary_expr -> unary_op cast_expr
Rule 139   unary_expr -> SIZEOF unary_expr
Rule 140   unary_expr -> SIZEOF ( type_name )
Rule 141   unary_op -> &
Rule 142   unary_op -> *
Rule 143   unary_op -> +
Rule 144   unary_op -> -
Rule 145   unary_op -> ~
Rule 146   unary_op -> !
Rule 147   post_expr -> prim_expr
Rule 148   post_expr -> post_expr [ expr ]
Rule 149   post_expr -> post_expr ( )
Rule 150   post_expr -> post_expr ( arg_expr_list )
Rule 151   post_expr -> post_expr . IDENTIFIER
Rule 152   post_expr -> post_expr PTR_OP IDENTIFIER
Rule 153   post_expr -> post_expr INC_OP
Rule 154   post_expr -> post_expr DEC_OP
Rule 155   post_expr -> ( type_name ) { init_list }
Rule 156   post_expr -> ( type_name ) { init_list , }
Rule 157   prim_expr -> IDENTIFIER
Rule 158   prim_expr -> CONSTANT
Rule 159   prim_expr -> STRING_LITERAL
Rule 160   prim_expr -> ( expr )
Rule 161   expr -> assign_expr
Rule 162   expr -> expr , assign_expr
Rule 163   type_name -> spec_qual_list
Rule 164   type_name -> spec_qual_list abs_declr
Rule 165   abs_declr -> ptr
Rule 166   abs_declr -> direct_abs_declr
Rule 167   abs_declr -> ptr direct_abs_declr
Rule 168   direct_abs_declr -> ( abs_declr )
Rule 169   direct_abs_declr -> [ ]
Rule 170   direct_abs_declr -> [ assign_expr ]
Rule 171   direct_abs_declr -> direct_abs_declr [ ]
Rule 172   direct_abs_declr -> direct_abs_declr [ assign_expr ]
Rule 173   direct_abs_declr -> [ * ]
Rule 174   direct_abs_declr -> direct_abs_declr [ * ]
Rule 175   direct_abs_declr -> ( )
Rule 176   direct_abs_declr -> ( param_type_list )
Rule 177   direct_abs_declr -> direct_abs_declr ( )
Rule 178   direct_abs_declr -> direct_abs_declr ( param_type_list )
Rule 179   param_type_list -> param_list
Rule 180   param_type_list -> param_list , ELLIPSIS
Rule 181   param_list -> param_decl
Rule 182   param_list -> param_list , param_decl
Rule 183   param_decl -> decl_specs declr
Rule 184   param_decl -> decl_specs abs_declr
Rule 185   param_decl -> decl_specs
Rule 186   arg_expr_list -> assign_expr
Rule 187   arg_expr_list -> arg_expr_list , assign_expr
Rule 188   init_list -> init
Rule 189   init_list -> desig init
Rule 190   init_list -> init_list , init
Rule 191   init_list -> init_list , desig init
Rule 192   init -> assign_expr
Rule 193   init -> { init_list }
Rule 194   init -> { init_list , }
Rule 195   desig_list -> desig
Rule 196   desig_list -> desig_list desig
Rule 197   desig -> [ const_expr ]
Rule 198   desig -> . IDENTIFIER
Rule 199   func_def -> decl_specs declr decl_list comp_stmt
Rule 200   func_def -> decl_specs declr comp_stmt
Rule 201   decl_list -> decl
Rule 202   decl_list -> decl_list decl
Rule 203   comp_stmt -> { }
Rule 204   comp_stmt -> { block_item_list }
Rule 205   block_item_list -> block_item
Rule 206   block_item_list -> block_item_list block_item
Rule 207   block_item -> decl
Rule 208   block_item -> stmt
Rule 209   stmt -> labeled_stmt
Rule 210   stmt -> comp_stmt
Rule 211   stmt -> expr_stmt
Rule 212   stmt -> sel_stmt
Rule 213   stmt -> iter_stmt
Rule 214   stmt -> jump_stmt
Rule 215   labeled_stmt -> IDENTIFIER : stmt
Rule 216   labeled_stmt -> CASE const_expr : stmt
Rule 217   labeled_stmt -> DEFAULT : stmt
Rule 218   expr_stmt -> ;
Rule 219   expr_stmt -> expr ;
Rule 220   sel_stmt -> IF ( expr ) stmt ELSE stmt
Rule 221   sel_stmt -> IF ( expr ) stmt
Rule 222   sel_stmt -> SWITCH ( expr ) stmt
Rule 223   iter_stmt -> WHILE ( expr ) stmt
Rule 224   iter_stmt -> DO stmt WHILE ( expr ) ;
Rule 225   iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt
Rule 226   iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt
Rule 227   iter_stmt -> FOR ( decl expr_stmt ) stmt
Rule 228   iter_stmt -> FOR ( decl expr_stmt expr ) stmt
Rule 229   jump_stmt -> GOTO IDENTIFIER ;
Rule 230   jump_stmt -> CONTINUE ;
Rule 231   jump_stmt -> BREAK ;
Rule 232   jump_stmt -> RETURN ;
Rule 233   jump_stmt -> RETURN expr ;

Terminals, with rules where they appear

!                    : 146
%                    : 132
&                    : 114 141
(                    : 75 84 85 86 134 140 149 150 155 156 160 168 175 176 177 178 220 221 222 223 224 225 226 227 228
)                    : 75 84 85 86 134 140 149 150 155 156 160 168 175 176 177 178 220 221 222 223 224 225 226 227 228
*                    : 68 69 70 71 81 82 130 142 173 174
+                    : 127 143
,                    : 8 42 43 46 62 88 156 162 180 182 187 190 191 194
-                    : 128 144
.                    : 151 198
/                    : 131
:                    : 64 65 104 215 216 217
;                    : 5 6 56 218 219 224 229 230 231 232 233
<                    : 119
=                    : 10 48 91
>                    : 120
?                    : 104
ADD_ASSIGN           : 95
AND_ASSIGN           : 99
AND_OP               : 108
AUTO                 : 22
BOOL                 : 34
BREAK                : 231
CASE                 : 216
CHAR                 : 26
CONST                : 37
CONSTANT             : 158
CONTINUE             : 230
DEC_OP               : 137 154
DEFAULT              : 217
DIV_ASSIGN           : 93
DO                   : 224
DOUBLE               : 31
ELLIPSIS             : 180
ELSE                 : 220
ENUM                 : 40 41 42 43 44
EQ_OP                : 116
EXTERN               : 20
FLOAT                : 30
FOR                  : 225 226 227 228
GE_OP                : 122
GOTO                 : 229
IDENTIFIER           : 41 43 44 47 48 49 51 74 87 88 151 152 157 198 215 229
IF                   : 220 221
INC_OP               : 136 153
INLINE               : 24
INT                  : 28
LEFT_ASSIGN          : 97
LEFT_OP              : 124
LE_OP                : 121
LONG                 : 29
MOD_ASSIGN           : 94
MUL_ASSIGN           : 92
NE_OP                : 117
OR_ASSIGN            : 101
OR_OP                : 106
PTR_OP               : 152
REGISTER             : 23
RESTRICT             : 38
RETURN               : 232 233
RIGHT_ASSIGN         : 98
RIGHT_OP             : 125
SHORT                : 27
SIGNED               : 32
SIZEOF               : 139 140
STATIC               : 21 79 80
STRING_LITERAL       : 159
STRUCT               : 52
SUB_ASSIGN           : 96
SWITCH               : 222
TYPEDEF              : 19
UNION                : 53
UNSIGNED             : 33
VOID                 : 25
VOLATILE             : 39
WHILE                : 223 224
XOR_ASSIGN           : 100
[                    : 76 77 78 79 80 81 82 83 148 169 170 171 172 173 174 197
]                    : 76 77 78 79 80 81 82 83 148 169 170 171 172 173 174 197
^                    : 112
error                : 
{                    : 40 41 42 43 49 50 155 156 193 194 203 204
|                    : 110
}                    : 40 41 42 43 49 50 155 156 193 194 203 204
~                    : 145

Nonterminals, with rules where they appear

abs_declr            : 164 168 184
add_expr             : 123 124 125 127 128
and_expr             : 111 112 114
arg_expr_list        : 150 187
assign_expr          : 76 78 79 80 90 161 162 170 172 186 187 192
assign_op            : 90
block_item           : 205 206
block_item_list      : 204 206
cast_expr            : 129 130 131 132 134 138
comp_stmt            : 199 200 210
cond_expr            : 89 102 104
const_expr           : 48 64 65 197 216
decl                 : 4 201 202 207 227 228
decl_list            : 199 202
decl_specs           : 5 6 12 14 16 18 183 184 185 199 200
declr                : 9 10 63 65 75 183 199 200
desig                : 189 191 195 196
desig_list           : 196
direct_abs_declr     : 166 167 171 172 174 177 178
direct_declr         : 66 67 76 77 78 79 80 81 82 83 84 85 86
enum                 : 45 46
enum_list            : 40 41 42 43 46
enum_spec            : 36
eq_expr              : 113 114 116 117
excl_or_expr         : 109 110 112
expr                 : 104 148 160 162 219 220 221 222 223 224 226 228 233
expr_stmt            : 211 225 225 226 226 227 228
ext_decl             : 1 2
func_def             : 3
func_spec            : 17 18
id_list              : 85 88
incl_or_expr         : 107 108 110
init                 : 10 188 189 190 191
init_decl            : 7 8
init_decl_list       : 6 8
init_list            : 155 156 190 191 193 194
iter_stmt            : 213
jump_stmt            : 214
labeled_stmt         : 209
log_and_expr         : 105 106 108
log_or_expr          : 103 104 106
mult_expr            : 126 127 128 130 131 132
param_decl           : 181 182
param_list           : 179 180 182
param_type_list      : 84 176 178
post_expr            : 135 148 149 150 151 152 153 154
prim_expr            : 147
program              : 2 0
ptr                  : 66 70 71 165 167
rel_expr             : 115 116 117 119 120 121 122
sel_stmt             : 212
shift_expr           : 118 119 120 121 122 124 125
spec_qual_list       : 56 57 59 163 164
stmt                 : 208 215 216 217 220 220 221 222 223 224 225 226 227 228
stor_class_spec      : 11 12
struct_decl          : 54 55
struct_decl_list     : 49 50 55
struct_declr         : 61 62
struct_declr_list    : 56 62
struct_or_union      : 49 50 51
struct_or_union_spec : 35
type_name            : 134 140 155 156
type_qual            : 15 16 59 60 72 73
type_qual_list       : 69 71 73 76 77 79 80 81
type_spec            : 13 14 57 58
unary_expr           : 90 133 136 137 139
unary_op             : 138

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . ext_decl
    (2) program -> . program ext_decl
    (3) ext_decl -> . func_def
    (4) ext_decl -> . decl
    (199) func_def -> . decl_specs declr decl_list comp_stmt
    (200) func_def -> . decl_specs declr comp_stmt
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    program                        shift and go to state 1
    ext_decl                       shift and go to state 2
    func_def                       shift and go to state 3
    decl                           shift and go to state 4
    decl_specs                     shift and go to state 5
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 1

    (0) S' -> program .
    (2) program -> program . ext_decl
    (3) ext_decl -> . func_def
    (4) ext_decl -> . decl
    (199) func_def -> . decl_specs declr decl_list comp_stmt
    (200) func_def -> . decl_specs declr comp_stmt
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    ext_decl                       shift and go to state 35
    func_def                       shift and go to state 3
    decl                           shift and go to state 4
    decl_specs                     shift and go to state 5
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 2

    (1) program -> ext_decl .

    TYPEDEF         reduce using rule 1 (program -> ext_decl .)
    EXTERN          reduce using rule 1 (program -> ext_decl .)
    STATIC          reduce using rule 1 (program -> ext_decl .)
    AUTO            reduce using rule 1 (program -> ext_decl .)
    REGISTER        reduce using rule 1 (program -> ext_decl .)
    VOID            reduce using rule 1 (program -> ext_decl .)
    CHAR            reduce using rule 1 (program -> ext_decl .)
    SHORT           reduce using rule 1 (program -> ext_decl .)
    INT             reduce using rule 1 (program -> ext_decl .)
    LONG            reduce using rule 1 (program -> ext_decl .)
    FLOAT           reduce using rule 1 (program -> ext_decl .)
    DOUBLE          reduce using rule 1 (program -> ext_decl .)
    SIGNED          reduce using rule 1 (program -> ext_decl .)
    UNSIGNED        reduce using rule 1 (program -> ext_decl .)
    BOOL            reduce using rule 1 (program -> ext_decl .)
    CONST           reduce using rule 1 (program -> ext_decl .)
    RESTRICT        reduce using rule 1 (program -> ext_decl .)
    VOLATILE        reduce using rule 1 (program -> ext_decl .)
    INLINE          reduce using rule 1 (program -> ext_decl .)
    ENUM            reduce using rule 1 (program -> ext_decl .)
    STRUCT          reduce using rule 1 (program -> ext_decl .)
    UNION           reduce using rule 1 (program -> ext_decl .)
    $end            reduce using rule 1 (program -> ext_decl .)


state 3

    (3) ext_decl -> func_def .

    TYPEDEF         reduce using rule 3 (ext_decl -> func_def .)
    EXTERN          reduce using rule 3 (ext_decl -> func_def .)
    STATIC          reduce using rule 3 (ext_decl -> func_def .)
    AUTO            reduce using rule 3 (ext_decl -> func_def .)
    REGISTER        reduce using rule 3 (ext_decl -> func_def .)
    VOID            reduce using rule 3 (ext_decl -> func_def .)
    CHAR            reduce using rule 3 (ext_decl -> func_def .)
    SHORT           reduce using rule 3 (ext_decl -> func_def .)
    INT             reduce using rule 3 (ext_decl -> func_def .)
    LONG            reduce using rule 3 (ext_decl -> func_def .)
    FLOAT           reduce using rule 3 (ext_decl -> func_def .)
    DOUBLE          reduce using rule 3 (ext_decl -> func_def .)
    SIGNED          reduce using rule 3 (ext_decl -> func_def .)
    UNSIGNED        reduce using rule 3 (ext_decl -> func_def .)
    BOOL            reduce using rule 3 (ext_decl -> func_def .)
    CONST           reduce using rule 3 (ext_decl -> func_def .)
    RESTRICT        reduce using rule 3 (ext_decl -> func_def .)
    VOLATILE        reduce using rule 3 (ext_decl -> func_def .)
    INLINE          reduce using rule 3 (ext_decl -> func_def .)
    ENUM            reduce using rule 3 (ext_decl -> func_def .)
    STRUCT          reduce using rule 3 (ext_decl -> func_def .)
    UNION           reduce using rule 3 (ext_decl -> func_def .)
    $end            reduce using rule 3 (ext_decl -> func_def .)


state 4

    (4) ext_decl -> decl .

    TYPEDEF         reduce using rule 4 (ext_decl -> decl .)
    EXTERN          reduce using rule 4 (ext_decl -> decl .)
    STATIC          reduce using rule 4 (ext_decl -> decl .)
    AUTO            reduce using rule 4 (ext_decl -> decl .)
    REGISTER        reduce using rule 4 (ext_decl -> decl .)
    VOID            reduce using rule 4 (ext_decl -> decl .)
    CHAR            reduce using rule 4 (ext_decl -> decl .)
    SHORT           reduce using rule 4 (ext_decl -> decl .)
    INT             reduce using rule 4 (ext_decl -> decl .)
    LONG            reduce using rule 4 (ext_decl -> decl .)
    FLOAT           reduce using rule 4 (ext_decl -> decl .)
    DOUBLE          reduce using rule 4 (ext_decl -> decl .)
    SIGNED          reduce using rule 4 (ext_decl -> decl .)
    UNSIGNED        reduce using rule 4 (ext_decl -> decl .)
    BOOL            reduce using rule 4 (ext_decl -> decl .)
    CONST           reduce using rule 4 (ext_decl -> decl .)
    RESTRICT        reduce using rule 4 (ext_decl -> decl .)
    VOLATILE        reduce using rule 4 (ext_decl -> decl .)
    INLINE          reduce using rule 4 (ext_decl -> decl .)
    ENUM            reduce using rule 4 (ext_decl -> decl .)
    STRUCT          reduce using rule 4 (ext_decl -> decl .)
    UNION           reduce using rule 4 (ext_decl -> decl .)
    $end            reduce using rule 4 (ext_decl -> decl .)


state 5

    (199) func_def -> decl_specs . declr decl_list comp_stmt
    (200) func_def -> decl_specs . declr comp_stmt
    (5) decl -> decl_specs . ;
    (6) decl -> decl_specs . init_decl_list ;
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (7) init_decl_list -> . init_decl
    (8) init_decl_list -> . init_decl_list , init_decl
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )
    (9) init_decl -> . declr
    (10) init_decl -> . declr = init

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declr                          shift and go to state 36
    init_decl_list                 shift and go to state 38
    ptr                            shift and go to state 39
    direct_declr                   shift and go to state 40
    init_decl                      shift and go to state 41

state 6

    (11) decl_specs -> stor_class_spec .
    (12) decl_specs -> stor_class_spec . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 11 (decl_specs -> stor_class_spec .)
    *               reduce using rule 11 (decl_specs -> stor_class_spec .)
    IDENTIFIER      reduce using rule 11 (decl_specs -> stor_class_spec .)
    (               reduce using rule 11 (decl_specs -> stor_class_spec .)
    [               reduce using rule 11 (decl_specs -> stor_class_spec .)
    ,               reduce using rule 11 (decl_specs -> stor_class_spec .)
    )               reduce using rule 11 (decl_specs -> stor_class_spec .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    stor_class_spec                shift and go to state 6
    decl_specs                     shift and go to state 45
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 7

    (13) decl_specs -> type_spec .
    (14) decl_specs -> type_spec . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 13 (decl_specs -> type_spec .)
    *               reduce using rule 13 (decl_specs -> type_spec .)
    IDENTIFIER      reduce using rule 13 (decl_specs -> type_spec .)
    (               reduce using rule 13 (decl_specs -> type_spec .)
    [               reduce using rule 13 (decl_specs -> type_spec .)
    ,               reduce using rule 13 (decl_specs -> type_spec .)
    )               reduce using rule 13 (decl_specs -> type_spec .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_spec                      shift and go to state 7
    decl_specs                     shift and go to state 46
    stor_class_spec                shift and go to state 6
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 8

    (15) decl_specs -> type_qual .
    (16) decl_specs -> type_qual . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 15 (decl_specs -> type_qual .)
    *               reduce using rule 15 (decl_specs -> type_qual .)
    IDENTIFIER      reduce using rule 15 (decl_specs -> type_qual .)
    (               reduce using rule 15 (decl_specs -> type_qual .)
    [               reduce using rule 15 (decl_specs -> type_qual .)
    ,               reduce using rule 15 (decl_specs -> type_qual .)
    )               reduce using rule 15 (decl_specs -> type_qual .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qual                      shift and go to state 8
    decl_specs                     shift and go to state 47
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 9

    (17) decl_specs -> func_spec .
    (18) decl_specs -> func_spec . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 17 (decl_specs -> func_spec .)
    *               reduce using rule 17 (decl_specs -> func_spec .)
    IDENTIFIER      reduce using rule 17 (decl_specs -> func_spec .)
    (               reduce using rule 17 (decl_specs -> func_spec .)
    [               reduce using rule 17 (decl_specs -> func_spec .)
    ,               reduce using rule 17 (decl_specs -> func_spec .)
    )               reduce using rule 17 (decl_specs -> func_spec .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    func_spec                      shift and go to state 9
    decl_specs                     shift and go to state 48
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 10

    (19) stor_class_spec -> TYPEDEF .

    TYPEDEF         reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    EXTERN          reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    STATIC          reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    AUTO            reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    REGISTER        reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    VOID            reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    CHAR            reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    SHORT           reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    INT             reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    LONG            reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    FLOAT           reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    DOUBLE          reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    SIGNED          reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    UNSIGNED        reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    BOOL            reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    CONST           reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    RESTRICT        reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    VOLATILE        reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    INLINE          reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    ENUM            reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    STRUCT          reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    UNION           reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    ;               reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    *               reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    IDENTIFIER      reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    (               reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    [               reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    ,               reduce using rule 19 (stor_class_spec -> TYPEDEF .)
    )               reduce using rule 19 (stor_class_spec -> TYPEDEF .)


state 11

    (20) stor_class_spec -> EXTERN .

    TYPEDEF         reduce using rule 20 (stor_class_spec -> EXTERN .)
    EXTERN          reduce using rule 20 (stor_class_spec -> EXTERN .)
    STATIC          reduce using rule 20 (stor_class_spec -> EXTERN .)
    AUTO            reduce using rule 20 (stor_class_spec -> EXTERN .)
    REGISTER        reduce using rule 20 (stor_class_spec -> EXTERN .)
    VOID            reduce using rule 20 (stor_class_spec -> EXTERN .)
    CHAR            reduce using rule 20 (stor_class_spec -> EXTERN .)
    SHORT           reduce using rule 20 (stor_class_spec -> EXTERN .)
    INT             reduce using rule 20 (stor_class_spec -> EXTERN .)
    LONG            reduce using rule 20 (stor_class_spec -> EXTERN .)
    FLOAT           reduce using rule 20 (stor_class_spec -> EXTERN .)
    DOUBLE          reduce using rule 20 (stor_class_spec -> EXTERN .)
    SIGNED          reduce using rule 20 (stor_class_spec -> EXTERN .)
    UNSIGNED        reduce using rule 20 (stor_class_spec -> EXTERN .)
    BOOL            reduce using rule 20 (stor_class_spec -> EXTERN .)
    CONST           reduce using rule 20 (stor_class_spec -> EXTERN .)
    RESTRICT        reduce using rule 20 (stor_class_spec -> EXTERN .)
    VOLATILE        reduce using rule 20 (stor_class_spec -> EXTERN .)
    INLINE          reduce using rule 20 (stor_class_spec -> EXTERN .)
    ENUM            reduce using rule 20 (stor_class_spec -> EXTERN .)
    STRUCT          reduce using rule 20 (stor_class_spec -> EXTERN .)
    UNION           reduce using rule 20 (stor_class_spec -> EXTERN .)
    ;               reduce using rule 20 (stor_class_spec -> EXTERN .)
    *               reduce using rule 20 (stor_class_spec -> EXTERN .)
    IDENTIFIER      reduce using rule 20 (stor_class_spec -> EXTERN .)
    (               reduce using rule 20 (stor_class_spec -> EXTERN .)
    [               reduce using rule 20 (stor_class_spec -> EXTERN .)
    ,               reduce using rule 20 (stor_class_spec -> EXTERN .)
    )               reduce using rule 20 (stor_class_spec -> EXTERN .)


state 12

    (21) stor_class_spec -> STATIC .

    TYPEDEF         reduce using rule 21 (stor_class_spec -> STATIC .)
    EXTERN          reduce using rule 21 (stor_class_spec -> STATIC .)
    STATIC          reduce using rule 21 (stor_class_spec -> STATIC .)
    AUTO            reduce using rule 21 (stor_class_spec -> STATIC .)
    REGISTER        reduce using rule 21 (stor_class_spec -> STATIC .)
    VOID            reduce using rule 21 (stor_class_spec -> STATIC .)
    CHAR            reduce using rule 21 (stor_class_spec -> STATIC .)
    SHORT           reduce using rule 21 (stor_class_spec -> STATIC .)
    INT             reduce using rule 21 (stor_class_spec -> STATIC .)
    LONG            reduce using rule 21 (stor_class_spec -> STATIC .)
    FLOAT           reduce using rule 21 (stor_class_spec -> STATIC .)
    DOUBLE          reduce using rule 21 (stor_class_spec -> STATIC .)
    SIGNED          reduce using rule 21 (stor_class_spec -> STATIC .)
    UNSIGNED        reduce using rule 21 (stor_class_spec -> STATIC .)
    BOOL            reduce using rule 21 (stor_class_spec -> STATIC .)
    CONST           reduce using rule 21 (stor_class_spec -> STATIC .)
    RESTRICT        reduce using rule 21 (stor_class_spec -> STATIC .)
    VOLATILE        reduce using rule 21 (stor_class_spec -> STATIC .)
    INLINE          reduce using rule 21 (stor_class_spec -> STATIC .)
    ENUM            reduce using rule 21 (stor_class_spec -> STATIC .)
    STRUCT          reduce using rule 21 (stor_class_spec -> STATIC .)
    UNION           reduce using rule 21 (stor_class_spec -> STATIC .)
    ;               reduce using rule 21 (stor_class_spec -> STATIC .)
    *               reduce using rule 21 (stor_class_spec -> STATIC .)
    IDENTIFIER      reduce using rule 21 (stor_class_spec -> STATIC .)
    (               reduce using rule 21 (stor_class_spec -> STATIC .)
    [               reduce using rule 21 (stor_class_spec -> STATIC .)
    ,               reduce using rule 21 (stor_class_spec -> STATIC .)
    )               reduce using rule 21 (stor_class_spec -> STATIC .)


state 13

    (22) stor_class_spec -> AUTO .

    TYPEDEF         reduce using rule 22 (stor_class_spec -> AUTO .)
    EXTERN          reduce using rule 22 (stor_class_spec -> AUTO .)
    STATIC          reduce using rule 22 (stor_class_spec -> AUTO .)
    AUTO            reduce using rule 22 (stor_class_spec -> AUTO .)
    REGISTER        reduce using rule 22 (stor_class_spec -> AUTO .)
    VOID            reduce using rule 22 (stor_class_spec -> AUTO .)
    CHAR            reduce using rule 22 (stor_class_spec -> AUTO .)
    SHORT           reduce using rule 22 (stor_class_spec -> AUTO .)
    INT             reduce using rule 22 (stor_class_spec -> AUTO .)
    LONG            reduce using rule 22 (stor_class_spec -> AUTO .)
    FLOAT           reduce using rule 22 (stor_class_spec -> AUTO .)
    DOUBLE          reduce using rule 22 (stor_class_spec -> AUTO .)
    SIGNED          reduce using rule 22 (stor_class_spec -> AUTO .)
    UNSIGNED        reduce using rule 22 (stor_class_spec -> AUTO .)
    BOOL            reduce using rule 22 (stor_class_spec -> AUTO .)
    CONST           reduce using rule 22 (stor_class_spec -> AUTO .)
    RESTRICT        reduce using rule 22 (stor_class_spec -> AUTO .)
    VOLATILE        reduce using rule 22 (stor_class_spec -> AUTO .)
    INLINE          reduce using rule 22 (stor_class_spec -> AUTO .)
    ENUM            reduce using rule 22 (stor_class_spec -> AUTO .)
    STRUCT          reduce using rule 22 (stor_class_spec -> AUTO .)
    UNION           reduce using rule 22 (stor_class_spec -> AUTO .)
    ;               reduce using rule 22 (stor_class_spec -> AUTO .)
    *               reduce using rule 22 (stor_class_spec -> AUTO .)
    IDENTIFIER      reduce using rule 22 (stor_class_spec -> AUTO .)
    (               reduce using rule 22 (stor_class_spec -> AUTO .)
    [               reduce using rule 22 (stor_class_spec -> AUTO .)
    ,               reduce using rule 22 (stor_class_spec -> AUTO .)
    )               reduce using rule 22 (stor_class_spec -> AUTO .)


state 14

    (23) stor_class_spec -> REGISTER .

    TYPEDEF         reduce using rule 23 (stor_class_spec -> REGISTER .)
    EXTERN          reduce using rule 23 (stor_class_spec -> REGISTER .)
    STATIC          reduce using rule 23 (stor_class_spec -> REGISTER .)
    AUTO            reduce using rule 23 (stor_class_spec -> REGISTER .)
    REGISTER        reduce using rule 23 (stor_class_spec -> REGISTER .)
    VOID            reduce using rule 23 (stor_class_spec -> REGISTER .)
    CHAR            reduce using rule 23 (stor_class_spec -> REGISTER .)
    SHORT           reduce using rule 23 (stor_class_spec -> REGISTER .)
    INT             reduce using rule 23 (stor_class_spec -> REGISTER .)
    LONG            reduce using rule 23 (stor_class_spec -> REGISTER .)
    FLOAT           reduce using rule 23 (stor_class_spec -> REGISTER .)
    DOUBLE          reduce using rule 23 (stor_class_spec -> REGISTER .)
    SIGNED          reduce using rule 23 (stor_class_spec -> REGISTER .)
    UNSIGNED        reduce using rule 23 (stor_class_spec -> REGISTER .)
    BOOL            reduce using rule 23 (stor_class_spec -> REGISTER .)
    CONST           reduce using rule 23 (stor_class_spec -> REGISTER .)
    RESTRICT        reduce using rule 23 (stor_class_spec -> REGISTER .)
    VOLATILE        reduce using rule 23 (stor_class_spec -> REGISTER .)
    INLINE          reduce using rule 23 (stor_class_spec -> REGISTER .)
    ENUM            reduce using rule 23 (stor_class_spec -> REGISTER .)
    STRUCT          reduce using rule 23 (stor_class_spec -> REGISTER .)
    UNION           reduce using rule 23 (stor_class_spec -> REGISTER .)
    ;               reduce using rule 23 (stor_class_spec -> REGISTER .)
    *               reduce using rule 23 (stor_class_spec -> REGISTER .)
    IDENTIFIER      reduce using rule 23 (stor_class_spec -> REGISTER .)
    (               reduce using rule 23 (stor_class_spec -> REGISTER .)
    [               reduce using rule 23 (stor_class_spec -> REGISTER .)
    ,               reduce using rule 23 (stor_class_spec -> REGISTER .)
    )               reduce using rule 23 (stor_class_spec -> REGISTER .)


state 15

    (25) type_spec -> VOID .

    TYPEDEF         reduce using rule 25 (type_spec -> VOID .)
    EXTERN          reduce using rule 25 (type_spec -> VOID .)
    STATIC          reduce using rule 25 (type_spec -> VOID .)
    AUTO            reduce using rule 25 (type_spec -> VOID .)
    REGISTER        reduce using rule 25 (type_spec -> VOID .)
    VOID            reduce using rule 25 (type_spec -> VOID .)
    CHAR            reduce using rule 25 (type_spec -> VOID .)
    SHORT           reduce using rule 25 (type_spec -> VOID .)
    INT             reduce using rule 25 (type_spec -> VOID .)
    LONG            reduce using rule 25 (type_spec -> VOID .)
    FLOAT           reduce using rule 25 (type_spec -> VOID .)
    DOUBLE          reduce using rule 25 (type_spec -> VOID .)
    SIGNED          reduce using rule 25 (type_spec -> VOID .)
    UNSIGNED        reduce using rule 25 (type_spec -> VOID .)
    BOOL            reduce using rule 25 (type_spec -> VOID .)
    CONST           reduce using rule 25 (type_spec -> VOID .)
    RESTRICT        reduce using rule 25 (type_spec -> VOID .)
    VOLATILE        reduce using rule 25 (type_spec -> VOID .)
    INLINE          reduce using rule 25 (type_spec -> VOID .)
    ENUM            reduce using rule 25 (type_spec -> VOID .)
    STRUCT          reduce using rule 25 (type_spec -> VOID .)
    UNION           reduce using rule 25 (type_spec -> VOID .)
    ;               reduce using rule 25 (type_spec -> VOID .)
    *               reduce using rule 25 (type_spec -> VOID .)
    IDENTIFIER      reduce using rule 25 (type_spec -> VOID .)
    (               reduce using rule 25 (type_spec -> VOID .)
    [               reduce using rule 25 (type_spec -> VOID .)
    ,               reduce using rule 25 (type_spec -> VOID .)
    )               reduce using rule 25 (type_spec -> VOID .)
    :               reduce using rule 25 (type_spec -> VOID .)


state 16

    (26) type_spec -> CHAR .

    TYPEDEF         reduce using rule 26 (type_spec -> CHAR .)
    EXTERN          reduce using rule 26 (type_spec -> CHAR .)
    STATIC          reduce using rule 26 (type_spec -> CHAR .)
    AUTO            reduce using rule 26 (type_spec -> CHAR .)
    REGISTER        reduce using rule 26 (type_spec -> CHAR .)
    VOID            reduce using rule 26 (type_spec -> CHAR .)
    CHAR            reduce using rule 26 (type_spec -> CHAR .)
    SHORT           reduce using rule 26 (type_spec -> CHAR .)
    INT             reduce using rule 26 (type_spec -> CHAR .)
    LONG            reduce using rule 26 (type_spec -> CHAR .)
    FLOAT           reduce using rule 26 (type_spec -> CHAR .)
    DOUBLE          reduce using rule 26 (type_spec -> CHAR .)
    SIGNED          reduce using rule 26 (type_spec -> CHAR .)
    UNSIGNED        reduce using rule 26 (type_spec -> CHAR .)
    BOOL            reduce using rule 26 (type_spec -> CHAR .)
    CONST           reduce using rule 26 (type_spec -> CHAR .)
    RESTRICT        reduce using rule 26 (type_spec -> CHAR .)
    VOLATILE        reduce using rule 26 (type_spec -> CHAR .)
    INLINE          reduce using rule 26 (type_spec -> CHAR .)
    ENUM            reduce using rule 26 (type_spec -> CHAR .)
    STRUCT          reduce using rule 26 (type_spec -> CHAR .)
    UNION           reduce using rule 26 (type_spec -> CHAR .)
    ;               reduce using rule 26 (type_spec -> CHAR .)
    *               reduce using rule 26 (type_spec -> CHAR .)
    IDENTIFIER      reduce using rule 26 (type_spec -> CHAR .)
    (               reduce using rule 26 (type_spec -> CHAR .)
    [               reduce using rule 26 (type_spec -> CHAR .)
    ,               reduce using rule 26 (type_spec -> CHAR .)
    )               reduce using rule 26 (type_spec -> CHAR .)
    :               reduce using rule 26 (type_spec -> CHAR .)


state 17

    (27) type_spec -> SHORT .

    TYPEDEF         reduce using rule 27 (type_spec -> SHORT .)
    EXTERN          reduce using rule 27 (type_spec -> SHORT .)
    STATIC          reduce using rule 27 (type_spec -> SHORT .)
    AUTO            reduce using rule 27 (type_spec -> SHORT .)
    REGISTER        reduce using rule 27 (type_spec -> SHORT .)
    VOID            reduce using rule 27 (type_spec -> SHORT .)
    CHAR            reduce using rule 27 (type_spec -> SHORT .)
    SHORT           reduce using rule 27 (type_spec -> SHORT .)
    INT             reduce using rule 27 (type_spec -> SHORT .)
    LONG            reduce using rule 27 (type_spec -> SHORT .)
    FLOAT           reduce using rule 27 (type_spec -> SHORT .)
    DOUBLE          reduce using rule 27 (type_spec -> SHORT .)
    SIGNED          reduce using rule 27 (type_spec -> SHORT .)
    UNSIGNED        reduce using rule 27 (type_spec -> SHORT .)
    BOOL            reduce using rule 27 (type_spec -> SHORT .)
    CONST           reduce using rule 27 (type_spec -> SHORT .)
    RESTRICT        reduce using rule 27 (type_spec -> SHORT .)
    VOLATILE        reduce using rule 27 (type_spec -> SHORT .)
    INLINE          reduce using rule 27 (type_spec -> SHORT .)
    ENUM            reduce using rule 27 (type_spec -> SHORT .)
    STRUCT          reduce using rule 27 (type_spec -> SHORT .)
    UNION           reduce using rule 27 (type_spec -> SHORT .)
    ;               reduce using rule 27 (type_spec -> SHORT .)
    *               reduce using rule 27 (type_spec -> SHORT .)
    IDENTIFIER      reduce using rule 27 (type_spec -> SHORT .)
    (               reduce using rule 27 (type_spec -> SHORT .)
    [               reduce using rule 27 (type_spec -> SHORT .)
    ,               reduce using rule 27 (type_spec -> SHORT .)
    )               reduce using rule 27 (type_spec -> SHORT .)
    :               reduce using rule 27 (type_spec -> SHORT .)


state 18

    (28) type_spec -> INT .

    TYPEDEF         reduce using rule 28 (type_spec -> INT .)
    EXTERN          reduce using rule 28 (type_spec -> INT .)
    STATIC          reduce using rule 28 (type_spec -> INT .)
    AUTO            reduce using rule 28 (type_spec -> INT .)
    REGISTER        reduce using rule 28 (type_spec -> INT .)
    VOID            reduce using rule 28 (type_spec -> INT .)
    CHAR            reduce using rule 28 (type_spec -> INT .)
    SHORT           reduce using rule 28 (type_spec -> INT .)
    INT             reduce using rule 28 (type_spec -> INT .)
    LONG            reduce using rule 28 (type_spec -> INT .)
    FLOAT           reduce using rule 28 (type_spec -> INT .)
    DOUBLE          reduce using rule 28 (type_spec -> INT .)
    SIGNED          reduce using rule 28 (type_spec -> INT .)
    UNSIGNED        reduce using rule 28 (type_spec -> INT .)
    BOOL            reduce using rule 28 (type_spec -> INT .)
    CONST           reduce using rule 28 (type_spec -> INT .)
    RESTRICT        reduce using rule 28 (type_spec -> INT .)
    VOLATILE        reduce using rule 28 (type_spec -> INT .)
    INLINE          reduce using rule 28 (type_spec -> INT .)
    ENUM            reduce using rule 28 (type_spec -> INT .)
    STRUCT          reduce using rule 28 (type_spec -> INT .)
    UNION           reduce using rule 28 (type_spec -> INT .)
    ;               reduce using rule 28 (type_spec -> INT .)
    *               reduce using rule 28 (type_spec -> INT .)
    IDENTIFIER      reduce using rule 28 (type_spec -> INT .)
    (               reduce using rule 28 (type_spec -> INT .)
    [               reduce using rule 28 (type_spec -> INT .)
    ,               reduce using rule 28 (type_spec -> INT .)
    )               reduce using rule 28 (type_spec -> INT .)
    :               reduce using rule 28 (type_spec -> INT .)


state 19

    (29) type_spec -> LONG .

    TYPEDEF         reduce using rule 29 (type_spec -> LONG .)
    EXTERN          reduce using rule 29 (type_spec -> LONG .)
    STATIC          reduce using rule 29 (type_spec -> LONG .)
    AUTO            reduce using rule 29 (type_spec -> LONG .)
    REGISTER        reduce using rule 29 (type_spec -> LONG .)
    VOID            reduce using rule 29 (type_spec -> LONG .)
    CHAR            reduce using rule 29 (type_spec -> LONG .)
    SHORT           reduce using rule 29 (type_spec -> LONG .)
    INT             reduce using rule 29 (type_spec -> LONG .)
    LONG            reduce using rule 29 (type_spec -> LONG .)
    FLOAT           reduce using rule 29 (type_spec -> LONG .)
    DOUBLE          reduce using rule 29 (type_spec -> LONG .)
    SIGNED          reduce using rule 29 (type_spec -> LONG .)
    UNSIGNED        reduce using rule 29 (type_spec -> LONG .)
    BOOL            reduce using rule 29 (type_spec -> LONG .)
    CONST           reduce using rule 29 (type_spec -> LONG .)
    RESTRICT        reduce using rule 29 (type_spec -> LONG .)
    VOLATILE        reduce using rule 29 (type_spec -> LONG .)
    INLINE          reduce using rule 29 (type_spec -> LONG .)
    ENUM            reduce using rule 29 (type_spec -> LONG .)
    STRUCT          reduce using rule 29 (type_spec -> LONG .)
    UNION           reduce using rule 29 (type_spec -> LONG .)
    ;               reduce using rule 29 (type_spec -> LONG .)
    *               reduce using rule 29 (type_spec -> LONG .)
    IDENTIFIER      reduce using rule 29 (type_spec -> LONG .)
    (               reduce using rule 29 (type_spec -> LONG .)
    [               reduce using rule 29 (type_spec -> LONG .)
    ,               reduce using rule 29 (type_spec -> LONG .)
    )               reduce using rule 29 (type_spec -> LONG .)
    :               reduce using rule 29 (type_spec -> LONG .)


state 20

    (30) type_spec -> FLOAT .

    TYPEDEF         reduce using rule 30 (type_spec -> FLOAT .)
    EXTERN          reduce using rule 30 (type_spec -> FLOAT .)
    STATIC          reduce using rule 30 (type_spec -> FLOAT .)
    AUTO            reduce using rule 30 (type_spec -> FLOAT .)
    REGISTER        reduce using rule 30 (type_spec -> FLOAT .)
    VOID            reduce using rule 30 (type_spec -> FLOAT .)
    CHAR            reduce using rule 30 (type_spec -> FLOAT .)
    SHORT           reduce using rule 30 (type_spec -> FLOAT .)
    INT             reduce using rule 30 (type_spec -> FLOAT .)
    LONG            reduce using rule 30 (type_spec -> FLOAT .)
    FLOAT           reduce using rule 30 (type_spec -> FLOAT .)
    DOUBLE          reduce using rule 30 (type_spec -> FLOAT .)
    SIGNED          reduce using rule 30 (type_spec -> FLOAT .)
    UNSIGNED        reduce using rule 30 (type_spec -> FLOAT .)
    BOOL            reduce using rule 30 (type_spec -> FLOAT .)
    CONST           reduce using rule 30 (type_spec -> FLOAT .)
    RESTRICT        reduce using rule 30 (type_spec -> FLOAT .)
    VOLATILE        reduce using rule 30 (type_spec -> FLOAT .)
    INLINE          reduce using rule 30 (type_spec -> FLOAT .)
    ENUM            reduce using rule 30 (type_spec -> FLOAT .)
    STRUCT          reduce using rule 30 (type_spec -> FLOAT .)
    UNION           reduce using rule 30 (type_spec -> FLOAT .)
    ;               reduce using rule 30 (type_spec -> FLOAT .)
    *               reduce using rule 30 (type_spec -> FLOAT .)
    IDENTIFIER      reduce using rule 30 (type_spec -> FLOAT .)
    (               reduce using rule 30 (type_spec -> FLOAT .)
    [               reduce using rule 30 (type_spec -> FLOAT .)
    ,               reduce using rule 30 (type_spec -> FLOAT .)
    )               reduce using rule 30 (type_spec -> FLOAT .)
    :               reduce using rule 30 (type_spec -> FLOAT .)


state 21

    (31) type_spec -> DOUBLE .

    TYPEDEF         reduce using rule 31 (type_spec -> DOUBLE .)
    EXTERN          reduce using rule 31 (type_spec -> DOUBLE .)
    STATIC          reduce using rule 31 (type_spec -> DOUBLE .)
    AUTO            reduce using rule 31 (type_spec -> DOUBLE .)
    REGISTER        reduce using rule 31 (type_spec -> DOUBLE .)
    VOID            reduce using rule 31 (type_spec -> DOUBLE .)
    CHAR            reduce using rule 31 (type_spec -> DOUBLE .)
    SHORT           reduce using rule 31 (type_spec -> DOUBLE .)
    INT             reduce using rule 31 (type_spec -> DOUBLE .)
    LONG            reduce using rule 31 (type_spec -> DOUBLE .)
    FLOAT           reduce using rule 31 (type_spec -> DOUBLE .)
    DOUBLE          reduce using rule 31 (type_spec -> DOUBLE .)
    SIGNED          reduce using rule 31 (type_spec -> DOUBLE .)
    UNSIGNED        reduce using rule 31 (type_spec -> DOUBLE .)
    BOOL            reduce using rule 31 (type_spec -> DOUBLE .)
    CONST           reduce using rule 31 (type_spec -> DOUBLE .)
    RESTRICT        reduce using rule 31 (type_spec -> DOUBLE .)
    VOLATILE        reduce using rule 31 (type_spec -> DOUBLE .)
    INLINE          reduce using rule 31 (type_spec -> DOUBLE .)
    ENUM            reduce using rule 31 (type_spec -> DOUBLE .)
    STRUCT          reduce using rule 31 (type_spec -> DOUBLE .)
    UNION           reduce using rule 31 (type_spec -> DOUBLE .)
    ;               reduce using rule 31 (type_spec -> DOUBLE .)
    *               reduce using rule 31 (type_spec -> DOUBLE .)
    IDENTIFIER      reduce using rule 31 (type_spec -> DOUBLE .)
    (               reduce using rule 31 (type_spec -> DOUBLE .)
    [               reduce using rule 31 (type_spec -> DOUBLE .)
    ,               reduce using rule 31 (type_spec -> DOUBLE .)
    )               reduce using rule 31 (type_spec -> DOUBLE .)
    :               reduce using rule 31 (type_spec -> DOUBLE .)


state 22

    (32) type_spec -> SIGNED .

    TYPEDEF         reduce using rule 32 (type_spec -> SIGNED .)
    EXTERN          reduce using rule 32 (type_spec -> SIGNED .)
    STATIC          reduce using rule 32 (type_spec -> SIGNED .)
    AUTO            reduce using rule 32 (type_spec -> SIGNED .)
    REGISTER        reduce using rule 32 (type_spec -> SIGNED .)
    VOID            reduce using rule 32 (type_spec -> SIGNED .)
    CHAR            reduce using rule 32 (type_spec -> SIGNED .)
    SHORT           reduce using rule 32 (type_spec -> SIGNED .)
    INT             reduce using rule 32 (type_spec -> SIGNED .)
    LONG            reduce using rule 32 (type_spec -> SIGNED .)
    FLOAT           reduce using rule 32 (type_spec -> SIGNED .)
    DOUBLE          reduce using rule 32 (type_spec -> SIGNED .)
    SIGNED          reduce using rule 32 (type_spec -> SIGNED .)
    UNSIGNED        reduce using rule 32 (type_spec -> SIGNED .)
    BOOL            reduce using rule 32 (type_spec -> SIGNED .)
    CONST           reduce using rule 32 (type_spec -> SIGNED .)
    RESTRICT        reduce using rule 32 (type_spec -> SIGNED .)
    VOLATILE        reduce using rule 32 (type_spec -> SIGNED .)
    INLINE          reduce using rule 32 (type_spec -> SIGNED .)
    ENUM            reduce using rule 32 (type_spec -> SIGNED .)
    STRUCT          reduce using rule 32 (type_spec -> SIGNED .)
    UNION           reduce using rule 32 (type_spec -> SIGNED .)
    ;               reduce using rule 32 (type_spec -> SIGNED .)
    *               reduce using rule 32 (type_spec -> SIGNED .)
    IDENTIFIER      reduce using rule 32 (type_spec -> SIGNED .)
    (               reduce using rule 32 (type_spec -> SIGNED .)
    [               reduce using rule 32 (type_spec -> SIGNED .)
    ,               reduce using rule 32 (type_spec -> SIGNED .)
    )               reduce using rule 32 (type_spec -> SIGNED .)
    :               reduce using rule 32 (type_spec -> SIGNED .)


state 23

    (33) type_spec -> UNSIGNED .

    TYPEDEF         reduce using rule 33 (type_spec -> UNSIGNED .)
    EXTERN          reduce using rule 33 (type_spec -> UNSIGNED .)
    STATIC          reduce using rule 33 (type_spec -> UNSIGNED .)
    AUTO            reduce using rule 33 (type_spec -> UNSIGNED .)
    REGISTER        reduce using rule 33 (type_spec -> UNSIGNED .)
    VOID            reduce using rule 33 (type_spec -> UNSIGNED .)
    CHAR            reduce using rule 33 (type_spec -> UNSIGNED .)
    SHORT           reduce using rule 33 (type_spec -> UNSIGNED .)
    INT             reduce using rule 33 (type_spec -> UNSIGNED .)
    LONG            reduce using rule 33 (type_spec -> UNSIGNED .)
    FLOAT           reduce using rule 33 (type_spec -> UNSIGNED .)
    DOUBLE          reduce using rule 33 (type_spec -> UNSIGNED .)
    SIGNED          reduce using rule 33 (type_spec -> UNSIGNED .)
    UNSIGNED        reduce using rule 33 (type_spec -> UNSIGNED .)
    BOOL            reduce using rule 33 (type_spec -> UNSIGNED .)
    CONST           reduce using rule 33 (type_spec -> UNSIGNED .)
    RESTRICT        reduce using rule 33 (type_spec -> UNSIGNED .)
    VOLATILE        reduce using rule 33 (type_spec -> UNSIGNED .)
    INLINE          reduce using rule 33 (type_spec -> UNSIGNED .)
    ENUM            reduce using rule 33 (type_spec -> UNSIGNED .)
    STRUCT          reduce using rule 33 (type_spec -> UNSIGNED .)
    UNION           reduce using rule 33 (type_spec -> UNSIGNED .)
    ;               reduce using rule 33 (type_spec -> UNSIGNED .)
    *               reduce using rule 33 (type_spec -> UNSIGNED .)
    IDENTIFIER      reduce using rule 33 (type_spec -> UNSIGNED .)
    (               reduce using rule 33 (type_spec -> UNSIGNED .)
    [               reduce using rule 33 (type_spec -> UNSIGNED .)
    ,               reduce using rule 33 (type_spec -> UNSIGNED .)
    )               reduce using rule 33 (type_spec -> UNSIGNED .)
    :               reduce using rule 33 (type_spec -> UNSIGNED .)


state 24

    (34) type_spec -> BOOL .

    TYPEDEF         reduce using rule 34 (type_spec -> BOOL .)
    EXTERN          reduce using rule 34 (type_spec -> BOOL .)
    STATIC          reduce using rule 34 (type_spec -> BOOL .)
    AUTO            reduce using rule 34 (type_spec -> BOOL .)
    REGISTER        reduce using rule 34 (type_spec -> BOOL .)
    VOID            reduce using rule 34 (type_spec -> BOOL .)
    CHAR            reduce using rule 34 (type_spec -> BOOL .)
    SHORT           reduce using rule 34 (type_spec -> BOOL .)
    INT             reduce using rule 34 (type_spec -> BOOL .)
    LONG            reduce using rule 34 (type_spec -> BOOL .)
    FLOAT           reduce using rule 34 (type_spec -> BOOL .)
    DOUBLE          reduce using rule 34 (type_spec -> BOOL .)
    SIGNED          reduce using rule 34 (type_spec -> BOOL .)
    UNSIGNED        reduce using rule 34 (type_spec -> BOOL .)
    BOOL            reduce using rule 34 (type_spec -> BOOL .)
    CONST           reduce using rule 34 (type_spec -> BOOL .)
    RESTRICT        reduce using rule 34 (type_spec -> BOOL .)
    VOLATILE        reduce using rule 34 (type_spec -> BOOL .)
    INLINE          reduce using rule 34 (type_spec -> BOOL .)
    ENUM            reduce using rule 34 (type_spec -> BOOL .)
    STRUCT          reduce using rule 34 (type_spec -> BOOL .)
    UNION           reduce using rule 34 (type_spec -> BOOL .)
    ;               reduce using rule 34 (type_spec -> BOOL .)
    *               reduce using rule 34 (type_spec -> BOOL .)
    IDENTIFIER      reduce using rule 34 (type_spec -> BOOL .)
    (               reduce using rule 34 (type_spec -> BOOL .)
    [               reduce using rule 34 (type_spec -> BOOL .)
    ,               reduce using rule 34 (type_spec -> BOOL .)
    )               reduce using rule 34 (type_spec -> BOOL .)
    :               reduce using rule 34 (type_spec -> BOOL .)


state 25

    (35) type_spec -> struct_or_union_spec .

    TYPEDEF         reduce using rule 35 (type_spec -> struct_or_union_spec .)
    EXTERN          reduce using rule 35 (type_spec -> struct_or_union_spec .)
    STATIC          reduce using rule 35 (type_spec -> struct_or_union_spec .)
    AUTO            reduce using rule 35 (type_spec -> struct_or_union_spec .)
    REGISTER        reduce using rule 35 (type_spec -> struct_or_union_spec .)
    VOID            reduce using rule 35 (type_spec -> struct_or_union_spec .)
    CHAR            reduce using rule 35 (type_spec -> struct_or_union_spec .)
    SHORT           reduce using rule 35 (type_spec -> struct_or_union_spec .)
    INT             reduce using rule 35 (type_spec -> struct_or_union_spec .)
    LONG            reduce using rule 35 (type_spec -> struct_or_union_spec .)
    FLOAT           reduce using rule 35 (type_spec -> struct_or_union_spec .)
    DOUBLE          reduce using rule 35 (type_spec -> struct_or_union_spec .)
    SIGNED          reduce using rule 35 (type_spec -> struct_or_union_spec .)
    UNSIGNED        reduce using rule 35 (type_spec -> struct_or_union_spec .)
    BOOL            reduce using rule 35 (type_spec -> struct_or_union_spec .)
    CONST           reduce using rule 35 (type_spec -> struct_or_union_spec .)
    RESTRICT        reduce using rule 35 (type_spec -> struct_or_union_spec .)
    VOLATILE        reduce using rule 35 (type_spec -> struct_or_union_spec .)
    INLINE          reduce using rule 35 (type_spec -> struct_or_union_spec .)
    ENUM            reduce using rule 35 (type_spec -> struct_or_union_spec .)
    STRUCT          reduce using rule 35 (type_spec -> struct_or_union_spec .)
    UNION           reduce using rule 35 (type_spec -> struct_or_union_spec .)
    ;               reduce using rule 35 (type_spec -> struct_or_union_spec .)
    *               reduce using rule 35 (type_spec -> struct_or_union_spec .)
    IDENTIFIER      reduce using rule 35 (type_spec -> struct_or_union_spec .)
    (               reduce using rule 35 (type_spec -> struct_or_union_spec .)
    [               reduce using rule 35 (type_spec -> struct_or_union_spec .)
    ,               reduce using rule 35 (type_spec -> struct_or_union_spec .)
    )               reduce using rule 35 (type_spec -> struct_or_union_spec .)
    :               reduce using rule 35 (type_spec -> struct_or_union_spec .)


state 26

    (36) type_spec -> enum_spec .

    TYPEDEF         reduce using rule 36 (type_spec -> enum_spec .)
    EXTERN          reduce using rule 36 (type_spec -> enum_spec .)
    STATIC          reduce using rule 36 (type_spec -> enum_spec .)
    AUTO            reduce using rule 36 (type_spec -> enum_spec .)
    REGISTER        reduce using rule 36 (type_spec -> enum_spec .)
    VOID            reduce using rule 36 (type_spec -> enum_spec .)
    CHAR            reduce using rule 36 (type_spec -> enum_spec .)
    SHORT           reduce using rule 36 (type_spec -> enum_spec .)
    INT             reduce using rule 36 (type_spec -> enum_spec .)
    LONG            reduce using rule 36 (type_spec -> enum_spec .)
    FLOAT           reduce using rule 36 (type_spec -> enum_spec .)
    DOUBLE          reduce using rule 36 (type_spec -> enum_spec .)
    SIGNED          reduce using rule 36 (type_spec -> enum_spec .)
    UNSIGNED        reduce using rule 36 (type_spec -> enum_spec .)
    BOOL            reduce using rule 36 (type_spec -> enum_spec .)
    CONST           reduce using rule 36 (type_spec -> enum_spec .)
    RESTRICT        reduce using rule 36 (type_spec -> enum_spec .)
    VOLATILE        reduce using rule 36 (type_spec -> enum_spec .)
    INLINE          reduce using rule 36 (type_spec -> enum_spec .)
    ENUM            reduce using rule 36 (type_spec -> enum_spec .)
    STRUCT          reduce using rule 36 (type_spec -> enum_spec .)
    UNION           reduce using rule 36 (type_spec -> enum_spec .)
    ;               reduce using rule 36 (type_spec -> enum_spec .)
    *               reduce using rule 36 (type_spec -> enum_spec .)
    IDENTIFIER      reduce using rule 36 (type_spec -> enum_spec .)
    (               reduce using rule 36 (type_spec -> enum_spec .)
    [               reduce using rule 36 (type_spec -> enum_spec .)
    ,               reduce using rule 36 (type_spec -> enum_spec .)
    )               reduce using rule 36 (type_spec -> enum_spec .)
    :               reduce using rule 36 (type_spec -> enum_spec .)


state 27

    (37) type_qual -> CONST .

    TYPEDEF         reduce using rule 37 (type_qual -> CONST .)
    EXTERN          reduce using rule 37 (type_qual -> CONST .)
    STATIC          reduce using rule 37 (type_qual -> CONST .)
    AUTO            reduce using rule 37 (type_qual -> CONST .)
    REGISTER        reduce using rule 37 (type_qual -> CONST .)
    VOID            reduce using rule 37 (type_qual -> CONST .)
    CHAR            reduce using rule 37 (type_qual -> CONST .)
    SHORT           reduce using rule 37 (type_qual -> CONST .)
    INT             reduce using rule 37 (type_qual -> CONST .)
    LONG            reduce using rule 37 (type_qual -> CONST .)
    FLOAT           reduce using rule 37 (type_qual -> CONST .)
    DOUBLE          reduce using rule 37 (type_qual -> CONST .)
    SIGNED          reduce using rule 37 (type_qual -> CONST .)
    UNSIGNED        reduce using rule 37 (type_qual -> CONST .)
    BOOL            reduce using rule 37 (type_qual -> CONST .)
    CONST           reduce using rule 37 (type_qual -> CONST .)
    RESTRICT        reduce using rule 37 (type_qual -> CONST .)
    VOLATILE        reduce using rule 37 (type_qual -> CONST .)
    INLINE          reduce using rule 37 (type_qual -> CONST .)
    ENUM            reduce using rule 37 (type_qual -> CONST .)
    STRUCT          reduce using rule 37 (type_qual -> CONST .)
    UNION           reduce using rule 37 (type_qual -> CONST .)
    ;               reduce using rule 37 (type_qual -> CONST .)
    *               reduce using rule 37 (type_qual -> CONST .)
    IDENTIFIER      reduce using rule 37 (type_qual -> CONST .)
    (               reduce using rule 37 (type_qual -> CONST .)
    [               reduce using rule 37 (type_qual -> CONST .)
    ,               reduce using rule 37 (type_qual -> CONST .)
    )               reduce using rule 37 (type_qual -> CONST .)
    :               reduce using rule 37 (type_qual -> CONST .)
    ]               reduce using rule 37 (type_qual -> CONST .)
    INC_OP          reduce using rule 37 (type_qual -> CONST .)
    DEC_OP          reduce using rule 37 (type_qual -> CONST .)
    SIZEOF          reduce using rule 37 (type_qual -> CONST .)
    &               reduce using rule 37 (type_qual -> CONST .)
    +               reduce using rule 37 (type_qual -> CONST .)
    -               reduce using rule 37 (type_qual -> CONST .)
    ~               reduce using rule 37 (type_qual -> CONST .)
    !               reduce using rule 37 (type_qual -> CONST .)
    CONSTANT        reduce using rule 37 (type_qual -> CONST .)
    STRING_LITERAL  reduce using rule 37 (type_qual -> CONST .)


state 28

    (38) type_qual -> RESTRICT .

    TYPEDEF         reduce using rule 38 (type_qual -> RESTRICT .)
    EXTERN          reduce using rule 38 (type_qual -> RESTRICT .)
    STATIC          reduce using rule 38 (type_qual -> RESTRICT .)
    AUTO            reduce using rule 38 (type_qual -> RESTRICT .)
    REGISTER        reduce using rule 38 (type_qual -> RESTRICT .)
    VOID            reduce using rule 38 (type_qual -> RESTRICT .)
    CHAR            reduce using rule 38 (type_qual -> RESTRICT .)
    SHORT           reduce using rule 38 (type_qual -> RESTRICT .)
    INT             reduce using rule 38 (type_qual -> RESTRICT .)
    LONG            reduce using rule 38 (type_qual -> RESTRICT .)
    FLOAT           reduce using rule 38 (type_qual -> RESTRICT .)
    DOUBLE          reduce using rule 38 (type_qual -> RESTRICT .)
    SIGNED          reduce using rule 38 (type_qual -> RESTRICT .)
    UNSIGNED        reduce using rule 38 (type_qual -> RESTRICT .)
    BOOL            reduce using rule 38 (type_qual -> RESTRICT .)
    CONST           reduce using rule 38 (type_qual -> RESTRICT .)
    RESTRICT        reduce using rule 38 (type_qual -> RESTRICT .)
    VOLATILE        reduce using rule 38 (type_qual -> RESTRICT .)
    INLINE          reduce using rule 38 (type_qual -> RESTRICT .)
    ENUM            reduce using rule 38 (type_qual -> RESTRICT .)
    STRUCT          reduce using rule 38 (type_qual -> RESTRICT .)
    UNION           reduce using rule 38 (type_qual -> RESTRICT .)
    ;               reduce using rule 38 (type_qual -> RESTRICT .)
    *               reduce using rule 38 (type_qual -> RESTRICT .)
    IDENTIFIER      reduce using rule 38 (type_qual -> RESTRICT .)
    (               reduce using rule 38 (type_qual -> RESTRICT .)
    [               reduce using rule 38 (type_qual -> RESTRICT .)
    ,               reduce using rule 38 (type_qual -> RESTRICT .)
    )               reduce using rule 38 (type_qual -> RESTRICT .)
    :               reduce using rule 38 (type_qual -> RESTRICT .)
    ]               reduce using rule 38 (type_qual -> RESTRICT .)
    INC_OP          reduce using rule 38 (type_qual -> RESTRICT .)
    DEC_OP          reduce using rule 38 (type_qual -> RESTRICT .)
    SIZEOF          reduce using rule 38 (type_qual -> RESTRICT .)
    &               reduce using rule 38 (type_qual -> RESTRICT .)
    +               reduce using rule 38 (type_qual -> RESTRICT .)
    -               reduce using rule 38 (type_qual -> RESTRICT .)
    ~               reduce using rule 38 (type_qual -> RESTRICT .)
    !               reduce using rule 38 (type_qual -> RESTRICT .)
    CONSTANT        reduce using rule 38 (type_qual -> RESTRICT .)
    STRING_LITERAL  reduce using rule 38 (type_qual -> RESTRICT .)


state 29

    (39) type_qual -> VOLATILE .

    TYPEDEF         reduce using rule 39 (type_qual -> VOLATILE .)
    EXTERN          reduce using rule 39 (type_qual -> VOLATILE .)
    STATIC          reduce using rule 39 (type_qual -> VOLATILE .)
    AUTO            reduce using rule 39 (type_qual -> VOLATILE .)
    REGISTER        reduce using rule 39 (type_qual -> VOLATILE .)
    VOID            reduce using rule 39 (type_qual -> VOLATILE .)
    CHAR            reduce using rule 39 (type_qual -> VOLATILE .)
    SHORT           reduce using rule 39 (type_qual -> VOLATILE .)
    INT             reduce using rule 39 (type_qual -> VOLATILE .)
    LONG            reduce using rule 39 (type_qual -> VOLATILE .)
    FLOAT           reduce using rule 39 (type_qual -> VOLATILE .)
    DOUBLE          reduce using rule 39 (type_qual -> VOLATILE .)
    SIGNED          reduce using rule 39 (type_qual -> VOLATILE .)
    UNSIGNED        reduce using rule 39 (type_qual -> VOLATILE .)
    BOOL            reduce using rule 39 (type_qual -> VOLATILE .)
    CONST           reduce using rule 39 (type_qual -> VOLATILE .)
    RESTRICT        reduce using rule 39 (type_qual -> VOLATILE .)
    VOLATILE        reduce using rule 39 (type_qual -> VOLATILE .)
    INLINE          reduce using rule 39 (type_qual -> VOLATILE .)
    ENUM            reduce using rule 39 (type_qual -> VOLATILE .)
    STRUCT          reduce using rule 39 (type_qual -> VOLATILE .)
    UNION           reduce using rule 39 (type_qual -> VOLATILE .)
    ;               reduce using rule 39 (type_qual -> VOLATILE .)
    *               reduce using rule 39 (type_qual -> VOLATILE .)
    IDENTIFIER      reduce using rule 39 (type_qual -> VOLATILE .)
    (               reduce using rule 39 (type_qual -> VOLATILE .)
    [               reduce using rule 39 (type_qual -> VOLATILE .)
    ,               reduce using rule 39 (type_qual -> VOLATILE .)
    )               reduce using rule 39 (type_qual -> VOLATILE .)
    :               reduce using rule 39 (type_qual -> VOLATILE .)
    ]               reduce using rule 39 (type_qual -> VOLATILE .)
    INC_OP          reduce using rule 39 (type_qual -> VOLATILE .)
    DEC_OP          reduce using rule 39 (type_qual -> VOLATILE .)
    SIZEOF          reduce using rule 39 (type_qual -> VOLATILE .)
    &               reduce using rule 39 (type_qual -> VOLATILE .)
    +               reduce using rule 39 (type_qual -> VOLATILE .)
    -               reduce using rule 39 (type_qual -> VOLATILE .)
    ~               reduce using rule 39 (type_qual -> VOLATILE .)
    !               reduce using rule 39 (type_qual -> VOLATILE .)
    CONSTANT        reduce using rule 39 (type_qual -> VOLATILE .)
    STRING_LITERAL  reduce using rule 39 (type_qual -> VOLATILE .)


state 30

    (24) func_spec -> INLINE .

    TYPEDEF         reduce using rule 24 (func_spec -> INLINE .)
    EXTERN          reduce using rule 24 (func_spec -> INLINE .)
    STATIC          reduce using rule 24 (func_spec -> INLINE .)
    AUTO            reduce using rule 24 (func_spec -> INLINE .)
    REGISTER        reduce using rule 24 (func_spec -> INLINE .)
    VOID            reduce using rule 24 (func_spec -> INLINE .)
    CHAR            reduce using rule 24 (func_spec -> INLINE .)
    SHORT           reduce using rule 24 (func_spec -> INLINE .)
    INT             reduce using rule 24 (func_spec -> INLINE .)
    LONG            reduce using rule 24 (func_spec -> INLINE .)
    FLOAT           reduce using rule 24 (func_spec -> INLINE .)
    DOUBLE          reduce using rule 24 (func_spec -> INLINE .)
    SIGNED          reduce using rule 24 (func_spec -> INLINE .)
    UNSIGNED        reduce using rule 24 (func_spec -> INLINE .)
    BOOL            reduce using rule 24 (func_spec -> INLINE .)
    CONST           reduce using rule 24 (func_spec -> INLINE .)
    RESTRICT        reduce using rule 24 (func_spec -> INLINE .)
    VOLATILE        reduce using rule 24 (func_spec -> INLINE .)
    INLINE          reduce using rule 24 (func_spec -> INLINE .)
    ENUM            reduce using rule 24 (func_spec -> INLINE .)
    STRUCT          reduce using rule 24 (func_spec -> INLINE .)
    UNION           reduce using rule 24 (func_spec -> INLINE .)
    ;               reduce using rule 24 (func_spec -> INLINE .)
    *               reduce using rule 24 (func_spec -> INLINE .)
    IDENTIFIER      reduce using rule 24 (func_spec -> INLINE .)
    (               reduce using rule 24 (func_spec -> INLINE .)
    [               reduce using rule 24 (func_spec -> INLINE .)
    ,               reduce using rule 24 (func_spec -> INLINE .)
    )               reduce using rule 24 (func_spec -> INLINE .)


state 31

    (49) struct_or_union_spec -> struct_or_union . IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> struct_or_union . { struct_decl_list }
    (51) struct_or_union_spec -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 49
    {               shift and go to state 50


state 32

    (40) enum_spec -> ENUM . { enum_list }
    (41) enum_spec -> ENUM . IDENTIFIER { enum_list }
    (42) enum_spec -> ENUM . { enum_list , }
    (43) enum_spec -> ENUM . IDENTIFIER { enum_list , }
    (44) enum_spec -> ENUM . IDENTIFIER

    {               shift and go to state 51
    IDENTIFIER      shift and go to state 52


state 33

    (52) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 52 (struct_or_union -> STRUCT .)
    {               reduce using rule 52 (struct_or_union -> STRUCT .)


state 34

    (53) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 53 (struct_or_union -> UNION .)
    {               reduce using rule 53 (struct_or_union -> UNION .)


state 35

    (2) program -> program ext_decl .

    TYPEDEF         reduce using rule 2 (program -> program ext_decl .)
    EXTERN          reduce using rule 2 (program -> program ext_decl .)
    STATIC          reduce using rule 2 (program -> program ext_decl .)
    AUTO            reduce using rule 2 (program -> program ext_decl .)
    REGISTER        reduce using rule 2 (program -> program ext_decl .)
    VOID            reduce using rule 2 (program -> program ext_decl .)
    CHAR            reduce using rule 2 (program -> program ext_decl .)
    SHORT           reduce using rule 2 (program -> program ext_decl .)
    INT             reduce using rule 2 (program -> program ext_decl .)
    LONG            reduce using rule 2 (program -> program ext_decl .)
    FLOAT           reduce using rule 2 (program -> program ext_decl .)
    DOUBLE          reduce using rule 2 (program -> program ext_decl .)
    SIGNED          reduce using rule 2 (program -> program ext_decl .)
    UNSIGNED        reduce using rule 2 (program -> program ext_decl .)
    BOOL            reduce using rule 2 (program -> program ext_decl .)
    CONST           reduce using rule 2 (program -> program ext_decl .)
    RESTRICT        reduce using rule 2 (program -> program ext_decl .)
    VOLATILE        reduce using rule 2 (program -> program ext_decl .)
    INLINE          reduce using rule 2 (program -> program ext_decl .)
    ENUM            reduce using rule 2 (program -> program ext_decl .)
    STRUCT          reduce using rule 2 (program -> program ext_decl .)
    UNION           reduce using rule 2 (program -> program ext_decl .)
    $end            reduce using rule 2 (program -> program ext_decl .)


state 36

    (199) func_def -> decl_specs declr . decl_list comp_stmt
    (200) func_def -> decl_specs declr . comp_stmt
    (9) init_decl -> declr .
    (10) init_decl -> declr . = init
    (201) decl_list -> . decl
    (202) decl_list -> . decl_list decl
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 9 (init_decl -> declr .)
    ,               reduce using rule 9 (init_decl -> declr .)
    =               shift and go to state 56
    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    decl_specs                     shift and go to state 53
    decl_list                      shift and go to state 54
    comp_stmt                      shift and go to state 55
    decl                           shift and go to state 57
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 37

    (5) decl -> decl_specs ; .

    TYPEDEF         reduce using rule 5 (decl -> decl_specs ; .)
    EXTERN          reduce using rule 5 (decl -> decl_specs ; .)
    STATIC          reduce using rule 5 (decl -> decl_specs ; .)
    AUTO            reduce using rule 5 (decl -> decl_specs ; .)
    REGISTER        reduce using rule 5 (decl -> decl_specs ; .)
    VOID            reduce using rule 5 (decl -> decl_specs ; .)
    CHAR            reduce using rule 5 (decl -> decl_specs ; .)
    SHORT           reduce using rule 5 (decl -> decl_specs ; .)
    INT             reduce using rule 5 (decl -> decl_specs ; .)
    LONG            reduce using rule 5 (decl -> decl_specs ; .)
    FLOAT           reduce using rule 5 (decl -> decl_specs ; .)
    DOUBLE          reduce using rule 5 (decl -> decl_specs ; .)
    SIGNED          reduce using rule 5 (decl -> decl_specs ; .)
    UNSIGNED        reduce using rule 5 (decl -> decl_specs ; .)
    BOOL            reduce using rule 5 (decl -> decl_specs ; .)
    CONST           reduce using rule 5 (decl -> decl_specs ; .)
    RESTRICT        reduce using rule 5 (decl -> decl_specs ; .)
    VOLATILE        reduce using rule 5 (decl -> decl_specs ; .)
    INLINE          reduce using rule 5 (decl -> decl_specs ; .)
    ENUM            reduce using rule 5 (decl -> decl_specs ; .)
    STRUCT          reduce using rule 5 (decl -> decl_specs ; .)
    UNION           reduce using rule 5 (decl -> decl_specs ; .)
    $end            reduce using rule 5 (decl -> decl_specs ; .)
    {               reduce using rule 5 (decl -> decl_specs ; .)
    }               reduce using rule 5 (decl -> decl_specs ; .)
    IDENTIFIER      reduce using rule 5 (decl -> decl_specs ; .)
    CASE            reduce using rule 5 (decl -> decl_specs ; .)
    DEFAULT         reduce using rule 5 (decl -> decl_specs ; .)
    ;               reduce using rule 5 (decl -> decl_specs ; .)
    IF              reduce using rule 5 (decl -> decl_specs ; .)
    SWITCH          reduce using rule 5 (decl -> decl_specs ; .)
    WHILE           reduce using rule 5 (decl -> decl_specs ; .)
    DO              reduce using rule 5 (decl -> decl_specs ; .)
    FOR             reduce using rule 5 (decl -> decl_specs ; .)
    GOTO            reduce using rule 5 (decl -> decl_specs ; .)
    CONTINUE        reduce using rule 5 (decl -> decl_specs ; .)
    BREAK           reduce using rule 5 (decl -> decl_specs ; .)
    RETURN          reduce using rule 5 (decl -> decl_specs ; .)
    INC_OP          reduce using rule 5 (decl -> decl_specs ; .)
    DEC_OP          reduce using rule 5 (decl -> decl_specs ; .)
    SIZEOF          reduce using rule 5 (decl -> decl_specs ; .)
    (               reduce using rule 5 (decl -> decl_specs ; .)
    &               reduce using rule 5 (decl -> decl_specs ; .)
    *               reduce using rule 5 (decl -> decl_specs ; .)
    +               reduce using rule 5 (decl -> decl_specs ; .)
    -               reduce using rule 5 (decl -> decl_specs ; .)
    ~               reduce using rule 5 (decl -> decl_specs ; .)
    !               reduce using rule 5 (decl -> decl_specs ; .)
    CONSTANT        reduce using rule 5 (decl -> decl_specs ; .)
    STRING_LITERAL  reduce using rule 5 (decl -> decl_specs ; .)


state 38

    (6) decl -> decl_specs init_decl_list . ;
    (8) init_decl_list -> init_decl_list . , init_decl

    ;               shift and go to state 59
    ,               shift and go to state 60


state 39

    (66) declr -> ptr . direct_declr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )

    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    direct_declr                   shift and go to state 61

state 40

    (67) declr -> direct_declr .
    (76) direct_declr -> direct_declr . [ type_qual_list assign_expr ]
    (77) direct_declr -> direct_declr . [ type_qual_list ]
    (78) direct_declr -> direct_declr . [ assign_expr ]
    (79) direct_declr -> direct_declr . [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> direct_declr . [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> direct_declr . [ type_qual_list * ]
    (82) direct_declr -> direct_declr . [ * ]
    (83) direct_declr -> direct_declr . [ ]
    (84) direct_declr -> direct_declr . ( param_type_list )
    (85) direct_declr -> direct_declr . ( id_list )
    (86) direct_declr -> direct_declr . ( )

    =               reduce using rule 67 (declr -> direct_declr .)
    {               reduce using rule 67 (declr -> direct_declr .)
    TYPEDEF         reduce using rule 67 (declr -> direct_declr .)
    EXTERN          reduce using rule 67 (declr -> direct_declr .)
    STATIC          reduce using rule 67 (declr -> direct_declr .)
    AUTO            reduce using rule 67 (declr -> direct_declr .)
    REGISTER        reduce using rule 67 (declr -> direct_declr .)
    VOID            reduce using rule 67 (declr -> direct_declr .)
    CHAR            reduce using rule 67 (declr -> direct_declr .)
    SHORT           reduce using rule 67 (declr -> direct_declr .)
    INT             reduce using rule 67 (declr -> direct_declr .)
    LONG            reduce using rule 67 (declr -> direct_declr .)
    FLOAT           reduce using rule 67 (declr -> direct_declr .)
    DOUBLE          reduce using rule 67 (declr -> direct_declr .)
    SIGNED          reduce using rule 67 (declr -> direct_declr .)
    UNSIGNED        reduce using rule 67 (declr -> direct_declr .)
    BOOL            reduce using rule 67 (declr -> direct_declr .)
    CONST           reduce using rule 67 (declr -> direct_declr .)
    RESTRICT        reduce using rule 67 (declr -> direct_declr .)
    VOLATILE        reduce using rule 67 (declr -> direct_declr .)
    INLINE          reduce using rule 67 (declr -> direct_declr .)
    ENUM            reduce using rule 67 (declr -> direct_declr .)
    STRUCT          reduce using rule 67 (declr -> direct_declr .)
    UNION           reduce using rule 67 (declr -> direct_declr .)
    ;               reduce using rule 67 (declr -> direct_declr .)
    ,               reduce using rule 67 (declr -> direct_declr .)
    )               reduce using rule 67 (declr -> direct_declr .)
    :               reduce using rule 67 (declr -> direct_declr .)
    [               shift and go to state 62
    (               shift and go to state 63


state 41

    (7) init_decl_list -> init_decl .

    ;               reduce using rule 7 (init_decl_list -> init_decl .)
    ,               reduce using rule 7 (init_decl_list -> init_decl .)


state 42

    (68) ptr -> * .
    (69) ptr -> * . type_qual_list
    (70) ptr -> * . ptr
    (71) ptr -> * . type_qual_list ptr
    (72) type_qual_list -> . type_qual
    (73) type_qual_list -> . type_qual_list type_qual
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE

    IDENTIFIER      reduce using rule 68 (ptr -> * .)
    (               reduce using rule 68 (ptr -> * .)
    [               reduce using rule 68 (ptr -> * .)
    ,               reduce using rule 68 (ptr -> * .)
    )               reduce using rule 68 (ptr -> * .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qual_list                 shift and go to state 64
    ptr                            shift and go to state 65
    type_qual                      shift and go to state 66

state 43

    (74) direct_declr -> IDENTIFIER .

    [               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    (               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    =               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    {               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    TYPEDEF         reduce using rule 74 (direct_declr -> IDENTIFIER .)
    EXTERN          reduce using rule 74 (direct_declr -> IDENTIFIER .)
    STATIC          reduce using rule 74 (direct_declr -> IDENTIFIER .)
    AUTO            reduce using rule 74 (direct_declr -> IDENTIFIER .)
    REGISTER        reduce using rule 74 (direct_declr -> IDENTIFIER .)
    VOID            reduce using rule 74 (direct_declr -> IDENTIFIER .)
    CHAR            reduce using rule 74 (direct_declr -> IDENTIFIER .)
    SHORT           reduce using rule 74 (direct_declr -> IDENTIFIER .)
    INT             reduce using rule 74 (direct_declr -> IDENTIFIER .)
    LONG            reduce using rule 74 (direct_declr -> IDENTIFIER .)
    FLOAT           reduce using rule 74 (direct_declr -> IDENTIFIER .)
    DOUBLE          reduce using rule 74 (direct_declr -> IDENTIFIER .)
    SIGNED          reduce using rule 74 (direct_declr -> IDENTIFIER .)
    UNSIGNED        reduce using rule 74 (direct_declr -> IDENTIFIER .)
    BOOL            reduce using rule 74 (direct_declr -> IDENTIFIER .)
    CONST           reduce using rule 74 (direct_declr -> IDENTIFIER .)
    RESTRICT        reduce using rule 74 (direct_declr -> IDENTIFIER .)
    VOLATILE        reduce using rule 74 (direct_declr -> IDENTIFIER .)
    INLINE          reduce using rule 74 (direct_declr -> IDENTIFIER .)
    ENUM            reduce using rule 74 (direct_declr -> IDENTIFIER .)
    STRUCT          reduce using rule 74 (direct_declr -> IDENTIFIER .)
    UNION           reduce using rule 74 (direct_declr -> IDENTIFIER .)
    ;               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    ,               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    )               reduce using rule 74 (direct_declr -> IDENTIFIER .)
    :               reduce using rule 74 (direct_declr -> IDENTIFIER .)


state 44

    (75) direct_declr -> ( . declr )
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declr                          shift and go to state 67
    ptr                            shift and go to state 39
    direct_declr                   shift and go to state 40

state 45

    (12) decl_specs -> stor_class_spec decl_specs .

    ;               reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)
    *               reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)
    IDENTIFIER      reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)
    (               reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)
    [               reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)
    ,               reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)
    )               reduce using rule 12 (decl_specs -> stor_class_spec decl_specs .)


state 46

    (14) decl_specs -> type_spec decl_specs .

    ;               reduce using rule 14 (decl_specs -> type_spec decl_specs .)
    *               reduce using rule 14 (decl_specs -> type_spec decl_specs .)
    IDENTIFIER      reduce using rule 14 (decl_specs -> type_spec decl_specs .)
    (               reduce using rule 14 (decl_specs -> type_spec decl_specs .)
    [               reduce using rule 14 (decl_specs -> type_spec decl_specs .)
    ,               reduce using rule 14 (decl_specs -> type_spec decl_specs .)
    )               reduce using rule 14 (decl_specs -> type_spec decl_specs .)


state 47

    (16) decl_specs -> type_qual decl_specs .

    ;               reduce using rule 16 (decl_specs -> type_qual decl_specs .)
    *               reduce using rule 16 (decl_specs -> type_qual decl_specs .)
    IDENTIFIER      reduce using rule 16 (decl_specs -> type_qual decl_specs .)
    (               reduce using rule 16 (decl_specs -> type_qual decl_specs .)
    [               reduce using rule 16 (decl_specs -> type_qual decl_specs .)
    ,               reduce using rule 16 (decl_specs -> type_qual decl_specs .)
    )               reduce using rule 16 (decl_specs -> type_qual decl_specs .)


state 48

    (18) decl_specs -> func_spec decl_specs .

    ;               reduce using rule 18 (decl_specs -> func_spec decl_specs .)
    *               reduce using rule 18 (decl_specs -> func_spec decl_specs .)
    IDENTIFIER      reduce using rule 18 (decl_specs -> func_spec decl_specs .)
    (               reduce using rule 18 (decl_specs -> func_spec decl_specs .)
    [               reduce using rule 18 (decl_specs -> func_spec decl_specs .)
    ,               reduce using rule 18 (decl_specs -> func_spec decl_specs .)
    )               reduce using rule 18 (decl_specs -> func_spec decl_specs .)


state 49

    (49) struct_or_union_spec -> struct_or_union IDENTIFIER . { struct_decl_list }
    (51) struct_or_union_spec -> struct_or_union IDENTIFIER .

    {               shift and go to state 68
    TYPEDEF         reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    ;               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    *               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    (               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    [               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    ,               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    )               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)
    :               reduce using rule 51 (struct_or_union_spec -> struct_or_union IDENTIFIER .)


state 50

    (50) struct_or_union_spec -> struct_or_union { . struct_decl_list }
    (54) struct_decl_list -> . struct_decl
    (55) struct_decl_list -> . struct_decl_list struct_decl
    (56) struct_decl -> . spec_qual_list struct_declr_list ;
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_decl_list               shift and go to state 69
    struct_decl                    shift and go to state 70
    spec_qual_list                 shift and go to state 71
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26

state 51

    (40) enum_spec -> ENUM { . enum_list }
    (42) enum_spec -> ENUM { . enum_list , }
    (45) enum_list -> . enum
    (46) enum_list -> . enum_list , enum
    (47) enum -> . IDENTIFIER
    (48) enum -> . IDENTIFIER = const_expr

    IDENTIFIER      shift and go to state 76

    enum_list                      shift and go to state 74
    enum                           shift and go to state 75

state 52

    (41) enum_spec -> ENUM IDENTIFIER . { enum_list }
    (43) enum_spec -> ENUM IDENTIFIER . { enum_list , }
    (44) enum_spec -> ENUM IDENTIFIER .

    {               shift and go to state 77
    TYPEDEF         reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    VOID            reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    INT             reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    LONG            reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    CONST           reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    UNION           reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    ;               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    *               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    (               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    [               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    ,               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    )               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)
    :               reduce using rule 44 (enum_spec -> ENUM IDENTIFIER .)


state 53

    (5) decl -> decl_specs . ;
    (6) decl -> decl_specs . init_decl_list ;
    (7) init_decl_list -> . init_decl
    (8) init_decl_list -> . init_decl_list , init_decl
    (9) init_decl -> . declr
    (10) init_decl -> . declr = init
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_decl_list                 shift and go to state 38
    init_decl                      shift and go to state 41
    declr                          shift and go to state 78
    ptr                            shift and go to state 39
    direct_declr                   shift and go to state 40

state 54

    (199) func_def -> decl_specs declr decl_list . comp_stmt
    (202) decl_list -> decl_list . decl
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    decl_specs                     shift and go to state 53
    comp_stmt                      shift and go to state 79
    decl                           shift and go to state 80
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 55

    (200) func_def -> decl_specs declr comp_stmt .

    TYPEDEF         reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    EXTERN          reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    STATIC          reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    AUTO            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    REGISTER        reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    VOID            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    CHAR            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    SHORT           reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    INT             reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    LONG            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    FLOAT           reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    DOUBLE          reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    SIGNED          reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    UNSIGNED        reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    BOOL            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    CONST           reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    RESTRICT        reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    VOLATILE        reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    INLINE          reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    ENUM            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    STRUCT          reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    UNION           reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)
    $end            reduce using rule 200 (func_def -> decl_specs declr comp_stmt .)


state 56

    (10) init_decl -> declr = . init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init                           shift and go to state 81
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 57

    (201) decl_list -> decl .

    {               reduce using rule 201 (decl_list -> decl .)
    TYPEDEF         reduce using rule 201 (decl_list -> decl .)
    EXTERN          reduce using rule 201 (decl_list -> decl .)
    STATIC          reduce using rule 201 (decl_list -> decl .)
    AUTO            reduce using rule 201 (decl_list -> decl .)
    REGISTER        reduce using rule 201 (decl_list -> decl .)
    VOID            reduce using rule 201 (decl_list -> decl .)
    CHAR            reduce using rule 201 (decl_list -> decl .)
    SHORT           reduce using rule 201 (decl_list -> decl .)
    INT             reduce using rule 201 (decl_list -> decl .)
    LONG            reduce using rule 201 (decl_list -> decl .)
    FLOAT           reduce using rule 201 (decl_list -> decl .)
    DOUBLE          reduce using rule 201 (decl_list -> decl .)
    SIGNED          reduce using rule 201 (decl_list -> decl .)
    UNSIGNED        reduce using rule 201 (decl_list -> decl .)
    BOOL            reduce using rule 201 (decl_list -> decl .)
    CONST           reduce using rule 201 (decl_list -> decl .)
    RESTRICT        reduce using rule 201 (decl_list -> decl .)
    VOLATILE        reduce using rule 201 (decl_list -> decl .)
    INLINE          reduce using rule 201 (decl_list -> decl .)
    ENUM            reduce using rule 201 (decl_list -> decl .)
    STRUCT          reduce using rule 201 (decl_list -> decl .)
    UNION           reduce using rule 201 (decl_list -> decl .)


state 58

    (203) comp_stmt -> { . }
    (204) comp_stmt -> { . block_item_list }
    (205) block_item_list -> . block_item
    (206) block_item_list -> . block_item_list block_item
    (207) block_item -> . decl
    (208) block_item -> . stmt
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    }               shift and go to state 113
    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    block_item_list                shift and go to state 114
    block_item                     shift and go to state 115
    decl                           shift and go to state 116
    stmt                           shift and go to state 117
    decl_specs                     shift and go to state 53
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    expr                           shift and go to state 128
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    assign_expr                    shift and go to state 138
    struct_or_union                shift and go to state 31
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 59

    (6) decl -> decl_specs init_decl_list ; .

    TYPEDEF         reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    EXTERN          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    STATIC          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    AUTO            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    REGISTER        reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    VOID            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    CHAR            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    SHORT           reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    INT             reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    LONG            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    FLOAT           reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    DOUBLE          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    SIGNED          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    UNSIGNED        reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    BOOL            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    CONST           reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    RESTRICT        reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    VOLATILE        reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    INLINE          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    ENUM            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    STRUCT          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    UNION           reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    $end            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    {               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    }               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    IDENTIFIER      reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    CASE            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    DEFAULT         reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    ;               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    IF              reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    SWITCH          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    WHILE           reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    DO              reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    FOR             reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    GOTO            reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    CONTINUE        reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    BREAK           reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    RETURN          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    INC_OP          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    DEC_OP          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    SIZEOF          reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    (               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    &               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    *               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    +               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    -               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    ~               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    !               reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    CONSTANT        reduce using rule 6 (decl -> decl_specs init_decl_list ; .)
    STRING_LITERAL  reduce using rule 6 (decl -> decl_specs init_decl_list ; .)


state 60

    (8) init_decl_list -> init_decl_list , . init_decl
    (9) init_decl -> . declr
    (10) init_decl -> . declr = init
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_decl                      shift and go to state 139
    declr                          shift and go to state 78
    ptr                            shift and go to state 39
    direct_declr                   shift and go to state 40

state 61

    (66) declr -> ptr direct_declr .
    (76) direct_declr -> direct_declr . [ type_qual_list assign_expr ]
    (77) direct_declr -> direct_declr . [ type_qual_list ]
    (78) direct_declr -> direct_declr . [ assign_expr ]
    (79) direct_declr -> direct_declr . [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> direct_declr . [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> direct_declr . [ type_qual_list * ]
    (82) direct_declr -> direct_declr . [ * ]
    (83) direct_declr -> direct_declr . [ ]
    (84) direct_declr -> direct_declr . ( param_type_list )
    (85) direct_declr -> direct_declr . ( id_list )
    (86) direct_declr -> direct_declr . ( )

    =               reduce using rule 66 (declr -> ptr direct_declr .)
    {               reduce using rule 66 (declr -> ptr direct_declr .)
    TYPEDEF         reduce using rule 66 (declr -> ptr direct_declr .)
    EXTERN          reduce using rule 66 (declr -> ptr direct_declr .)
    STATIC          reduce using rule 66 (declr -> ptr direct_declr .)
    AUTO            reduce using rule 66 (declr -> ptr direct_declr .)
    REGISTER        reduce using rule 66 (declr -> ptr direct_declr .)
    VOID            reduce using rule 66 (declr -> ptr direct_declr .)
    CHAR            reduce using rule 66 (declr -> ptr direct_declr .)
    SHORT           reduce using rule 66 (declr -> ptr direct_declr .)
    INT             reduce using rule 66 (declr -> ptr direct_declr .)
    LONG            reduce using rule 66 (declr -> ptr direct_declr .)
    FLOAT           reduce using rule 66 (declr -> ptr direct_declr .)
    DOUBLE          reduce using rule 66 (declr -> ptr direct_declr .)
    SIGNED          reduce using rule 66 (declr -> ptr direct_declr .)
    UNSIGNED        reduce using rule 66 (declr -> ptr direct_declr .)
    BOOL            reduce using rule 66 (declr -> ptr direct_declr .)
    CONST           reduce using rule 66 (declr -> ptr direct_declr .)
    RESTRICT        reduce using rule 66 (declr -> ptr direct_declr .)
    VOLATILE        reduce using rule 66 (declr -> ptr direct_declr .)
    INLINE          reduce using rule 66 (declr -> ptr direct_declr .)
    ENUM            reduce using rule 66 (declr -> ptr direct_declr .)
    STRUCT          reduce using rule 66 (declr -> ptr direct_declr .)
    UNION           reduce using rule 66 (declr -> ptr direct_declr .)
    ;               reduce using rule 66 (declr -> ptr direct_declr .)
    ,               reduce using rule 66 (declr -> ptr direct_declr .)
    )               reduce using rule 66 (declr -> ptr direct_declr .)
    :               reduce using rule 66 (declr -> ptr direct_declr .)
    [               shift and go to state 62
    (               shift and go to state 63


state 62

    (76) direct_declr -> direct_declr [ . type_qual_list assign_expr ]
    (77) direct_declr -> direct_declr [ . type_qual_list ]
    (78) direct_declr -> direct_declr [ . assign_expr ]
    (79) direct_declr -> direct_declr [ . STATIC type_qual_list assign_expr ]
    (80) direct_declr -> direct_declr [ . type_qual_list STATIC assign_expr ]
    (81) direct_declr -> direct_declr [ . type_qual_list * ]
    (82) direct_declr -> direct_declr [ . * ]
    (83) direct_declr -> direct_declr [ . ]
    (72) type_qual_list -> . type_qual
    (73) type_qual_list -> . type_qual_list type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    STATIC          shift and go to state 143
    *               shift and go to state 144
    ]               shift and go to state 142
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_qual_list                 shift and go to state 140
    assign_expr                    shift and go to state 141
    type_qual                      shift and go to state 66
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 63

    (84) direct_declr -> direct_declr ( . param_type_list )
    (85) direct_declr -> direct_declr ( . id_list )
    (86) direct_declr -> direct_declr ( . )
    (179) param_type_list -> . param_list
    (180) param_type_list -> . param_list , ELLIPSIS
    (87) id_list -> . IDENTIFIER
    (88) id_list -> . id_list , IDENTIFIER
    (181) param_list -> . param_decl
    (182) param_list -> . param_list , param_decl
    (183) param_decl -> . decl_specs declr
    (184) param_decl -> . decl_specs abs_declr
    (185) param_decl -> . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 146
    IDENTIFIER      shift and go to state 149
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    param_type_list                shift and go to state 145
    id_list                        shift and go to state 147
    param_list                     shift and go to state 148
    param_decl                     shift and go to state 150
    decl_specs                     shift and go to state 151
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 64

    (69) ptr -> * type_qual_list .
    (71) ptr -> * type_qual_list . ptr
    (73) type_qual_list -> type_qual_list . type_qual
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE

    IDENTIFIER      reduce using rule 69 (ptr -> * type_qual_list .)
    (               reduce using rule 69 (ptr -> * type_qual_list .)
    [               reduce using rule 69 (ptr -> * type_qual_list .)
    ,               reduce using rule 69 (ptr -> * type_qual_list .)
    )               reduce using rule 69 (ptr -> * type_qual_list .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    ptr                            shift and go to state 152
    type_qual                      shift and go to state 153

state 65

    (70) ptr -> * ptr .

    IDENTIFIER      reduce using rule 70 (ptr -> * ptr .)
    (               reduce using rule 70 (ptr -> * ptr .)
    [               reduce using rule 70 (ptr -> * ptr .)
    ,               reduce using rule 70 (ptr -> * ptr .)
    )               reduce using rule 70 (ptr -> * ptr .)


state 66

    (72) type_qual_list -> type_qual .

    *               reduce using rule 72 (type_qual_list -> type_qual .)
    CONST           reduce using rule 72 (type_qual_list -> type_qual .)
    RESTRICT        reduce using rule 72 (type_qual_list -> type_qual .)
    VOLATILE        reduce using rule 72 (type_qual_list -> type_qual .)
    IDENTIFIER      reduce using rule 72 (type_qual_list -> type_qual .)
    (               reduce using rule 72 (type_qual_list -> type_qual .)
    [               reduce using rule 72 (type_qual_list -> type_qual .)
    ,               reduce using rule 72 (type_qual_list -> type_qual .)
    )               reduce using rule 72 (type_qual_list -> type_qual .)
    ]               reduce using rule 72 (type_qual_list -> type_qual .)
    STATIC          reduce using rule 72 (type_qual_list -> type_qual .)
    INC_OP          reduce using rule 72 (type_qual_list -> type_qual .)
    DEC_OP          reduce using rule 72 (type_qual_list -> type_qual .)
    SIZEOF          reduce using rule 72 (type_qual_list -> type_qual .)
    &               reduce using rule 72 (type_qual_list -> type_qual .)
    +               reduce using rule 72 (type_qual_list -> type_qual .)
    -               reduce using rule 72 (type_qual_list -> type_qual .)
    ~               reduce using rule 72 (type_qual_list -> type_qual .)
    !               reduce using rule 72 (type_qual_list -> type_qual .)
    CONSTANT        reduce using rule 72 (type_qual_list -> type_qual .)
    STRING_LITERAL  reduce using rule 72 (type_qual_list -> type_qual .)


state 67

    (75) direct_declr -> ( declr . )

    )               shift and go to state 154


state 68

    (49) struct_or_union_spec -> struct_or_union IDENTIFIER { . struct_decl_list }
    (54) struct_decl_list -> . struct_decl
    (55) struct_decl_list -> . struct_decl_list struct_decl
    (56) struct_decl -> . spec_qual_list struct_declr_list ;
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_decl_list               shift and go to state 155
    struct_decl                    shift and go to state 70
    spec_qual_list                 shift and go to state 71
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26

state 69

    (50) struct_or_union_spec -> struct_or_union { struct_decl_list . }
    (55) struct_decl_list -> struct_decl_list . struct_decl
    (56) struct_decl -> . spec_qual_list struct_declr_list ;
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    }               shift and go to state 156
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_decl                    shift and go to state 157
    spec_qual_list                 shift and go to state 71
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26

state 70

    (54) struct_decl_list -> struct_decl .

    }               reduce using rule 54 (struct_decl_list -> struct_decl .)
    VOID            reduce using rule 54 (struct_decl_list -> struct_decl .)
    CHAR            reduce using rule 54 (struct_decl_list -> struct_decl .)
    SHORT           reduce using rule 54 (struct_decl_list -> struct_decl .)
    INT             reduce using rule 54 (struct_decl_list -> struct_decl .)
    LONG            reduce using rule 54 (struct_decl_list -> struct_decl .)
    FLOAT           reduce using rule 54 (struct_decl_list -> struct_decl .)
    DOUBLE          reduce using rule 54 (struct_decl_list -> struct_decl .)
    SIGNED          reduce using rule 54 (struct_decl_list -> struct_decl .)
    UNSIGNED        reduce using rule 54 (struct_decl_list -> struct_decl .)
    BOOL            reduce using rule 54 (struct_decl_list -> struct_decl .)
    CONST           reduce using rule 54 (struct_decl_list -> struct_decl .)
    RESTRICT        reduce using rule 54 (struct_decl_list -> struct_decl .)
    VOLATILE        reduce using rule 54 (struct_decl_list -> struct_decl .)
    ENUM            reduce using rule 54 (struct_decl_list -> struct_decl .)
    STRUCT          reduce using rule 54 (struct_decl_list -> struct_decl .)
    UNION           reduce using rule 54 (struct_decl_list -> struct_decl .)


state 71

    (56) struct_decl -> spec_qual_list . struct_declr_list ;
    (61) struct_declr_list -> . struct_declr
    (62) struct_declr_list -> . struct_declr_list , struct_declr
    (63) struct_declr -> . declr
    (64) struct_declr -> . : const_expr
    (65) struct_declr -> . declr : const_expr
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )

    :               shift and go to state 161
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declr_list              shift and go to state 158
    struct_declr                   shift and go to state 159
    declr                          shift and go to state 160
    ptr                            shift and go to state 39
    direct_declr                   shift and go to state 40

state 72

    (57) spec_qual_list -> type_spec . spec_qual_list
    (58) spec_qual_list -> type_spec .
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    :               reduce using rule 58 (spec_qual_list -> type_spec .)
    *               reduce using rule 58 (spec_qual_list -> type_spec .)
    IDENTIFIER      reduce using rule 58 (spec_qual_list -> type_spec .)
    (               reduce using rule 58 (spec_qual_list -> type_spec .)
    [               reduce using rule 58 (spec_qual_list -> type_spec .)
    )               reduce using rule 58 (spec_qual_list -> type_spec .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_spec                      shift and go to state 72
    spec_qual_list                 shift and go to state 162
    type_qual                      shift and go to state 73
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 73

    (59) spec_qual_list -> type_qual . spec_qual_list
    (60) spec_qual_list -> type_qual .
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    :               reduce using rule 60 (spec_qual_list -> type_qual .)
    *               reduce using rule 60 (spec_qual_list -> type_qual .)
    IDENTIFIER      reduce using rule 60 (spec_qual_list -> type_qual .)
    (               reduce using rule 60 (spec_qual_list -> type_qual .)
    [               reduce using rule 60 (spec_qual_list -> type_qual .)
    )               reduce using rule 60 (spec_qual_list -> type_qual .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qual                      shift and go to state 73
    spec_qual_list                 shift and go to state 163
    type_spec                      shift and go to state 72
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 74

    (40) enum_spec -> ENUM { enum_list . }
    (42) enum_spec -> ENUM { enum_list . , }
    (46) enum_list -> enum_list . , enum

    }               shift and go to state 164
    ,               shift and go to state 165


state 75

    (45) enum_list -> enum .

    }               reduce using rule 45 (enum_list -> enum .)
    ,               reduce using rule 45 (enum_list -> enum .)


state 76

    (47) enum -> IDENTIFIER .
    (48) enum -> IDENTIFIER . = const_expr

    }               reduce using rule 47 (enum -> IDENTIFIER .)
    ,               reduce using rule 47 (enum -> IDENTIFIER .)
    =               shift and go to state 166


state 77

    (41) enum_spec -> ENUM IDENTIFIER { . enum_list }
    (43) enum_spec -> ENUM IDENTIFIER { . enum_list , }
    (45) enum_list -> . enum
    (46) enum_list -> . enum_list , enum
    (47) enum -> . IDENTIFIER
    (48) enum -> . IDENTIFIER = const_expr

    IDENTIFIER      shift and go to state 76

    enum_list                      shift and go to state 167
    enum                           shift and go to state 75

state 78

    (9) init_decl -> declr .
    (10) init_decl -> declr . = init

    ;               reduce using rule 9 (init_decl -> declr .)
    ,               reduce using rule 9 (init_decl -> declr .)
    =               shift and go to state 56


state 79

    (199) func_def -> decl_specs declr decl_list comp_stmt .

    TYPEDEF         reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    EXTERN          reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    STATIC          reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    AUTO            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    REGISTER        reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    VOID            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    CHAR            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    SHORT           reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    INT             reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    LONG            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    FLOAT           reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    DOUBLE          reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    SIGNED          reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    UNSIGNED        reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    BOOL            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    CONST           reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    RESTRICT        reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    VOLATILE        reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    INLINE          reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    ENUM            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    STRUCT          reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    UNION           reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)
    $end            reduce using rule 199 (func_def -> decl_specs declr decl_list comp_stmt .)


state 80

    (202) decl_list -> decl_list decl .

    {               reduce using rule 202 (decl_list -> decl_list decl .)
    TYPEDEF         reduce using rule 202 (decl_list -> decl_list decl .)
    EXTERN          reduce using rule 202 (decl_list -> decl_list decl .)
    STATIC          reduce using rule 202 (decl_list -> decl_list decl .)
    AUTO            reduce using rule 202 (decl_list -> decl_list decl .)
    REGISTER        reduce using rule 202 (decl_list -> decl_list decl .)
    VOID            reduce using rule 202 (decl_list -> decl_list decl .)
    CHAR            reduce using rule 202 (decl_list -> decl_list decl .)
    SHORT           reduce using rule 202 (decl_list -> decl_list decl .)
    INT             reduce using rule 202 (decl_list -> decl_list decl .)
    LONG            reduce using rule 202 (decl_list -> decl_list decl .)
    FLOAT           reduce using rule 202 (decl_list -> decl_list decl .)
    DOUBLE          reduce using rule 202 (decl_list -> decl_list decl .)
    SIGNED          reduce using rule 202 (decl_list -> decl_list decl .)
    UNSIGNED        reduce using rule 202 (decl_list -> decl_list decl .)
    BOOL            reduce using rule 202 (decl_list -> decl_list decl .)
    CONST           reduce using rule 202 (decl_list -> decl_list decl .)
    RESTRICT        reduce using rule 202 (decl_list -> decl_list decl .)
    VOLATILE        reduce using rule 202 (decl_list -> decl_list decl .)
    INLINE          reduce using rule 202 (decl_list -> decl_list decl .)
    ENUM            reduce using rule 202 (decl_list -> decl_list decl .)
    STRUCT          reduce using rule 202 (decl_list -> decl_list decl .)
    UNION           reduce using rule 202 (decl_list -> decl_list decl .)


state 81

    (10) init_decl -> declr = init .

    ;               reduce using rule 10 (init_decl -> declr = init .)
    ,               reduce using rule 10 (init_decl -> declr = init .)


state 82

    (192) init -> assign_expr .

    ;               reduce using rule 192 (init -> assign_expr .)
    ,               reduce using rule 192 (init -> assign_expr .)
    }               reduce using rule 192 (init -> assign_expr .)


state 83

    (193) init -> { . init_list }
    (194) init -> { . init_list , }
    (188) init_list -> . init
    (189) init_list -> . desig init
    (190) init_list -> . init_list , init
    (191) init_list -> . init_list , desig init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (197) desig -> . [ const_expr ]
    (198) desig -> . . IDENTIFIER
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    {               shift and go to state 83
    [               shift and go to state 171
    .               shift and go to state 172
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init_list                      shift and go to state 168
    init                           shift and go to state 169
    desig                          shift and go to state 170
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 84

    (89) assign_expr -> cond_expr .

    ;               reduce using rule 89 (assign_expr -> cond_expr .)
    ,               reduce using rule 89 (assign_expr -> cond_expr .)
    ]               reduce using rule 89 (assign_expr -> cond_expr .)
    }               reduce using rule 89 (assign_expr -> cond_expr .)
    )               reduce using rule 89 (assign_expr -> cond_expr .)
    :               reduce using rule 89 (assign_expr -> cond_expr .)


state 85

    (90) assign_expr -> unary_expr . assign_op assign_expr
    (133) cast_expr -> unary_expr .
    (91) assign_op -> . =
    (92) assign_op -> . MUL_ASSIGN
    (93) assign_op -> . DIV_ASSIGN
    (94) assign_op -> . MOD_ASSIGN
    (95) assign_op -> . ADD_ASSIGN
    (96) assign_op -> . SUB_ASSIGN
    (97) assign_op -> . LEFT_ASSIGN
    (98) assign_op -> . RIGHT_ASSIGN
    (99) assign_op -> . AND_ASSIGN
    (100) assign_op -> . XOR_ASSIGN
    (101) assign_op -> . OR_ASSIGN

    *               reduce using rule 133 (cast_expr -> unary_expr .)
    /               reduce using rule 133 (cast_expr -> unary_expr .)
    %               reduce using rule 133 (cast_expr -> unary_expr .)
    +               reduce using rule 133 (cast_expr -> unary_expr .)
    -               reduce using rule 133 (cast_expr -> unary_expr .)
    LEFT_OP         reduce using rule 133 (cast_expr -> unary_expr .)
    RIGHT_OP        reduce using rule 133 (cast_expr -> unary_expr .)
    <               reduce using rule 133 (cast_expr -> unary_expr .)
    >               reduce using rule 133 (cast_expr -> unary_expr .)
    LE_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    GE_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    EQ_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    NE_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    &               reduce using rule 133 (cast_expr -> unary_expr .)
    ^               reduce using rule 133 (cast_expr -> unary_expr .)
    |               reduce using rule 133 (cast_expr -> unary_expr .)
    AND_OP          reduce using rule 133 (cast_expr -> unary_expr .)
    ?               reduce using rule 133 (cast_expr -> unary_expr .)
    OR_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    ;               reduce using rule 133 (cast_expr -> unary_expr .)
    ,               reduce using rule 133 (cast_expr -> unary_expr .)
    ]               reduce using rule 133 (cast_expr -> unary_expr .)
    }               reduce using rule 133 (cast_expr -> unary_expr .)
    )               reduce using rule 133 (cast_expr -> unary_expr .)
    :               reduce using rule 133 (cast_expr -> unary_expr .)
    =               shift and go to state 174
    MUL_ASSIGN      shift and go to state 175
    DIV_ASSIGN      shift and go to state 176
    MOD_ASSIGN      shift and go to state 177
    ADD_ASSIGN      shift and go to state 178
    SUB_ASSIGN      shift and go to state 179
    LEFT_ASSIGN     shift and go to state 180
    RIGHT_ASSIGN    shift and go to state 181
    AND_ASSIGN      shift and go to state 182
    XOR_ASSIGN      shift and go to state 183
    OR_ASSIGN       shift and go to state 184

    assign_op                      shift and go to state 173

state 86

    (103) cond_expr -> log_or_expr .
    (104) cond_expr -> log_or_expr . ? expr : cond_expr
    (106) log_or_expr -> log_or_expr . OR_OP log_and_expr

    ;               reduce using rule 103 (cond_expr -> log_or_expr .)
    ,               reduce using rule 103 (cond_expr -> log_or_expr .)
    ]               reduce using rule 103 (cond_expr -> log_or_expr .)
    }               reduce using rule 103 (cond_expr -> log_or_expr .)
    )               reduce using rule 103 (cond_expr -> log_or_expr .)
    :               reduce using rule 103 (cond_expr -> log_or_expr .)
    ?               shift and go to state 185
    OR_OP           shift and go to state 186


state 87

    (135) unary_expr -> post_expr .
    (148) post_expr -> post_expr . [ expr ]
    (149) post_expr -> post_expr . ( )
    (150) post_expr -> post_expr . ( arg_expr_list )
    (151) post_expr -> post_expr . . IDENTIFIER
    (152) post_expr -> post_expr . PTR_OP IDENTIFIER
    (153) post_expr -> post_expr . INC_OP
    (154) post_expr -> post_expr . DEC_OP

    =               reduce using rule 135 (unary_expr -> post_expr .)
    MUL_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    DIV_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    MOD_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    ADD_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    SUB_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    LEFT_ASSIGN     reduce using rule 135 (unary_expr -> post_expr .)
    RIGHT_ASSIGN    reduce using rule 135 (unary_expr -> post_expr .)
    AND_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    XOR_ASSIGN      reduce using rule 135 (unary_expr -> post_expr .)
    OR_ASSIGN       reduce using rule 135 (unary_expr -> post_expr .)
    *               reduce using rule 135 (unary_expr -> post_expr .)
    /               reduce using rule 135 (unary_expr -> post_expr .)
    %               reduce using rule 135 (unary_expr -> post_expr .)
    +               reduce using rule 135 (unary_expr -> post_expr .)
    -               reduce using rule 135 (unary_expr -> post_expr .)
    LEFT_OP         reduce using rule 135 (unary_expr -> post_expr .)
    RIGHT_OP        reduce using rule 135 (unary_expr -> post_expr .)
    <               reduce using rule 135 (unary_expr -> post_expr .)
    >               reduce using rule 135 (unary_expr -> post_expr .)
    LE_OP           reduce using rule 135 (unary_expr -> post_expr .)
    GE_OP           reduce using rule 135 (unary_expr -> post_expr .)
    EQ_OP           reduce using rule 135 (unary_expr -> post_expr .)
    NE_OP           reduce using rule 135 (unary_expr -> post_expr .)
    &               reduce using rule 135 (unary_expr -> post_expr .)
    ^               reduce using rule 135 (unary_expr -> post_expr .)
    |               reduce using rule 135 (unary_expr -> post_expr .)
    AND_OP          reduce using rule 135 (unary_expr -> post_expr .)
    ?               reduce using rule 135 (unary_expr -> post_expr .)
    OR_OP           reduce using rule 135 (unary_expr -> post_expr .)
    ;               reduce using rule 135 (unary_expr -> post_expr .)
    ,               reduce using rule 135 (unary_expr -> post_expr .)
    ]               reduce using rule 135 (unary_expr -> post_expr .)
    }               reduce using rule 135 (unary_expr -> post_expr .)
    )               reduce using rule 135 (unary_expr -> post_expr .)
    :               reduce using rule 135 (unary_expr -> post_expr .)
    [               shift and go to state 187
    (               shift and go to state 188
    .               shift and go to state 189
    PTR_OP          shift and go to state 190
    INC_OP          shift and go to state 191
    DEC_OP          shift and go to state 192


state 88

    (136) unary_expr -> INC_OP . unary_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 194
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expr                     shift and go to state 193
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 89

    (137) unary_expr -> DEC_OP . unary_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 194
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expr                     shift and go to state 195
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 90

    (138) unary_expr -> unary_op . cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 196
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    prim_expr                      shift and go to state 95

state 91

    (129) mult_expr -> cast_expr .

    *               reduce using rule 129 (mult_expr -> cast_expr .)
    /               reduce using rule 129 (mult_expr -> cast_expr .)
    %               reduce using rule 129 (mult_expr -> cast_expr .)
    +               reduce using rule 129 (mult_expr -> cast_expr .)
    -               reduce using rule 129 (mult_expr -> cast_expr .)
    LEFT_OP         reduce using rule 129 (mult_expr -> cast_expr .)
    RIGHT_OP        reduce using rule 129 (mult_expr -> cast_expr .)
    <               reduce using rule 129 (mult_expr -> cast_expr .)
    >               reduce using rule 129 (mult_expr -> cast_expr .)
    LE_OP           reduce using rule 129 (mult_expr -> cast_expr .)
    GE_OP           reduce using rule 129 (mult_expr -> cast_expr .)
    EQ_OP           reduce using rule 129 (mult_expr -> cast_expr .)
    NE_OP           reduce using rule 129 (mult_expr -> cast_expr .)
    &               reduce using rule 129 (mult_expr -> cast_expr .)
    ^               reduce using rule 129 (mult_expr -> cast_expr .)
    |               reduce using rule 129 (mult_expr -> cast_expr .)
    AND_OP          reduce using rule 129 (mult_expr -> cast_expr .)
    ?               reduce using rule 129 (mult_expr -> cast_expr .)
    OR_OP           reduce using rule 129 (mult_expr -> cast_expr .)
    ;               reduce using rule 129 (mult_expr -> cast_expr .)
    ,               reduce using rule 129 (mult_expr -> cast_expr .)
    ]               reduce using rule 129 (mult_expr -> cast_expr .)
    }               reduce using rule 129 (mult_expr -> cast_expr .)
    )               reduce using rule 129 (mult_expr -> cast_expr .)
    :               reduce using rule 129 (mult_expr -> cast_expr .)


state 92

    (139) unary_expr -> SIZEOF . unary_expr
    (140) unary_expr -> SIZEOF . ( type_name )
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expr                     shift and go to state 199
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 93

    (155) post_expr -> ( . type_name ) { init_list }
    (156) post_expr -> ( . type_name ) { init_list , }
    (160) prim_expr -> ( . expr )
    (134) cast_expr -> ( . type_name ) cast_expr
    (163) type_name -> . spec_qual_list
    (164) type_name -> . spec_qual_list abs_declr
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 201
    expr                           shift and go to state 202
    cast_expr                      shift and go to state 91
    spec_qual_list                 shift and go to state 203
    assign_expr                    shift and go to state 138
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    struct_or_union                shift and go to state 31
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 94

    (105) log_or_expr -> log_and_expr .
    (108) log_and_expr -> log_and_expr . AND_OP incl_or_expr

    ?               reduce using rule 105 (log_or_expr -> log_and_expr .)
    OR_OP           reduce using rule 105 (log_or_expr -> log_and_expr .)
    ;               reduce using rule 105 (log_or_expr -> log_and_expr .)
    ,               reduce using rule 105 (log_or_expr -> log_and_expr .)
    ]               reduce using rule 105 (log_or_expr -> log_and_expr .)
    }               reduce using rule 105 (log_or_expr -> log_and_expr .)
    )               reduce using rule 105 (log_or_expr -> log_and_expr .)
    :               reduce using rule 105 (log_or_expr -> log_and_expr .)
    AND_OP          shift and go to state 204


state 95

    (147) post_expr -> prim_expr .

    [               reduce using rule 147 (post_expr -> prim_expr .)
    (               reduce using rule 147 (post_expr -> prim_expr .)
    .               reduce using rule 147 (post_expr -> prim_expr .)
    PTR_OP          reduce using rule 147 (post_expr -> prim_expr .)
    INC_OP          reduce using rule 147 (post_expr -> prim_expr .)
    DEC_OP          reduce using rule 147 (post_expr -> prim_expr .)
    =               reduce using rule 147 (post_expr -> prim_expr .)
    MUL_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    DIV_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    MOD_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    ADD_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    SUB_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    LEFT_ASSIGN     reduce using rule 147 (post_expr -> prim_expr .)
    RIGHT_ASSIGN    reduce using rule 147 (post_expr -> prim_expr .)
    AND_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    XOR_ASSIGN      reduce using rule 147 (post_expr -> prim_expr .)
    OR_ASSIGN       reduce using rule 147 (post_expr -> prim_expr .)
    *               reduce using rule 147 (post_expr -> prim_expr .)
    /               reduce using rule 147 (post_expr -> prim_expr .)
    %               reduce using rule 147 (post_expr -> prim_expr .)
    +               reduce using rule 147 (post_expr -> prim_expr .)
    -               reduce using rule 147 (post_expr -> prim_expr .)
    LEFT_OP         reduce using rule 147 (post_expr -> prim_expr .)
    RIGHT_OP        reduce using rule 147 (post_expr -> prim_expr .)
    <               reduce using rule 147 (post_expr -> prim_expr .)
    >               reduce using rule 147 (post_expr -> prim_expr .)
    LE_OP           reduce using rule 147 (post_expr -> prim_expr .)
    GE_OP           reduce using rule 147 (post_expr -> prim_expr .)
    EQ_OP           reduce using rule 147 (post_expr -> prim_expr .)
    NE_OP           reduce using rule 147 (post_expr -> prim_expr .)
    &               reduce using rule 147 (post_expr -> prim_expr .)
    ^               reduce using rule 147 (post_expr -> prim_expr .)
    |               reduce using rule 147 (post_expr -> prim_expr .)
    AND_OP          reduce using rule 147 (post_expr -> prim_expr .)
    ?               reduce using rule 147 (post_expr -> prim_expr .)
    OR_OP           reduce using rule 147 (post_expr -> prim_expr .)
    ;               reduce using rule 147 (post_expr -> prim_expr .)
    ,               reduce using rule 147 (post_expr -> prim_expr .)
    ]               reduce using rule 147 (post_expr -> prim_expr .)
    }               reduce using rule 147 (post_expr -> prim_expr .)
    )               reduce using rule 147 (post_expr -> prim_expr .)
    :               reduce using rule 147 (post_expr -> prim_expr .)


state 96

    (157) prim_expr -> IDENTIFIER .

    [               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    (               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    .               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    PTR_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    INC_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    DEC_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    =               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 157 (prim_expr -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 157 (prim_expr -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 157 (prim_expr -> IDENTIFIER .)
    *               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    /               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    %               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    +               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    -               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    LEFT_OP         reduce using rule 157 (prim_expr -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 157 (prim_expr -> IDENTIFIER .)
    <               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    >               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    LE_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    GE_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    EQ_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    NE_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    &               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ^               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    |               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    AND_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ?               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    OR_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ;               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ,               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ]               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    }               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    )               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    :               reduce using rule 157 (prim_expr -> IDENTIFIER .)


state 97

    (141) unary_op -> & .

    (               reduce using rule 141 (unary_op -> & .)
    INC_OP          reduce using rule 141 (unary_op -> & .)
    DEC_OP          reduce using rule 141 (unary_op -> & .)
    SIZEOF          reduce using rule 141 (unary_op -> & .)
    &               reduce using rule 141 (unary_op -> & .)
    *               reduce using rule 141 (unary_op -> & .)
    +               reduce using rule 141 (unary_op -> & .)
    -               reduce using rule 141 (unary_op -> & .)
    ~               reduce using rule 141 (unary_op -> & .)
    !               reduce using rule 141 (unary_op -> & .)
    IDENTIFIER      reduce using rule 141 (unary_op -> & .)
    CONSTANT        reduce using rule 141 (unary_op -> & .)
    STRING_LITERAL  reduce using rule 141 (unary_op -> & .)


state 98

    (142) unary_op -> * .

    (               reduce using rule 142 (unary_op -> * .)
    INC_OP          reduce using rule 142 (unary_op -> * .)
    DEC_OP          reduce using rule 142 (unary_op -> * .)
    SIZEOF          reduce using rule 142 (unary_op -> * .)
    &               reduce using rule 142 (unary_op -> * .)
    *               reduce using rule 142 (unary_op -> * .)
    +               reduce using rule 142 (unary_op -> * .)
    -               reduce using rule 142 (unary_op -> * .)
    ~               reduce using rule 142 (unary_op -> * .)
    !               reduce using rule 142 (unary_op -> * .)
    IDENTIFIER      reduce using rule 142 (unary_op -> * .)
    CONSTANT        reduce using rule 142 (unary_op -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_op -> * .)


state 99

    (143) unary_op -> + .

    (               reduce using rule 143 (unary_op -> + .)
    INC_OP          reduce using rule 143 (unary_op -> + .)
    DEC_OP          reduce using rule 143 (unary_op -> + .)
    SIZEOF          reduce using rule 143 (unary_op -> + .)
    &               reduce using rule 143 (unary_op -> + .)
    *               reduce using rule 143 (unary_op -> + .)
    +               reduce using rule 143 (unary_op -> + .)
    -               reduce using rule 143 (unary_op -> + .)
    ~               reduce using rule 143 (unary_op -> + .)
    !               reduce using rule 143 (unary_op -> + .)
    IDENTIFIER      reduce using rule 143 (unary_op -> + .)
    CONSTANT        reduce using rule 143 (unary_op -> + .)
    STRING_LITERAL  reduce using rule 143 (unary_op -> + .)


state 100

    (144) unary_op -> - .

    (               reduce using rule 144 (unary_op -> - .)
    INC_OP          reduce using rule 144 (unary_op -> - .)
    DEC_OP          reduce using rule 144 (unary_op -> - .)
    SIZEOF          reduce using rule 144 (unary_op -> - .)
    &               reduce using rule 144 (unary_op -> - .)
    *               reduce using rule 144 (unary_op -> - .)
    +               reduce using rule 144 (unary_op -> - .)
    -               reduce using rule 144 (unary_op -> - .)
    ~               reduce using rule 144 (unary_op -> - .)
    !               reduce using rule 144 (unary_op -> - .)
    IDENTIFIER      reduce using rule 144 (unary_op -> - .)
    CONSTANT        reduce using rule 144 (unary_op -> - .)
    STRING_LITERAL  reduce using rule 144 (unary_op -> - .)


state 101

    (145) unary_op -> ~ .

    (               reduce using rule 145 (unary_op -> ~ .)
    INC_OP          reduce using rule 145 (unary_op -> ~ .)
    DEC_OP          reduce using rule 145 (unary_op -> ~ .)
    SIZEOF          reduce using rule 145 (unary_op -> ~ .)
    &               reduce using rule 145 (unary_op -> ~ .)
    *               reduce using rule 145 (unary_op -> ~ .)
    +               reduce using rule 145 (unary_op -> ~ .)
    -               reduce using rule 145 (unary_op -> ~ .)
    ~               reduce using rule 145 (unary_op -> ~ .)
    !               reduce using rule 145 (unary_op -> ~ .)
    IDENTIFIER      reduce using rule 145 (unary_op -> ~ .)
    CONSTANT        reduce using rule 145 (unary_op -> ~ .)
    STRING_LITERAL  reduce using rule 145 (unary_op -> ~ .)


state 102

    (146) unary_op -> ! .

    (               reduce using rule 146 (unary_op -> ! .)
    INC_OP          reduce using rule 146 (unary_op -> ! .)
    DEC_OP          reduce using rule 146 (unary_op -> ! .)
    SIZEOF          reduce using rule 146 (unary_op -> ! .)
    &               reduce using rule 146 (unary_op -> ! .)
    *               reduce using rule 146 (unary_op -> ! .)
    +               reduce using rule 146 (unary_op -> ! .)
    -               reduce using rule 146 (unary_op -> ! .)
    ~               reduce using rule 146 (unary_op -> ! .)
    !               reduce using rule 146 (unary_op -> ! .)
    IDENTIFIER      reduce using rule 146 (unary_op -> ! .)
    CONSTANT        reduce using rule 146 (unary_op -> ! .)
    STRING_LITERAL  reduce using rule 146 (unary_op -> ! .)


state 103

    (107) log_and_expr -> incl_or_expr .
    (110) incl_or_expr -> incl_or_expr . | excl_or_expr

    AND_OP          reduce using rule 107 (log_and_expr -> incl_or_expr .)
    ?               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    OR_OP           reduce using rule 107 (log_and_expr -> incl_or_expr .)
    ;               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    ,               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    ]               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    }               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    )               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    :               reduce using rule 107 (log_and_expr -> incl_or_expr .)
    |               shift and go to state 205


state 104

    (158) prim_expr -> CONSTANT .

    [               reduce using rule 158 (prim_expr -> CONSTANT .)
    (               reduce using rule 158 (prim_expr -> CONSTANT .)
    .               reduce using rule 158 (prim_expr -> CONSTANT .)
    PTR_OP          reduce using rule 158 (prim_expr -> CONSTANT .)
    INC_OP          reduce using rule 158 (prim_expr -> CONSTANT .)
    DEC_OP          reduce using rule 158 (prim_expr -> CONSTANT .)
    =               reduce using rule 158 (prim_expr -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 158 (prim_expr -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 158 (prim_expr -> CONSTANT .)
    AND_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 158 (prim_expr -> CONSTANT .)
    OR_ASSIGN       reduce using rule 158 (prim_expr -> CONSTANT .)
    *               reduce using rule 158 (prim_expr -> CONSTANT .)
    /               reduce using rule 158 (prim_expr -> CONSTANT .)
    %               reduce using rule 158 (prim_expr -> CONSTANT .)
    +               reduce using rule 158 (prim_expr -> CONSTANT .)
    -               reduce using rule 158 (prim_expr -> CONSTANT .)
    LEFT_OP         reduce using rule 158 (prim_expr -> CONSTANT .)
    RIGHT_OP        reduce using rule 158 (prim_expr -> CONSTANT .)
    <               reduce using rule 158 (prim_expr -> CONSTANT .)
    >               reduce using rule 158 (prim_expr -> CONSTANT .)
    LE_OP           reduce using rule 158 (prim_expr -> CONSTANT .)
    GE_OP           reduce using rule 158 (prim_expr -> CONSTANT .)
    EQ_OP           reduce using rule 158 (prim_expr -> CONSTANT .)
    NE_OP           reduce using rule 158 (prim_expr -> CONSTANT .)
    &               reduce using rule 158 (prim_expr -> CONSTANT .)
    ^               reduce using rule 158 (prim_expr -> CONSTANT .)
    |               reduce using rule 158 (prim_expr -> CONSTANT .)
    AND_OP          reduce using rule 158 (prim_expr -> CONSTANT .)
    ?               reduce using rule 158 (prim_expr -> CONSTANT .)
    OR_OP           reduce using rule 158 (prim_expr -> CONSTANT .)
    ;               reduce using rule 158 (prim_expr -> CONSTANT .)
    ,               reduce using rule 158 (prim_expr -> CONSTANT .)
    ]               reduce using rule 158 (prim_expr -> CONSTANT .)
    }               reduce using rule 158 (prim_expr -> CONSTANT .)
    )               reduce using rule 158 (prim_expr -> CONSTANT .)
    :               reduce using rule 158 (prim_expr -> CONSTANT .)


state 105

    (159) prim_expr -> STRING_LITERAL .

    [               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    (               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    .               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    PTR_OP          reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    INC_OP          reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    DEC_OP          reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    =               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    *               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    /               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    %               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    +               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    -               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    <               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    >               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    LE_OP           reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    GE_OP           reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    EQ_OP           reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    NE_OP           reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    &               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    ^               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    |               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    AND_OP          reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    ?               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    OR_OP           reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    ;               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    ,               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    ]               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    }               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    )               reduce using rule 159 (prim_expr -> STRING_LITERAL .)
    :               reduce using rule 159 (prim_expr -> STRING_LITERAL .)


state 106

    (109) incl_or_expr -> excl_or_expr .
    (112) excl_or_expr -> excl_or_expr . ^ and_expr

    |               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    AND_OP          reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    ?               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    OR_OP           reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    ;               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    ,               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    ]               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    }               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    )               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    :               reduce using rule 109 (incl_or_expr -> excl_or_expr .)
    ^               shift and go to state 206


state 107

    (111) excl_or_expr -> and_expr .
    (114) and_expr -> and_expr . & eq_expr

    ^               reduce using rule 111 (excl_or_expr -> and_expr .)
    |               reduce using rule 111 (excl_or_expr -> and_expr .)
    AND_OP          reduce using rule 111 (excl_or_expr -> and_expr .)
    ?               reduce using rule 111 (excl_or_expr -> and_expr .)
    OR_OP           reduce using rule 111 (excl_or_expr -> and_expr .)
    ;               reduce using rule 111 (excl_or_expr -> and_expr .)
    ,               reduce using rule 111 (excl_or_expr -> and_expr .)
    ]               reduce using rule 111 (excl_or_expr -> and_expr .)
    }               reduce using rule 111 (excl_or_expr -> and_expr .)
    )               reduce using rule 111 (excl_or_expr -> and_expr .)
    :               reduce using rule 111 (excl_or_expr -> and_expr .)
    &               shift and go to state 207


state 108

    (113) and_expr -> eq_expr .
    (116) eq_expr -> eq_expr . EQ_OP rel_expr
    (117) eq_expr -> eq_expr . NE_OP rel_expr

    &               reduce using rule 113 (and_expr -> eq_expr .)
    ^               reduce using rule 113 (and_expr -> eq_expr .)
    |               reduce using rule 113 (and_expr -> eq_expr .)
    AND_OP          reduce using rule 113 (and_expr -> eq_expr .)
    ?               reduce using rule 113 (and_expr -> eq_expr .)
    OR_OP           reduce using rule 113 (and_expr -> eq_expr .)
    ;               reduce using rule 113 (and_expr -> eq_expr .)
    ,               reduce using rule 113 (and_expr -> eq_expr .)
    ]               reduce using rule 113 (and_expr -> eq_expr .)
    }               reduce using rule 113 (and_expr -> eq_expr .)
    )               reduce using rule 113 (and_expr -> eq_expr .)
    :               reduce using rule 113 (and_expr -> eq_expr .)
    EQ_OP           shift and go to state 208
    NE_OP           shift and go to state 209


state 109

    (115) eq_expr -> rel_expr .
    (119) rel_expr -> rel_expr . < shift_expr
    (120) rel_expr -> rel_expr . > shift_expr
    (121) rel_expr -> rel_expr . LE_OP shift_expr
    (122) rel_expr -> rel_expr . GE_OP shift_expr

    EQ_OP           reduce using rule 115 (eq_expr -> rel_expr .)
    NE_OP           reduce using rule 115 (eq_expr -> rel_expr .)
    &               reduce using rule 115 (eq_expr -> rel_expr .)
    ^               reduce using rule 115 (eq_expr -> rel_expr .)
    |               reduce using rule 115 (eq_expr -> rel_expr .)
    AND_OP          reduce using rule 115 (eq_expr -> rel_expr .)
    ?               reduce using rule 115 (eq_expr -> rel_expr .)
    OR_OP           reduce using rule 115 (eq_expr -> rel_expr .)
    ;               reduce using rule 115 (eq_expr -> rel_expr .)
    ,               reduce using rule 115 (eq_expr -> rel_expr .)
    ]               reduce using rule 115 (eq_expr -> rel_expr .)
    }               reduce using rule 115 (eq_expr -> rel_expr .)
    )               reduce using rule 115 (eq_expr -> rel_expr .)
    :               reduce using rule 115 (eq_expr -> rel_expr .)
    <               shift and go to state 210
    >               shift and go to state 211
    LE_OP           shift and go to state 212
    GE_OP           shift and go to state 213


state 110

    (118) rel_expr -> shift_expr .
    (124) shift_expr -> shift_expr . LEFT_OP add_expr
    (125) shift_expr -> shift_expr . RIGHT_OP add_expr

    <               reduce using rule 118 (rel_expr -> shift_expr .)
    >               reduce using rule 118 (rel_expr -> shift_expr .)
    LE_OP           reduce using rule 118 (rel_expr -> shift_expr .)
    GE_OP           reduce using rule 118 (rel_expr -> shift_expr .)
    EQ_OP           reduce using rule 118 (rel_expr -> shift_expr .)
    NE_OP           reduce using rule 118 (rel_expr -> shift_expr .)
    &               reduce using rule 118 (rel_expr -> shift_expr .)
    ^               reduce using rule 118 (rel_expr -> shift_expr .)
    |               reduce using rule 118 (rel_expr -> shift_expr .)
    AND_OP          reduce using rule 118 (rel_expr -> shift_expr .)
    ?               reduce using rule 118 (rel_expr -> shift_expr .)
    OR_OP           reduce using rule 118 (rel_expr -> shift_expr .)
    ;               reduce using rule 118 (rel_expr -> shift_expr .)
    ,               reduce using rule 118 (rel_expr -> shift_expr .)
    ]               reduce using rule 118 (rel_expr -> shift_expr .)
    }               reduce using rule 118 (rel_expr -> shift_expr .)
    )               reduce using rule 118 (rel_expr -> shift_expr .)
    :               reduce using rule 118 (rel_expr -> shift_expr .)
    LEFT_OP         shift and go to state 214
    RIGHT_OP        shift and go to state 215


state 111

    (123) shift_expr -> add_expr .
    (127) add_expr -> add_expr . + mult_expr
    (128) add_expr -> add_expr . - mult_expr

    LEFT_OP         reduce using rule 123 (shift_expr -> add_expr .)
    RIGHT_OP        reduce using rule 123 (shift_expr -> add_expr .)
    <               reduce using rule 123 (shift_expr -> add_expr .)
    >               reduce using rule 123 (shift_expr -> add_expr .)
    LE_OP           reduce using rule 123 (shift_expr -> add_expr .)
    GE_OP           reduce using rule 123 (shift_expr -> add_expr .)
    EQ_OP           reduce using rule 123 (shift_expr -> add_expr .)
    NE_OP           reduce using rule 123 (shift_expr -> add_expr .)
    &               reduce using rule 123 (shift_expr -> add_expr .)
    ^               reduce using rule 123 (shift_expr -> add_expr .)
    |               reduce using rule 123 (shift_expr -> add_expr .)
    AND_OP          reduce using rule 123 (shift_expr -> add_expr .)
    ?               reduce using rule 123 (shift_expr -> add_expr .)
    OR_OP           reduce using rule 123 (shift_expr -> add_expr .)
    ;               reduce using rule 123 (shift_expr -> add_expr .)
    ,               reduce using rule 123 (shift_expr -> add_expr .)
    ]               reduce using rule 123 (shift_expr -> add_expr .)
    }               reduce using rule 123 (shift_expr -> add_expr .)
    )               reduce using rule 123 (shift_expr -> add_expr .)
    :               reduce using rule 123 (shift_expr -> add_expr .)
    +               shift and go to state 216
    -               shift and go to state 217


state 112

    (126) add_expr -> mult_expr .
    (130) mult_expr -> mult_expr . * cast_expr
    (131) mult_expr -> mult_expr . / cast_expr
    (132) mult_expr -> mult_expr . % cast_expr

    +               reduce using rule 126 (add_expr -> mult_expr .)
    -               reduce using rule 126 (add_expr -> mult_expr .)
    LEFT_OP         reduce using rule 126 (add_expr -> mult_expr .)
    RIGHT_OP        reduce using rule 126 (add_expr -> mult_expr .)
    <               reduce using rule 126 (add_expr -> mult_expr .)
    >               reduce using rule 126 (add_expr -> mult_expr .)
    LE_OP           reduce using rule 126 (add_expr -> mult_expr .)
    GE_OP           reduce using rule 126 (add_expr -> mult_expr .)
    EQ_OP           reduce using rule 126 (add_expr -> mult_expr .)
    NE_OP           reduce using rule 126 (add_expr -> mult_expr .)
    &               reduce using rule 126 (add_expr -> mult_expr .)
    ^               reduce using rule 126 (add_expr -> mult_expr .)
    |               reduce using rule 126 (add_expr -> mult_expr .)
    AND_OP          reduce using rule 126 (add_expr -> mult_expr .)
    ?               reduce using rule 126 (add_expr -> mult_expr .)
    OR_OP           reduce using rule 126 (add_expr -> mult_expr .)
    ;               reduce using rule 126 (add_expr -> mult_expr .)
    ,               reduce using rule 126 (add_expr -> mult_expr .)
    ]               reduce using rule 126 (add_expr -> mult_expr .)
    }               reduce using rule 126 (add_expr -> mult_expr .)
    )               reduce using rule 126 (add_expr -> mult_expr .)
    :               reduce using rule 126 (add_expr -> mult_expr .)
    *               shift and go to state 218
    /               shift and go to state 219
    %               shift and go to state 220


state 113

    (203) comp_stmt -> { } .

    TYPEDEF         reduce using rule 203 (comp_stmt -> { } .)
    EXTERN          reduce using rule 203 (comp_stmt -> { } .)
    STATIC          reduce using rule 203 (comp_stmt -> { } .)
    AUTO            reduce using rule 203 (comp_stmt -> { } .)
    REGISTER        reduce using rule 203 (comp_stmt -> { } .)
    VOID            reduce using rule 203 (comp_stmt -> { } .)
    CHAR            reduce using rule 203 (comp_stmt -> { } .)
    SHORT           reduce using rule 203 (comp_stmt -> { } .)
    INT             reduce using rule 203 (comp_stmt -> { } .)
    LONG            reduce using rule 203 (comp_stmt -> { } .)
    FLOAT           reduce using rule 203 (comp_stmt -> { } .)
    DOUBLE          reduce using rule 203 (comp_stmt -> { } .)
    SIGNED          reduce using rule 203 (comp_stmt -> { } .)
    UNSIGNED        reduce using rule 203 (comp_stmt -> { } .)
    BOOL            reduce using rule 203 (comp_stmt -> { } .)
    CONST           reduce using rule 203 (comp_stmt -> { } .)
    RESTRICT        reduce using rule 203 (comp_stmt -> { } .)
    VOLATILE        reduce using rule 203 (comp_stmt -> { } .)
    INLINE          reduce using rule 203 (comp_stmt -> { } .)
    ENUM            reduce using rule 203 (comp_stmt -> { } .)
    STRUCT          reduce using rule 203 (comp_stmt -> { } .)
    UNION           reduce using rule 203 (comp_stmt -> { } .)
    $end            reduce using rule 203 (comp_stmt -> { } .)
    }               reduce using rule 203 (comp_stmt -> { } .)
    IDENTIFIER      reduce using rule 203 (comp_stmt -> { } .)
    CASE            reduce using rule 203 (comp_stmt -> { } .)
    DEFAULT         reduce using rule 203 (comp_stmt -> { } .)
    {               reduce using rule 203 (comp_stmt -> { } .)
    ;               reduce using rule 203 (comp_stmt -> { } .)
    IF              reduce using rule 203 (comp_stmt -> { } .)
    SWITCH          reduce using rule 203 (comp_stmt -> { } .)
    WHILE           reduce using rule 203 (comp_stmt -> { } .)
    DO              reduce using rule 203 (comp_stmt -> { } .)
    FOR             reduce using rule 203 (comp_stmt -> { } .)
    GOTO            reduce using rule 203 (comp_stmt -> { } .)
    CONTINUE        reduce using rule 203 (comp_stmt -> { } .)
    BREAK           reduce using rule 203 (comp_stmt -> { } .)
    RETURN          reduce using rule 203 (comp_stmt -> { } .)
    INC_OP          reduce using rule 203 (comp_stmt -> { } .)
    DEC_OP          reduce using rule 203 (comp_stmt -> { } .)
    SIZEOF          reduce using rule 203 (comp_stmt -> { } .)
    (               reduce using rule 203 (comp_stmt -> { } .)
    &               reduce using rule 203 (comp_stmt -> { } .)
    *               reduce using rule 203 (comp_stmt -> { } .)
    +               reduce using rule 203 (comp_stmt -> { } .)
    -               reduce using rule 203 (comp_stmt -> { } .)
    ~               reduce using rule 203 (comp_stmt -> { } .)
    !               reduce using rule 203 (comp_stmt -> { } .)
    CONSTANT        reduce using rule 203 (comp_stmt -> { } .)
    STRING_LITERAL  reduce using rule 203 (comp_stmt -> { } .)
    ELSE            reduce using rule 203 (comp_stmt -> { } .)


state 114

    (204) comp_stmt -> { block_item_list . }
    (206) block_item_list -> block_item_list . block_item
    (207) block_item -> . decl
    (208) block_item -> . stmt
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    }               shift and go to state 221
    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    block_item                     shift and go to state 222
    decl                           shift and go to state 116
    stmt                           shift and go to state 117
    decl_specs                     shift and go to state 53
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    expr                           shift and go to state 128
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    assign_expr                    shift and go to state 138
    struct_or_union                shift and go to state 31
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 115

    (205) block_item_list -> block_item .

    }               reduce using rule 205 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 205 (block_item_list -> block_item .)
    CASE            reduce using rule 205 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 205 (block_item_list -> block_item .)
    {               reduce using rule 205 (block_item_list -> block_item .)
    ;               reduce using rule 205 (block_item_list -> block_item .)
    IF              reduce using rule 205 (block_item_list -> block_item .)
    SWITCH          reduce using rule 205 (block_item_list -> block_item .)
    WHILE           reduce using rule 205 (block_item_list -> block_item .)
    DO              reduce using rule 205 (block_item_list -> block_item .)
    FOR             reduce using rule 205 (block_item_list -> block_item .)
    GOTO            reduce using rule 205 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 205 (block_item_list -> block_item .)
    BREAK           reduce using rule 205 (block_item_list -> block_item .)
    RETURN          reduce using rule 205 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 205 (block_item_list -> block_item .)
    EXTERN          reduce using rule 205 (block_item_list -> block_item .)
    STATIC          reduce using rule 205 (block_item_list -> block_item .)
    AUTO            reduce using rule 205 (block_item_list -> block_item .)
    REGISTER        reduce using rule 205 (block_item_list -> block_item .)
    VOID            reduce using rule 205 (block_item_list -> block_item .)
    CHAR            reduce using rule 205 (block_item_list -> block_item .)
    SHORT           reduce using rule 205 (block_item_list -> block_item .)
    INT             reduce using rule 205 (block_item_list -> block_item .)
    LONG            reduce using rule 205 (block_item_list -> block_item .)
    FLOAT           reduce using rule 205 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 205 (block_item_list -> block_item .)
    SIGNED          reduce using rule 205 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 205 (block_item_list -> block_item .)
    BOOL            reduce using rule 205 (block_item_list -> block_item .)
    CONST           reduce using rule 205 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 205 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 205 (block_item_list -> block_item .)
    INLINE          reduce using rule 205 (block_item_list -> block_item .)
    ENUM            reduce using rule 205 (block_item_list -> block_item .)
    STRUCT          reduce using rule 205 (block_item_list -> block_item .)
    UNION           reduce using rule 205 (block_item_list -> block_item .)
    INC_OP          reduce using rule 205 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 205 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 205 (block_item_list -> block_item .)
    (               reduce using rule 205 (block_item_list -> block_item .)
    &               reduce using rule 205 (block_item_list -> block_item .)
    *               reduce using rule 205 (block_item_list -> block_item .)
    +               reduce using rule 205 (block_item_list -> block_item .)
    -               reduce using rule 205 (block_item_list -> block_item .)
    ~               reduce using rule 205 (block_item_list -> block_item .)
    !               reduce using rule 205 (block_item_list -> block_item .)
    CONSTANT        reduce using rule 205 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 205 (block_item_list -> block_item .)


state 116

    (207) block_item -> decl .

    }               reduce using rule 207 (block_item -> decl .)
    IDENTIFIER      reduce using rule 207 (block_item -> decl .)
    CASE            reduce using rule 207 (block_item -> decl .)
    DEFAULT         reduce using rule 207 (block_item -> decl .)
    {               reduce using rule 207 (block_item -> decl .)
    ;               reduce using rule 207 (block_item -> decl .)
    IF              reduce using rule 207 (block_item -> decl .)
    SWITCH          reduce using rule 207 (block_item -> decl .)
    WHILE           reduce using rule 207 (block_item -> decl .)
    DO              reduce using rule 207 (block_item -> decl .)
    FOR             reduce using rule 207 (block_item -> decl .)
    GOTO            reduce using rule 207 (block_item -> decl .)
    CONTINUE        reduce using rule 207 (block_item -> decl .)
    BREAK           reduce using rule 207 (block_item -> decl .)
    RETURN          reduce using rule 207 (block_item -> decl .)
    TYPEDEF         reduce using rule 207 (block_item -> decl .)
    EXTERN          reduce using rule 207 (block_item -> decl .)
    STATIC          reduce using rule 207 (block_item -> decl .)
    AUTO            reduce using rule 207 (block_item -> decl .)
    REGISTER        reduce using rule 207 (block_item -> decl .)
    VOID            reduce using rule 207 (block_item -> decl .)
    CHAR            reduce using rule 207 (block_item -> decl .)
    SHORT           reduce using rule 207 (block_item -> decl .)
    INT             reduce using rule 207 (block_item -> decl .)
    LONG            reduce using rule 207 (block_item -> decl .)
    FLOAT           reduce using rule 207 (block_item -> decl .)
    DOUBLE          reduce using rule 207 (block_item -> decl .)
    SIGNED          reduce using rule 207 (block_item -> decl .)
    UNSIGNED        reduce using rule 207 (block_item -> decl .)
    BOOL            reduce using rule 207 (block_item -> decl .)
    CONST           reduce using rule 207 (block_item -> decl .)
    RESTRICT        reduce using rule 207 (block_item -> decl .)
    VOLATILE        reduce using rule 207 (block_item -> decl .)
    INLINE          reduce using rule 207 (block_item -> decl .)
    ENUM            reduce using rule 207 (block_item -> decl .)
    STRUCT          reduce using rule 207 (block_item -> decl .)
    UNION           reduce using rule 207 (block_item -> decl .)
    INC_OP          reduce using rule 207 (block_item -> decl .)
    DEC_OP          reduce using rule 207 (block_item -> decl .)
    SIZEOF          reduce using rule 207 (block_item -> decl .)
    (               reduce using rule 207 (block_item -> decl .)
    &               reduce using rule 207 (block_item -> decl .)
    *               reduce using rule 207 (block_item -> decl .)
    +               reduce using rule 207 (block_item -> decl .)
    -               reduce using rule 207 (block_item -> decl .)
    ~               reduce using rule 207 (block_item -> decl .)
    !               reduce using rule 207 (block_item -> decl .)
    CONSTANT        reduce using rule 207 (block_item -> decl .)
    STRING_LITERAL  reduce using rule 207 (block_item -> decl .)


state 117

    (208) block_item -> stmt .

    }               reduce using rule 208 (block_item -> stmt .)
    IDENTIFIER      reduce using rule 208 (block_item -> stmt .)
    CASE            reduce using rule 208 (block_item -> stmt .)
    DEFAULT         reduce using rule 208 (block_item -> stmt .)
    {               reduce using rule 208 (block_item -> stmt .)
    ;               reduce using rule 208 (block_item -> stmt .)
    IF              reduce using rule 208 (block_item -> stmt .)
    SWITCH          reduce using rule 208 (block_item -> stmt .)
    WHILE           reduce using rule 208 (block_item -> stmt .)
    DO              reduce using rule 208 (block_item -> stmt .)
    FOR             reduce using rule 208 (block_item -> stmt .)
    GOTO            reduce using rule 208 (block_item -> stmt .)
    CONTINUE        reduce using rule 208 (block_item -> stmt .)
    BREAK           reduce using rule 208 (block_item -> stmt .)
    RETURN          reduce using rule 208 (block_item -> stmt .)
    TYPEDEF         reduce using rule 208 (block_item -> stmt .)
    EXTERN          reduce using rule 208 (block_item -> stmt .)
    STATIC          reduce using rule 208 (block_item -> stmt .)
    AUTO            reduce using rule 208 (block_item -> stmt .)
    REGISTER        reduce using rule 208 (block_item -> stmt .)
    VOID            reduce using rule 208 (block_item -> stmt .)
    CHAR            reduce using rule 208 (block_item -> stmt .)
    SHORT           reduce using rule 208 (block_item -> stmt .)
    INT             reduce using rule 208 (block_item -> stmt .)
    LONG            reduce using rule 208 (block_item -> stmt .)
    FLOAT           reduce using rule 208 (block_item -> stmt .)
    DOUBLE          reduce using rule 208 (block_item -> stmt .)
    SIGNED          reduce using rule 208 (block_item -> stmt .)
    UNSIGNED        reduce using rule 208 (block_item -> stmt .)
    BOOL            reduce using rule 208 (block_item -> stmt .)
    CONST           reduce using rule 208 (block_item -> stmt .)
    RESTRICT        reduce using rule 208 (block_item -> stmt .)
    VOLATILE        reduce using rule 208 (block_item -> stmt .)
    INLINE          reduce using rule 208 (block_item -> stmt .)
    ENUM            reduce using rule 208 (block_item -> stmt .)
    STRUCT          reduce using rule 208 (block_item -> stmt .)
    UNION           reduce using rule 208 (block_item -> stmt .)
    INC_OP          reduce using rule 208 (block_item -> stmt .)
    DEC_OP          reduce using rule 208 (block_item -> stmt .)
    SIZEOF          reduce using rule 208 (block_item -> stmt .)
    (               reduce using rule 208 (block_item -> stmt .)
    &               reduce using rule 208 (block_item -> stmt .)
    *               reduce using rule 208 (block_item -> stmt .)
    +               reduce using rule 208 (block_item -> stmt .)
    -               reduce using rule 208 (block_item -> stmt .)
    ~               reduce using rule 208 (block_item -> stmt .)
    !               reduce using rule 208 (block_item -> stmt .)
    CONSTANT        reduce using rule 208 (block_item -> stmt .)
    STRING_LITERAL  reduce using rule 208 (block_item -> stmt .)


state 118

    (218) expr_stmt -> ; .

    }               reduce using rule 218 (expr_stmt -> ; .)
    IDENTIFIER      reduce using rule 218 (expr_stmt -> ; .)
    CASE            reduce using rule 218 (expr_stmt -> ; .)
    DEFAULT         reduce using rule 218 (expr_stmt -> ; .)
    {               reduce using rule 218 (expr_stmt -> ; .)
    ;               reduce using rule 218 (expr_stmt -> ; .)
    IF              reduce using rule 218 (expr_stmt -> ; .)
    SWITCH          reduce using rule 218 (expr_stmt -> ; .)
    WHILE           reduce using rule 218 (expr_stmt -> ; .)
    DO              reduce using rule 218 (expr_stmt -> ; .)
    FOR             reduce using rule 218 (expr_stmt -> ; .)
    GOTO            reduce using rule 218 (expr_stmt -> ; .)
    CONTINUE        reduce using rule 218 (expr_stmt -> ; .)
    BREAK           reduce using rule 218 (expr_stmt -> ; .)
    RETURN          reduce using rule 218 (expr_stmt -> ; .)
    TYPEDEF         reduce using rule 218 (expr_stmt -> ; .)
    EXTERN          reduce using rule 218 (expr_stmt -> ; .)
    STATIC          reduce using rule 218 (expr_stmt -> ; .)
    AUTO            reduce using rule 218 (expr_stmt -> ; .)
    REGISTER        reduce using rule 218 (expr_stmt -> ; .)
    VOID            reduce using rule 218 (expr_stmt -> ; .)
    CHAR            reduce using rule 218 (expr_stmt -> ; .)
    SHORT           reduce using rule 218 (expr_stmt -> ; .)
    INT             reduce using rule 218 (expr_stmt -> ; .)
    LONG            reduce using rule 218 (expr_stmt -> ; .)
    FLOAT           reduce using rule 218 (expr_stmt -> ; .)
    DOUBLE          reduce using rule 218 (expr_stmt -> ; .)
    SIGNED          reduce using rule 218 (expr_stmt -> ; .)
    UNSIGNED        reduce using rule 218 (expr_stmt -> ; .)
    BOOL            reduce using rule 218 (expr_stmt -> ; .)
    CONST           reduce using rule 218 (expr_stmt -> ; .)
    RESTRICT        reduce using rule 218 (expr_stmt -> ; .)
    VOLATILE        reduce using rule 218 (expr_stmt -> ; .)
    INLINE          reduce using rule 218 (expr_stmt -> ; .)
    ENUM            reduce using rule 218 (expr_stmt -> ; .)
    STRUCT          reduce using rule 218 (expr_stmt -> ; .)
    UNION           reduce using rule 218 (expr_stmt -> ; .)
    INC_OP          reduce using rule 218 (expr_stmt -> ; .)
    DEC_OP          reduce using rule 218 (expr_stmt -> ; .)
    SIZEOF          reduce using rule 218 (expr_stmt -> ; .)
    (               reduce using rule 218 (expr_stmt -> ; .)
    &               reduce using rule 218 (expr_stmt -> ; .)
    *               reduce using rule 218 (expr_stmt -> ; .)
    +               reduce using rule 218 (expr_stmt -> ; .)
    -               reduce using rule 218 (expr_stmt -> ; .)
    ~               reduce using rule 218 (expr_stmt -> ; .)
    !               reduce using rule 218 (expr_stmt -> ; .)
    CONSTANT        reduce using rule 218 (expr_stmt -> ; .)
    STRING_LITERAL  reduce using rule 218 (expr_stmt -> ; .)
    ELSE            reduce using rule 218 (expr_stmt -> ; .)
    )               reduce using rule 218 (expr_stmt -> ; .)


state 119

    (209) stmt -> labeled_stmt .

    }               reduce using rule 209 (stmt -> labeled_stmt .)
    IDENTIFIER      reduce using rule 209 (stmt -> labeled_stmt .)
    CASE            reduce using rule 209 (stmt -> labeled_stmt .)
    DEFAULT         reduce using rule 209 (stmt -> labeled_stmt .)
    {               reduce using rule 209 (stmt -> labeled_stmt .)
    ;               reduce using rule 209 (stmt -> labeled_stmt .)
    IF              reduce using rule 209 (stmt -> labeled_stmt .)
    SWITCH          reduce using rule 209 (stmt -> labeled_stmt .)
    WHILE           reduce using rule 209 (stmt -> labeled_stmt .)
    DO              reduce using rule 209 (stmt -> labeled_stmt .)
    FOR             reduce using rule 209 (stmt -> labeled_stmt .)
    GOTO            reduce using rule 209 (stmt -> labeled_stmt .)
    CONTINUE        reduce using rule 209 (stmt -> labeled_stmt .)
    BREAK           reduce using rule 209 (stmt -> labeled_stmt .)
    RETURN          reduce using rule 209 (stmt -> labeled_stmt .)
    TYPEDEF         reduce using rule 209 (stmt -> labeled_stmt .)
    EXTERN          reduce using rule 209 (stmt -> labeled_stmt .)
    STATIC          reduce using rule 209 (stmt -> labeled_stmt .)
    AUTO            reduce using rule 209 (stmt -> labeled_stmt .)
    REGISTER        reduce using rule 209 (stmt -> labeled_stmt .)
    VOID            reduce using rule 209 (stmt -> labeled_stmt .)
    CHAR            reduce using rule 209 (stmt -> labeled_stmt .)
    SHORT           reduce using rule 209 (stmt -> labeled_stmt .)
    INT             reduce using rule 209 (stmt -> labeled_stmt .)
    LONG            reduce using rule 209 (stmt -> labeled_stmt .)
    FLOAT           reduce using rule 209 (stmt -> labeled_stmt .)
    DOUBLE          reduce using rule 209 (stmt -> labeled_stmt .)
    SIGNED          reduce using rule 209 (stmt -> labeled_stmt .)
    UNSIGNED        reduce using rule 209 (stmt -> labeled_stmt .)
    BOOL            reduce using rule 209 (stmt -> labeled_stmt .)
    CONST           reduce using rule 209 (stmt -> labeled_stmt .)
    RESTRICT        reduce using rule 209 (stmt -> labeled_stmt .)
    VOLATILE        reduce using rule 209 (stmt -> labeled_stmt .)
    INLINE          reduce using rule 209 (stmt -> labeled_stmt .)
    ENUM            reduce using rule 209 (stmt -> labeled_stmt .)
    STRUCT          reduce using rule 209 (stmt -> labeled_stmt .)
    UNION           reduce using rule 209 (stmt -> labeled_stmt .)
    INC_OP          reduce using rule 209 (stmt -> labeled_stmt .)
    DEC_OP          reduce using rule 209 (stmt -> labeled_stmt .)
    SIZEOF          reduce using rule 209 (stmt -> labeled_stmt .)
    (               reduce using rule 209 (stmt -> labeled_stmt .)
    &               reduce using rule 209 (stmt -> labeled_stmt .)
    *               reduce using rule 209 (stmt -> labeled_stmt .)
    +               reduce using rule 209 (stmt -> labeled_stmt .)
    -               reduce using rule 209 (stmt -> labeled_stmt .)
    ~               reduce using rule 209 (stmt -> labeled_stmt .)
    !               reduce using rule 209 (stmt -> labeled_stmt .)
    CONSTANT        reduce using rule 209 (stmt -> labeled_stmt .)
    STRING_LITERAL  reduce using rule 209 (stmt -> labeled_stmt .)
    ELSE            reduce using rule 209 (stmt -> labeled_stmt .)


state 120

    (210) stmt -> comp_stmt .

    }               reduce using rule 210 (stmt -> comp_stmt .)
    IDENTIFIER      reduce using rule 210 (stmt -> comp_stmt .)
    CASE            reduce using rule 210 (stmt -> comp_stmt .)
    DEFAULT         reduce using rule 210 (stmt -> comp_stmt .)
    {               reduce using rule 210 (stmt -> comp_stmt .)
    ;               reduce using rule 210 (stmt -> comp_stmt .)
    IF              reduce using rule 210 (stmt -> comp_stmt .)
    SWITCH          reduce using rule 210 (stmt -> comp_stmt .)
    WHILE           reduce using rule 210 (stmt -> comp_stmt .)
    DO              reduce using rule 210 (stmt -> comp_stmt .)
    FOR             reduce using rule 210 (stmt -> comp_stmt .)
    GOTO            reduce using rule 210 (stmt -> comp_stmt .)
    CONTINUE        reduce using rule 210 (stmt -> comp_stmt .)
    BREAK           reduce using rule 210 (stmt -> comp_stmt .)
    RETURN          reduce using rule 210 (stmt -> comp_stmt .)
    TYPEDEF         reduce using rule 210 (stmt -> comp_stmt .)
    EXTERN          reduce using rule 210 (stmt -> comp_stmt .)
    STATIC          reduce using rule 210 (stmt -> comp_stmt .)
    AUTO            reduce using rule 210 (stmt -> comp_stmt .)
    REGISTER        reduce using rule 210 (stmt -> comp_stmt .)
    VOID            reduce using rule 210 (stmt -> comp_stmt .)
    CHAR            reduce using rule 210 (stmt -> comp_stmt .)
    SHORT           reduce using rule 210 (stmt -> comp_stmt .)
    INT             reduce using rule 210 (stmt -> comp_stmt .)
    LONG            reduce using rule 210 (stmt -> comp_stmt .)
    FLOAT           reduce using rule 210 (stmt -> comp_stmt .)
    DOUBLE          reduce using rule 210 (stmt -> comp_stmt .)
    SIGNED          reduce using rule 210 (stmt -> comp_stmt .)
    UNSIGNED        reduce using rule 210 (stmt -> comp_stmt .)
    BOOL            reduce using rule 210 (stmt -> comp_stmt .)
    CONST           reduce using rule 210 (stmt -> comp_stmt .)
    RESTRICT        reduce using rule 210 (stmt -> comp_stmt .)
    VOLATILE        reduce using rule 210 (stmt -> comp_stmt .)
    INLINE          reduce using rule 210 (stmt -> comp_stmt .)
    ENUM            reduce using rule 210 (stmt -> comp_stmt .)
    STRUCT          reduce using rule 210 (stmt -> comp_stmt .)
    UNION           reduce using rule 210 (stmt -> comp_stmt .)
    INC_OP          reduce using rule 210 (stmt -> comp_stmt .)
    DEC_OP          reduce using rule 210 (stmt -> comp_stmt .)
    SIZEOF          reduce using rule 210 (stmt -> comp_stmt .)
    (               reduce using rule 210 (stmt -> comp_stmt .)
    &               reduce using rule 210 (stmt -> comp_stmt .)
    *               reduce using rule 210 (stmt -> comp_stmt .)
    +               reduce using rule 210 (stmt -> comp_stmt .)
    -               reduce using rule 210 (stmt -> comp_stmt .)
    ~               reduce using rule 210 (stmt -> comp_stmt .)
    !               reduce using rule 210 (stmt -> comp_stmt .)
    CONSTANT        reduce using rule 210 (stmt -> comp_stmt .)
    STRING_LITERAL  reduce using rule 210 (stmt -> comp_stmt .)
    ELSE            reduce using rule 210 (stmt -> comp_stmt .)


state 121

    (211) stmt -> expr_stmt .

    }               reduce using rule 211 (stmt -> expr_stmt .)
    IDENTIFIER      reduce using rule 211 (stmt -> expr_stmt .)
    CASE            reduce using rule 211 (stmt -> expr_stmt .)
    DEFAULT         reduce using rule 211 (stmt -> expr_stmt .)
    {               reduce using rule 211 (stmt -> expr_stmt .)
    ;               reduce using rule 211 (stmt -> expr_stmt .)
    IF              reduce using rule 211 (stmt -> expr_stmt .)
    SWITCH          reduce using rule 211 (stmt -> expr_stmt .)
    WHILE           reduce using rule 211 (stmt -> expr_stmt .)
    DO              reduce using rule 211 (stmt -> expr_stmt .)
    FOR             reduce using rule 211 (stmt -> expr_stmt .)
    GOTO            reduce using rule 211 (stmt -> expr_stmt .)
    CONTINUE        reduce using rule 211 (stmt -> expr_stmt .)
    BREAK           reduce using rule 211 (stmt -> expr_stmt .)
    RETURN          reduce using rule 211 (stmt -> expr_stmt .)
    TYPEDEF         reduce using rule 211 (stmt -> expr_stmt .)
    EXTERN          reduce using rule 211 (stmt -> expr_stmt .)
    STATIC          reduce using rule 211 (stmt -> expr_stmt .)
    AUTO            reduce using rule 211 (stmt -> expr_stmt .)
    REGISTER        reduce using rule 211 (stmt -> expr_stmt .)
    VOID            reduce using rule 211 (stmt -> expr_stmt .)
    CHAR            reduce using rule 211 (stmt -> expr_stmt .)
    SHORT           reduce using rule 211 (stmt -> expr_stmt .)
    INT             reduce using rule 211 (stmt -> expr_stmt .)
    LONG            reduce using rule 211 (stmt -> expr_stmt .)
    FLOAT           reduce using rule 211 (stmt -> expr_stmt .)
    DOUBLE          reduce using rule 211 (stmt -> expr_stmt .)
    SIGNED          reduce using rule 211 (stmt -> expr_stmt .)
    UNSIGNED        reduce using rule 211 (stmt -> expr_stmt .)
    BOOL            reduce using rule 211 (stmt -> expr_stmt .)
    CONST           reduce using rule 211 (stmt -> expr_stmt .)
    RESTRICT        reduce using rule 211 (stmt -> expr_stmt .)
    VOLATILE        reduce using rule 211 (stmt -> expr_stmt .)
    INLINE          reduce using rule 211 (stmt -> expr_stmt .)
    ENUM            reduce using rule 211 (stmt -> expr_stmt .)
    STRUCT          reduce using rule 211 (stmt -> expr_stmt .)
    UNION           reduce using rule 211 (stmt -> expr_stmt .)
    INC_OP          reduce using rule 211 (stmt -> expr_stmt .)
    DEC_OP          reduce using rule 211 (stmt -> expr_stmt .)
    SIZEOF          reduce using rule 211 (stmt -> expr_stmt .)
    (               reduce using rule 211 (stmt -> expr_stmt .)
    &               reduce using rule 211 (stmt -> expr_stmt .)
    *               reduce using rule 211 (stmt -> expr_stmt .)
    +               reduce using rule 211 (stmt -> expr_stmt .)
    -               reduce using rule 211 (stmt -> expr_stmt .)
    ~               reduce using rule 211 (stmt -> expr_stmt .)
    !               reduce using rule 211 (stmt -> expr_stmt .)
    CONSTANT        reduce using rule 211 (stmt -> expr_stmt .)
    STRING_LITERAL  reduce using rule 211 (stmt -> expr_stmt .)
    ELSE            reduce using rule 211 (stmt -> expr_stmt .)


state 122

    (212) stmt -> sel_stmt .

    }               reduce using rule 212 (stmt -> sel_stmt .)
    IDENTIFIER      reduce using rule 212 (stmt -> sel_stmt .)
    CASE            reduce using rule 212 (stmt -> sel_stmt .)
    DEFAULT         reduce using rule 212 (stmt -> sel_stmt .)
    {               reduce using rule 212 (stmt -> sel_stmt .)
    ;               reduce using rule 212 (stmt -> sel_stmt .)
    IF              reduce using rule 212 (stmt -> sel_stmt .)
    SWITCH          reduce using rule 212 (stmt -> sel_stmt .)
    WHILE           reduce using rule 212 (stmt -> sel_stmt .)
    DO              reduce using rule 212 (stmt -> sel_stmt .)
    FOR             reduce using rule 212 (stmt -> sel_stmt .)
    GOTO            reduce using rule 212 (stmt -> sel_stmt .)
    CONTINUE        reduce using rule 212 (stmt -> sel_stmt .)
    BREAK           reduce using rule 212 (stmt -> sel_stmt .)
    RETURN          reduce using rule 212 (stmt -> sel_stmt .)
    TYPEDEF         reduce using rule 212 (stmt -> sel_stmt .)
    EXTERN          reduce using rule 212 (stmt -> sel_stmt .)
    STATIC          reduce using rule 212 (stmt -> sel_stmt .)
    AUTO            reduce using rule 212 (stmt -> sel_stmt .)
    REGISTER        reduce using rule 212 (stmt -> sel_stmt .)
    VOID            reduce using rule 212 (stmt -> sel_stmt .)
    CHAR            reduce using rule 212 (stmt -> sel_stmt .)
    SHORT           reduce using rule 212 (stmt -> sel_stmt .)
    INT             reduce using rule 212 (stmt -> sel_stmt .)
    LONG            reduce using rule 212 (stmt -> sel_stmt .)
    FLOAT           reduce using rule 212 (stmt -> sel_stmt .)
    DOUBLE          reduce using rule 212 (stmt -> sel_stmt .)
    SIGNED          reduce using rule 212 (stmt -> sel_stmt .)
    UNSIGNED        reduce using rule 212 (stmt -> sel_stmt .)
    BOOL            reduce using rule 212 (stmt -> sel_stmt .)
    CONST           reduce using rule 212 (stmt -> sel_stmt .)
    RESTRICT        reduce using rule 212 (stmt -> sel_stmt .)
    VOLATILE        reduce using rule 212 (stmt -> sel_stmt .)
    INLINE          reduce using rule 212 (stmt -> sel_stmt .)
    ENUM            reduce using rule 212 (stmt -> sel_stmt .)
    STRUCT          reduce using rule 212 (stmt -> sel_stmt .)
    UNION           reduce using rule 212 (stmt -> sel_stmt .)
    INC_OP          reduce using rule 212 (stmt -> sel_stmt .)
    DEC_OP          reduce using rule 212 (stmt -> sel_stmt .)
    SIZEOF          reduce using rule 212 (stmt -> sel_stmt .)
    (               reduce using rule 212 (stmt -> sel_stmt .)
    &               reduce using rule 212 (stmt -> sel_stmt .)
    *               reduce using rule 212 (stmt -> sel_stmt .)
    +               reduce using rule 212 (stmt -> sel_stmt .)
    -               reduce using rule 212 (stmt -> sel_stmt .)
    ~               reduce using rule 212 (stmt -> sel_stmt .)
    !               reduce using rule 212 (stmt -> sel_stmt .)
    CONSTANT        reduce using rule 212 (stmt -> sel_stmt .)
    STRING_LITERAL  reduce using rule 212 (stmt -> sel_stmt .)
    ELSE            reduce using rule 212 (stmt -> sel_stmt .)


state 123

    (213) stmt -> iter_stmt .

    }               reduce using rule 213 (stmt -> iter_stmt .)
    IDENTIFIER      reduce using rule 213 (stmt -> iter_stmt .)
    CASE            reduce using rule 213 (stmt -> iter_stmt .)
    DEFAULT         reduce using rule 213 (stmt -> iter_stmt .)
    {               reduce using rule 213 (stmt -> iter_stmt .)
    ;               reduce using rule 213 (stmt -> iter_stmt .)
    IF              reduce using rule 213 (stmt -> iter_stmt .)
    SWITCH          reduce using rule 213 (stmt -> iter_stmt .)
    WHILE           reduce using rule 213 (stmt -> iter_stmt .)
    DO              reduce using rule 213 (stmt -> iter_stmt .)
    FOR             reduce using rule 213 (stmt -> iter_stmt .)
    GOTO            reduce using rule 213 (stmt -> iter_stmt .)
    CONTINUE        reduce using rule 213 (stmt -> iter_stmt .)
    BREAK           reduce using rule 213 (stmt -> iter_stmt .)
    RETURN          reduce using rule 213 (stmt -> iter_stmt .)
    TYPEDEF         reduce using rule 213 (stmt -> iter_stmt .)
    EXTERN          reduce using rule 213 (stmt -> iter_stmt .)
    STATIC          reduce using rule 213 (stmt -> iter_stmt .)
    AUTO            reduce using rule 213 (stmt -> iter_stmt .)
    REGISTER        reduce using rule 213 (stmt -> iter_stmt .)
    VOID            reduce using rule 213 (stmt -> iter_stmt .)
    CHAR            reduce using rule 213 (stmt -> iter_stmt .)
    SHORT           reduce using rule 213 (stmt -> iter_stmt .)
    INT             reduce using rule 213 (stmt -> iter_stmt .)
    LONG            reduce using rule 213 (stmt -> iter_stmt .)
    FLOAT           reduce using rule 213 (stmt -> iter_stmt .)
    DOUBLE          reduce using rule 213 (stmt -> iter_stmt .)
    SIGNED          reduce using rule 213 (stmt -> iter_stmt .)
    UNSIGNED        reduce using rule 213 (stmt -> iter_stmt .)
    BOOL            reduce using rule 213 (stmt -> iter_stmt .)
    CONST           reduce using rule 213 (stmt -> iter_stmt .)
    RESTRICT        reduce using rule 213 (stmt -> iter_stmt .)
    VOLATILE        reduce using rule 213 (stmt -> iter_stmt .)
    INLINE          reduce using rule 213 (stmt -> iter_stmt .)
    ENUM            reduce using rule 213 (stmt -> iter_stmt .)
    STRUCT          reduce using rule 213 (stmt -> iter_stmt .)
    UNION           reduce using rule 213 (stmt -> iter_stmt .)
    INC_OP          reduce using rule 213 (stmt -> iter_stmt .)
    DEC_OP          reduce using rule 213 (stmt -> iter_stmt .)
    SIZEOF          reduce using rule 213 (stmt -> iter_stmt .)
    (               reduce using rule 213 (stmt -> iter_stmt .)
    &               reduce using rule 213 (stmt -> iter_stmt .)
    *               reduce using rule 213 (stmt -> iter_stmt .)
    +               reduce using rule 213 (stmt -> iter_stmt .)
    -               reduce using rule 213 (stmt -> iter_stmt .)
    ~               reduce using rule 213 (stmt -> iter_stmt .)
    !               reduce using rule 213 (stmt -> iter_stmt .)
    CONSTANT        reduce using rule 213 (stmt -> iter_stmt .)
    STRING_LITERAL  reduce using rule 213 (stmt -> iter_stmt .)
    ELSE            reduce using rule 213 (stmt -> iter_stmt .)


state 124

    (214) stmt -> jump_stmt .

    }               reduce using rule 214 (stmt -> jump_stmt .)
    IDENTIFIER      reduce using rule 214 (stmt -> jump_stmt .)
    CASE            reduce using rule 214 (stmt -> jump_stmt .)
    DEFAULT         reduce using rule 214 (stmt -> jump_stmt .)
    {               reduce using rule 214 (stmt -> jump_stmt .)
    ;               reduce using rule 214 (stmt -> jump_stmt .)
    IF              reduce using rule 214 (stmt -> jump_stmt .)
    SWITCH          reduce using rule 214 (stmt -> jump_stmt .)
    WHILE           reduce using rule 214 (stmt -> jump_stmt .)
    DO              reduce using rule 214 (stmt -> jump_stmt .)
    FOR             reduce using rule 214 (stmt -> jump_stmt .)
    GOTO            reduce using rule 214 (stmt -> jump_stmt .)
    CONTINUE        reduce using rule 214 (stmt -> jump_stmt .)
    BREAK           reduce using rule 214 (stmt -> jump_stmt .)
    RETURN          reduce using rule 214 (stmt -> jump_stmt .)
    TYPEDEF         reduce using rule 214 (stmt -> jump_stmt .)
    EXTERN          reduce using rule 214 (stmt -> jump_stmt .)
    STATIC          reduce using rule 214 (stmt -> jump_stmt .)
    AUTO            reduce using rule 214 (stmt -> jump_stmt .)
    REGISTER        reduce using rule 214 (stmt -> jump_stmt .)
    VOID            reduce using rule 214 (stmt -> jump_stmt .)
    CHAR            reduce using rule 214 (stmt -> jump_stmt .)
    SHORT           reduce using rule 214 (stmt -> jump_stmt .)
    INT             reduce using rule 214 (stmt -> jump_stmt .)
    LONG            reduce using rule 214 (stmt -> jump_stmt .)
    FLOAT           reduce using rule 214 (stmt -> jump_stmt .)
    DOUBLE          reduce using rule 214 (stmt -> jump_stmt .)
    SIGNED          reduce using rule 214 (stmt -> jump_stmt .)
    UNSIGNED        reduce using rule 214 (stmt -> jump_stmt .)
    BOOL            reduce using rule 214 (stmt -> jump_stmt .)
    CONST           reduce using rule 214 (stmt -> jump_stmt .)
    RESTRICT        reduce using rule 214 (stmt -> jump_stmt .)
    VOLATILE        reduce using rule 214 (stmt -> jump_stmt .)
    INLINE          reduce using rule 214 (stmt -> jump_stmt .)
    ENUM            reduce using rule 214 (stmt -> jump_stmt .)
    STRUCT          reduce using rule 214 (stmt -> jump_stmt .)
    UNION           reduce using rule 214 (stmt -> jump_stmt .)
    INC_OP          reduce using rule 214 (stmt -> jump_stmt .)
    DEC_OP          reduce using rule 214 (stmt -> jump_stmt .)
    SIZEOF          reduce using rule 214 (stmt -> jump_stmt .)
    (               reduce using rule 214 (stmt -> jump_stmt .)
    &               reduce using rule 214 (stmt -> jump_stmt .)
    *               reduce using rule 214 (stmt -> jump_stmt .)
    +               reduce using rule 214 (stmt -> jump_stmt .)
    -               reduce using rule 214 (stmt -> jump_stmt .)
    ~               reduce using rule 214 (stmt -> jump_stmt .)
    !               reduce using rule 214 (stmt -> jump_stmt .)
    CONSTANT        reduce using rule 214 (stmt -> jump_stmt .)
    STRING_LITERAL  reduce using rule 214 (stmt -> jump_stmt .)
    ELSE            reduce using rule 214 (stmt -> jump_stmt .)


state 125

    (215) labeled_stmt -> IDENTIFIER . : stmt
    (157) prim_expr -> IDENTIFIER .

    :               shift and go to state 223
    [               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    (               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    .               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    PTR_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    INC_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    DEC_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    =               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 157 (prim_expr -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 157 (prim_expr -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 157 (prim_expr -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 157 (prim_expr -> IDENTIFIER .)
    *               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    /               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    %               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    +               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    -               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    LEFT_OP         reduce using rule 157 (prim_expr -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 157 (prim_expr -> IDENTIFIER .)
    <               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    >               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    LE_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    GE_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    EQ_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    NE_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    &               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ^               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    |               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    AND_OP          reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ?               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    OR_OP           reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ;               reduce using rule 157 (prim_expr -> IDENTIFIER .)
    ,               reduce using rule 157 (prim_expr -> IDENTIFIER .)


state 126

    (216) labeled_stmt -> CASE . const_expr : stmt
    (102) const_expr -> . cond_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    const_expr                     shift and go to state 224
    cond_expr                      shift and go to state 225
    log_or_expr                    shift and go to state 86
    log_and_expr                   shift and go to state 94
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 127

    (217) labeled_stmt -> DEFAULT . : stmt

    :               shift and go to state 226


state 128

    (219) expr_stmt -> expr . ;
    (162) expr -> expr . , assign_expr

    ;               shift and go to state 227
    ,               shift and go to state 228


state 129

    (220) sel_stmt -> IF . ( expr ) stmt ELSE stmt
    (221) sel_stmt -> IF . ( expr ) stmt

    (               shift and go to state 229


state 130

    (222) sel_stmt -> SWITCH . ( expr ) stmt

    (               shift and go to state 230


state 131

    (223) iter_stmt -> WHILE . ( expr ) stmt

    (               shift and go to state 231


state 132

    (224) iter_stmt -> DO . stmt WHILE ( expr ) ;
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    stmt                           shift and go to state 232
    expr                           shift and go to state 128
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 133

    (225) iter_stmt -> FOR . ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> FOR . ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> FOR . ( decl expr_stmt ) stmt
    (228) iter_stmt -> FOR . ( decl expr_stmt expr ) stmt

    (               shift and go to state 233


state 134

    (229) jump_stmt -> GOTO . IDENTIFIER ;

    IDENTIFIER      shift and go to state 234


state 135

    (230) jump_stmt -> CONTINUE . ;

    ;               shift and go to state 235


state 136

    (231) jump_stmt -> BREAK . ;

    ;               shift and go to state 236


state 137

    (232) jump_stmt -> RETURN . ;
    (233) jump_stmt -> RETURN . expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ;               shift and go to state 237
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 238
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 138

    (161) expr -> assign_expr .

    ;               reduce using rule 161 (expr -> assign_expr .)
    ,               reduce using rule 161 (expr -> assign_expr .)
    )               reduce using rule 161 (expr -> assign_expr .)
    :               reduce using rule 161 (expr -> assign_expr .)
    ]               reduce using rule 161 (expr -> assign_expr .)


state 139

    (8) init_decl_list -> init_decl_list , init_decl .

    ;               reduce using rule 8 (init_decl_list -> init_decl_list , init_decl .)
    ,               reduce using rule 8 (init_decl_list -> init_decl_list , init_decl .)


state 140

    (76) direct_declr -> direct_declr [ type_qual_list . assign_expr ]
    (77) direct_declr -> direct_declr [ type_qual_list . ]
    (80) direct_declr -> direct_declr [ type_qual_list . STATIC assign_expr ]
    (81) direct_declr -> direct_declr [ type_qual_list . * ]
    (73) type_qual_list -> type_qual_list . type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ]               shift and go to state 240
    STATIC          shift and go to state 241
    *               shift and go to state 242
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 239
    type_qual                      shift and go to state 153
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 141

    (78) direct_declr -> direct_declr [ assign_expr . ]

    ]               shift and go to state 243


state 142

    (83) direct_declr -> direct_declr [ ] .

    [               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    (               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    =               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    {               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    TYPEDEF         reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    EXTERN          reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    STATIC          reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    AUTO            reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    REGISTER        reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    VOID            reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    CHAR            reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    SHORT           reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    INT             reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    LONG            reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    FLOAT           reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    DOUBLE          reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    SIGNED          reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    UNSIGNED        reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    BOOL            reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    CONST           reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    RESTRICT        reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    VOLATILE        reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    INLINE          reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    ENUM            reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    STRUCT          reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    UNION           reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    ;               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    ,               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    )               reduce using rule 83 (direct_declr -> direct_declr [ ] .)
    :               reduce using rule 83 (direct_declr -> direct_declr [ ] .)


state 143

    (79) direct_declr -> direct_declr [ STATIC . type_qual_list assign_expr ]
    (72) type_qual_list -> . type_qual
    (73) type_qual_list -> . type_qual_list type_qual
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qual_list                 shift and go to state 244
    type_qual                      shift and go to state 66

state 144

    (82) direct_declr -> direct_declr [ * . ]
    (142) unary_op -> * .

    ]               shift and go to state 245
    (               reduce using rule 142 (unary_op -> * .)
    INC_OP          reduce using rule 142 (unary_op -> * .)
    DEC_OP          reduce using rule 142 (unary_op -> * .)
    SIZEOF          reduce using rule 142 (unary_op -> * .)
    &               reduce using rule 142 (unary_op -> * .)
    *               reduce using rule 142 (unary_op -> * .)
    +               reduce using rule 142 (unary_op -> * .)
    -               reduce using rule 142 (unary_op -> * .)
    ~               reduce using rule 142 (unary_op -> * .)
    !               reduce using rule 142 (unary_op -> * .)
    IDENTIFIER      reduce using rule 142 (unary_op -> * .)
    CONSTANT        reduce using rule 142 (unary_op -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_op -> * .)


state 145

    (84) direct_declr -> direct_declr ( param_type_list . )

    )               shift and go to state 246


state 146

    (86) direct_declr -> direct_declr ( ) .

    [               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    (               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    =               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    {               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    TYPEDEF         reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    EXTERN          reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    STATIC          reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    AUTO            reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    REGISTER        reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    VOID            reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    CHAR            reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    SHORT           reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    INT             reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    LONG            reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    FLOAT           reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    DOUBLE          reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    SIGNED          reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    UNSIGNED        reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    BOOL            reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    CONST           reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    RESTRICT        reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    VOLATILE        reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    INLINE          reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    ENUM            reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    STRUCT          reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    UNION           reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    ;               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    ,               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    )               reduce using rule 86 (direct_declr -> direct_declr ( ) .)
    :               reduce using rule 86 (direct_declr -> direct_declr ( ) .)


state 147

    (85) direct_declr -> direct_declr ( id_list . )
    (88) id_list -> id_list . , IDENTIFIER

    )               shift and go to state 247
    ,               shift and go to state 248


state 148

    (179) param_type_list -> param_list .
    (180) param_type_list -> param_list . , ELLIPSIS
    (182) param_list -> param_list . , param_decl

    )               reduce using rule 179 (param_type_list -> param_list .)
    ,               shift and go to state 249


state 149

    (87) id_list -> IDENTIFIER .

    )               reduce using rule 87 (id_list -> IDENTIFIER .)
    ,               reduce using rule 87 (id_list -> IDENTIFIER .)


state 150

    (181) param_list -> param_decl .

    ,               reduce using rule 181 (param_list -> param_decl .)
    )               reduce using rule 181 (param_list -> param_decl .)


state 151

    (183) param_decl -> decl_specs . declr
    (184) param_decl -> decl_specs . abs_declr
    (185) param_decl -> decl_specs .
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (165) abs_declr -> . ptr
    (166) abs_declr -> . direct_abs_declr
    (167) abs_declr -> . ptr direct_abs_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )
    (168) direct_abs_declr -> . ( abs_declr )
    (169) direct_abs_declr -> . [ ]
    (170) direct_abs_declr -> . [ assign_expr ]
    (171) direct_abs_declr -> . direct_abs_declr [ ]
    (172) direct_abs_declr -> . direct_abs_declr [ assign_expr ]
    (173) direct_abs_declr -> . [ * ]
    (174) direct_abs_declr -> . direct_abs_declr [ * ]
    (175) direct_abs_declr -> . ( )
    (176) direct_abs_declr -> . ( param_type_list )
    (177) direct_abs_declr -> . direct_abs_declr ( )
    (178) direct_abs_declr -> . direct_abs_declr ( param_type_list )

    ,               reduce using rule 185 (param_decl -> decl_specs .)
    )               reduce using rule 185 (param_decl -> decl_specs .)
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 254
    [               shift and go to state 255

    declr                          shift and go to state 250
    abs_declr                      shift and go to state 251
    ptr                            shift and go to state 252
    direct_declr                   shift and go to state 40
    direct_abs_declr               shift and go to state 253

state 152

    (71) ptr -> * type_qual_list ptr .

    IDENTIFIER      reduce using rule 71 (ptr -> * type_qual_list ptr .)
    (               reduce using rule 71 (ptr -> * type_qual_list ptr .)
    [               reduce using rule 71 (ptr -> * type_qual_list ptr .)
    ,               reduce using rule 71 (ptr -> * type_qual_list ptr .)
    )               reduce using rule 71 (ptr -> * type_qual_list ptr .)


state 153

    (73) type_qual_list -> type_qual_list type_qual .

    *               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    CONST           reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    RESTRICT        reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    VOLATILE        reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    IDENTIFIER      reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    (               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    [               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    ,               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    )               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    ]               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    STATIC          reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    INC_OP          reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    DEC_OP          reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    SIZEOF          reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    &               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    +               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    -               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    ~               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    !               reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    CONSTANT        reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)
    STRING_LITERAL  reduce using rule 73 (type_qual_list -> type_qual_list type_qual .)


state 154

    (75) direct_declr -> ( declr ) .

    [               reduce using rule 75 (direct_declr -> ( declr ) .)
    (               reduce using rule 75 (direct_declr -> ( declr ) .)
    =               reduce using rule 75 (direct_declr -> ( declr ) .)
    {               reduce using rule 75 (direct_declr -> ( declr ) .)
    TYPEDEF         reduce using rule 75 (direct_declr -> ( declr ) .)
    EXTERN          reduce using rule 75 (direct_declr -> ( declr ) .)
    STATIC          reduce using rule 75 (direct_declr -> ( declr ) .)
    AUTO            reduce using rule 75 (direct_declr -> ( declr ) .)
    REGISTER        reduce using rule 75 (direct_declr -> ( declr ) .)
    VOID            reduce using rule 75 (direct_declr -> ( declr ) .)
    CHAR            reduce using rule 75 (direct_declr -> ( declr ) .)
    SHORT           reduce using rule 75 (direct_declr -> ( declr ) .)
    INT             reduce using rule 75 (direct_declr -> ( declr ) .)
    LONG            reduce using rule 75 (direct_declr -> ( declr ) .)
    FLOAT           reduce using rule 75 (direct_declr -> ( declr ) .)
    DOUBLE          reduce using rule 75 (direct_declr -> ( declr ) .)
    SIGNED          reduce using rule 75 (direct_declr -> ( declr ) .)
    UNSIGNED        reduce using rule 75 (direct_declr -> ( declr ) .)
    BOOL            reduce using rule 75 (direct_declr -> ( declr ) .)
    CONST           reduce using rule 75 (direct_declr -> ( declr ) .)
    RESTRICT        reduce using rule 75 (direct_declr -> ( declr ) .)
    VOLATILE        reduce using rule 75 (direct_declr -> ( declr ) .)
    INLINE          reduce using rule 75 (direct_declr -> ( declr ) .)
    ENUM            reduce using rule 75 (direct_declr -> ( declr ) .)
    STRUCT          reduce using rule 75 (direct_declr -> ( declr ) .)
    UNION           reduce using rule 75 (direct_declr -> ( declr ) .)
    ;               reduce using rule 75 (direct_declr -> ( declr ) .)
    ,               reduce using rule 75 (direct_declr -> ( declr ) .)
    )               reduce using rule 75 (direct_declr -> ( declr ) .)
    :               reduce using rule 75 (direct_declr -> ( declr ) .)


state 155

    (49) struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list . }
    (55) struct_decl_list -> struct_decl_list . struct_decl
    (56) struct_decl -> . spec_qual_list struct_declr_list ;
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    }               shift and go to state 256
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_decl                    shift and go to state 157
    spec_qual_list                 shift and go to state 71
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26

state 156

    (50) struct_or_union_spec -> struct_or_union { struct_decl_list } .

    TYPEDEF         reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    EXTERN          reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    STATIC          reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    AUTO            reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    REGISTER        reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    VOID            reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    CHAR            reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    SHORT           reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    INT             reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    LONG            reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    FLOAT           reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    DOUBLE          reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    SIGNED          reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    UNSIGNED        reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    BOOL            reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    CONST           reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    RESTRICT        reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    VOLATILE        reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    INLINE          reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    ENUM            reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    STRUCT          reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    UNION           reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    ;               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    *               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    IDENTIFIER      reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    (               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    [               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    ,               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    )               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)
    :               reduce using rule 50 (struct_or_union_spec -> struct_or_union { struct_decl_list } .)


state 157

    (55) struct_decl_list -> struct_decl_list struct_decl .

    }               reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    VOID            reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    CHAR            reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    SHORT           reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    INT             reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    LONG            reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    FLOAT           reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    DOUBLE          reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    SIGNED          reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    UNSIGNED        reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    BOOL            reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    CONST           reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    RESTRICT        reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    VOLATILE        reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    ENUM            reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    STRUCT          reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)
    UNION           reduce using rule 55 (struct_decl_list -> struct_decl_list struct_decl .)


state 158

    (56) struct_decl -> spec_qual_list struct_declr_list . ;
    (62) struct_declr_list -> struct_declr_list . , struct_declr

    ;               shift and go to state 257
    ,               shift and go to state 258


state 159

    (61) struct_declr_list -> struct_declr .

    ;               reduce using rule 61 (struct_declr_list -> struct_declr .)
    ,               reduce using rule 61 (struct_declr_list -> struct_declr .)


state 160

    (63) struct_declr -> declr .
    (65) struct_declr -> declr . : const_expr

    ;               reduce using rule 63 (struct_declr -> declr .)
    ,               reduce using rule 63 (struct_declr -> declr .)
    :               shift and go to state 259


state 161

    (64) struct_declr -> : . const_expr
    (102) const_expr -> . cond_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    const_expr                     shift and go to state 260
    cond_expr                      shift and go to state 225
    log_or_expr                    shift and go to state 86
    log_and_expr                   shift and go to state 94
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 162

    (57) spec_qual_list -> type_spec spec_qual_list .

    :               reduce using rule 57 (spec_qual_list -> type_spec spec_qual_list .)
    *               reduce using rule 57 (spec_qual_list -> type_spec spec_qual_list .)
    IDENTIFIER      reduce using rule 57 (spec_qual_list -> type_spec spec_qual_list .)
    (               reduce using rule 57 (spec_qual_list -> type_spec spec_qual_list .)
    [               reduce using rule 57 (spec_qual_list -> type_spec spec_qual_list .)
    )               reduce using rule 57 (spec_qual_list -> type_spec spec_qual_list .)


state 163

    (59) spec_qual_list -> type_qual spec_qual_list .

    :               reduce using rule 59 (spec_qual_list -> type_qual spec_qual_list .)
    *               reduce using rule 59 (spec_qual_list -> type_qual spec_qual_list .)
    IDENTIFIER      reduce using rule 59 (spec_qual_list -> type_qual spec_qual_list .)
    (               reduce using rule 59 (spec_qual_list -> type_qual spec_qual_list .)
    [               reduce using rule 59 (spec_qual_list -> type_qual spec_qual_list .)
    )               reduce using rule 59 (spec_qual_list -> type_qual spec_qual_list .)


state 164

    (40) enum_spec -> ENUM { enum_list } .

    TYPEDEF         reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    EXTERN          reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    STATIC          reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    AUTO            reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    REGISTER        reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    VOID            reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    CHAR            reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    SHORT           reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    INT             reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    LONG            reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    FLOAT           reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    DOUBLE          reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    SIGNED          reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    UNSIGNED        reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    BOOL            reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    CONST           reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    RESTRICT        reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    VOLATILE        reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    INLINE          reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    ENUM            reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    STRUCT          reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    UNION           reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    ;               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    *               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    IDENTIFIER      reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    (               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    [               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    ,               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    )               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)
    :               reduce using rule 40 (enum_spec -> ENUM { enum_list } .)


state 165

    (42) enum_spec -> ENUM { enum_list , . }
    (46) enum_list -> enum_list , . enum
    (47) enum -> . IDENTIFIER
    (48) enum -> . IDENTIFIER = const_expr

    }               shift and go to state 261
    IDENTIFIER      shift and go to state 76

    enum                           shift and go to state 262

state 166

    (48) enum -> IDENTIFIER = . const_expr
    (102) const_expr -> . cond_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    const_expr                     shift and go to state 263
    cond_expr                      shift and go to state 225
    log_or_expr                    shift and go to state 86
    log_and_expr                   shift and go to state 94
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 167

    (41) enum_spec -> ENUM IDENTIFIER { enum_list . }
    (43) enum_spec -> ENUM IDENTIFIER { enum_list . , }
    (46) enum_list -> enum_list . , enum

    }               shift and go to state 264
    ,               shift and go to state 265


state 168

    (193) init -> { init_list . }
    (194) init -> { init_list . , }
    (190) init_list -> init_list . , init
    (191) init_list -> init_list . , desig init

    }               shift and go to state 266
    ,               shift and go to state 267


state 169

    (188) init_list -> init .

    }               reduce using rule 188 (init_list -> init .)
    ,               reduce using rule 188 (init_list -> init .)


state 170

    (189) init_list -> desig . init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init                           shift and go to state 268
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 171

    (197) desig -> [ . const_expr ]
    (102) const_expr -> . cond_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    const_expr                     shift and go to state 269
    cond_expr                      shift and go to state 225
    log_or_expr                    shift and go to state 86
    log_and_expr                   shift and go to state 94
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 172

    (198) desig -> . . IDENTIFIER

    IDENTIFIER      shift and go to state 270


state 173

    (90) assign_expr -> unary_expr assign_op . assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expr                     shift and go to state 85
    assign_expr                    shift and go to state 271
    cond_expr                      shift and go to state 84
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 174

    (91) assign_op -> = .

    INC_OP          reduce using rule 91 (assign_op -> = .)
    DEC_OP          reduce using rule 91 (assign_op -> = .)
    SIZEOF          reduce using rule 91 (assign_op -> = .)
    (               reduce using rule 91 (assign_op -> = .)
    &               reduce using rule 91 (assign_op -> = .)
    *               reduce using rule 91 (assign_op -> = .)
    +               reduce using rule 91 (assign_op -> = .)
    -               reduce using rule 91 (assign_op -> = .)
    ~               reduce using rule 91 (assign_op -> = .)
    !               reduce using rule 91 (assign_op -> = .)
    IDENTIFIER      reduce using rule 91 (assign_op -> = .)
    CONSTANT        reduce using rule 91 (assign_op -> = .)
    STRING_LITERAL  reduce using rule 91 (assign_op -> = .)


state 175

    (92) assign_op -> MUL_ASSIGN .

    INC_OP          reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    (               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    &               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    *               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    +               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    -               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    ~               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    !               reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 92 (assign_op -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 92 (assign_op -> MUL_ASSIGN .)


state 176

    (93) assign_op -> DIV_ASSIGN .

    INC_OP          reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    (               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    &               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    *               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    +               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    -               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    ~               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    !               reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 93 (assign_op -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 93 (assign_op -> DIV_ASSIGN .)


state 177

    (94) assign_op -> MOD_ASSIGN .

    INC_OP          reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    (               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    &               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    *               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    +               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    -               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    ~               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    !               reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 94 (assign_op -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 94 (assign_op -> MOD_ASSIGN .)


state 178

    (95) assign_op -> ADD_ASSIGN .

    INC_OP          reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    (               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    &               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    *               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    +               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    -               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    ~               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    !               reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 95 (assign_op -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 95 (assign_op -> ADD_ASSIGN .)


state 179

    (96) assign_op -> SUB_ASSIGN .

    INC_OP          reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    (               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    &               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    *               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    +               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    -               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    ~               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    !               reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 96 (assign_op -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 96 (assign_op -> SUB_ASSIGN .)


state 180

    (97) assign_op -> LEFT_ASSIGN .

    INC_OP          reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    (               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    &               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    *               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    +               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    -               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    ~               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    !               reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 97 (assign_op -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 97 (assign_op -> LEFT_ASSIGN .)


state 181

    (98) assign_op -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    (               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    &               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    *               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    +               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    -               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    ~               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    !               reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 98 (assign_op -> RIGHT_ASSIGN .)


state 182

    (99) assign_op -> AND_ASSIGN .

    INC_OP          reduce using rule 99 (assign_op -> AND_ASSIGN .)
    DEC_OP          reduce using rule 99 (assign_op -> AND_ASSIGN .)
    SIZEOF          reduce using rule 99 (assign_op -> AND_ASSIGN .)
    (               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    &               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    *               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    +               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    -               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    ~               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    !               reduce using rule 99 (assign_op -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 99 (assign_op -> AND_ASSIGN .)
    CONSTANT        reduce using rule 99 (assign_op -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 99 (assign_op -> AND_ASSIGN .)


state 183

    (100) assign_op -> XOR_ASSIGN .

    INC_OP          reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    (               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    &               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    *               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    +               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    -               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    ~               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    !               reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 100 (assign_op -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 100 (assign_op -> XOR_ASSIGN .)


state 184

    (101) assign_op -> OR_ASSIGN .

    INC_OP          reduce using rule 101 (assign_op -> OR_ASSIGN .)
    DEC_OP          reduce using rule 101 (assign_op -> OR_ASSIGN .)
    SIZEOF          reduce using rule 101 (assign_op -> OR_ASSIGN .)
    (               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    &               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    *               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    +               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    -               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    ~               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    !               reduce using rule 101 (assign_op -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 101 (assign_op -> OR_ASSIGN .)
    CONSTANT        reduce using rule 101 (assign_op -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 101 (assign_op -> OR_ASSIGN .)


state 185

    (104) cond_expr -> log_or_expr ? . expr : cond_expr
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    log_or_expr                    shift and go to state 86
    expr                           shift and go to state 272
    cond_expr                      shift and go to state 84
    assign_expr                    shift and go to state 138
    unary_expr                     shift and go to state 85
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 186

    (106) log_or_expr -> log_or_expr OR_OP . log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    log_and_expr                   shift and go to state 273
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 187

    (148) post_expr -> post_expr [ . expr ]
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    post_expr                      shift and go to state 87
    expr                           shift and go to state 274
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 188

    (149) post_expr -> post_expr ( . )
    (150) post_expr -> post_expr ( . arg_expr_list )
    (186) arg_expr_list -> . assign_expr
    (187) arg_expr_list -> . arg_expr_list , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    )               shift and go to state 275
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    post_expr                      shift and go to state 87
    arg_expr_list                  shift and go to state 276
    assign_expr                    shift and go to state 277
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 189

    (151) post_expr -> post_expr . . IDENTIFIER

    IDENTIFIER      shift and go to state 278


state 190

    (152) post_expr -> post_expr PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 279


state 191

    (153) post_expr -> post_expr INC_OP .

    [               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    (               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    .               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    PTR_OP          reduce using rule 153 (post_expr -> post_expr INC_OP .)
    INC_OP          reduce using rule 153 (post_expr -> post_expr INC_OP .)
    DEC_OP          reduce using rule 153 (post_expr -> post_expr INC_OP .)
    =               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    MUL_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    DIV_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    MOD_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    ADD_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    SUB_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    LEFT_ASSIGN     reduce using rule 153 (post_expr -> post_expr INC_OP .)
    RIGHT_ASSIGN    reduce using rule 153 (post_expr -> post_expr INC_OP .)
    AND_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    XOR_ASSIGN      reduce using rule 153 (post_expr -> post_expr INC_OP .)
    OR_ASSIGN       reduce using rule 153 (post_expr -> post_expr INC_OP .)
    *               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    /               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    %               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    +               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    -               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    LEFT_OP         reduce using rule 153 (post_expr -> post_expr INC_OP .)
    RIGHT_OP        reduce using rule 153 (post_expr -> post_expr INC_OP .)
    <               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    >               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    LE_OP           reduce using rule 153 (post_expr -> post_expr INC_OP .)
    GE_OP           reduce using rule 153 (post_expr -> post_expr INC_OP .)
    EQ_OP           reduce using rule 153 (post_expr -> post_expr INC_OP .)
    NE_OP           reduce using rule 153 (post_expr -> post_expr INC_OP .)
    &               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    ^               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    |               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    AND_OP          reduce using rule 153 (post_expr -> post_expr INC_OP .)
    ?               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    OR_OP           reduce using rule 153 (post_expr -> post_expr INC_OP .)
    ;               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    ,               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    ]               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    }               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    )               reduce using rule 153 (post_expr -> post_expr INC_OP .)
    :               reduce using rule 153 (post_expr -> post_expr INC_OP .)


state 192

    (154) post_expr -> post_expr DEC_OP .

    [               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    (               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    .               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    PTR_OP          reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    INC_OP          reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    DEC_OP          reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    =               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    MUL_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    DIV_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    MOD_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    ADD_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    SUB_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    LEFT_ASSIGN     reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    AND_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    XOR_ASSIGN      reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    OR_ASSIGN       reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    *               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    /               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    %               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    +               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    -               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    LEFT_OP         reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    RIGHT_OP        reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    <               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    >               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    LE_OP           reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    GE_OP           reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    EQ_OP           reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    NE_OP           reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    &               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    ^               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    |               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    AND_OP          reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    ?               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    OR_OP           reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    ;               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    ,               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    ]               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    }               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    )               reduce using rule 154 (post_expr -> post_expr DEC_OP .)
    :               reduce using rule 154 (post_expr -> post_expr DEC_OP .)


state 193

    (136) unary_expr -> INC_OP unary_expr .

    =               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    MUL_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    DIV_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    MOD_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    ADD_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    SUB_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    LEFT_ASSIGN     reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    RIGHT_ASSIGN    reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    AND_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    XOR_ASSIGN      reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    OR_ASSIGN       reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    *               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    /               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    %               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    +               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    -               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    LEFT_OP         reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    RIGHT_OP        reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    <               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    >               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    LE_OP           reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    GE_OP           reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    EQ_OP           reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    NE_OP           reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    &               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    ^               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    |               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    AND_OP          reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    ?               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    OR_OP           reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    ;               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    ,               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    ]               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    }               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    )               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)
    :               reduce using rule 136 (unary_expr -> INC_OP unary_expr .)


state 194

    (155) post_expr -> ( . type_name ) { init_list }
    (156) post_expr -> ( . type_name ) { init_list , }
    (160) prim_expr -> ( . expr )
    (163) type_name -> . spec_qual_list
    (164) type_name -> . spec_qual_list abs_declr
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 280
    expr                           shift and go to state 202
    spec_qual_list                 shift and go to state 203
    assign_expr                    shift and go to state 138
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    struct_or_union                shift and go to state 31
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 195

    (137) unary_expr -> DEC_OP unary_expr .

    =               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    MUL_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    DIV_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    MOD_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    ADD_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    SUB_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    LEFT_ASSIGN     reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    RIGHT_ASSIGN    reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    AND_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    XOR_ASSIGN      reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    OR_ASSIGN       reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    *               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    /               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    %               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    +               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    -               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    LEFT_OP         reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    RIGHT_OP        reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    <               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    >               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    LE_OP           reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    GE_OP           reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    EQ_OP           reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    NE_OP           reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    &               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    ^               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    |               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    AND_OP          reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    ?               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    OR_OP           reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    ;               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    ,               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    ]               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    }               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    )               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)
    :               reduce using rule 137 (unary_expr -> DEC_OP unary_expr .)


state 196

    (138) unary_expr -> unary_op cast_expr .

    =               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    MUL_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    DIV_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    MOD_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    ADD_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    SUB_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    LEFT_ASSIGN     reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    RIGHT_ASSIGN    reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    AND_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    XOR_ASSIGN      reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    OR_ASSIGN       reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    *               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    /               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    %               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    +               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    -               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    LEFT_OP         reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    RIGHT_OP        reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    <               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    >               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    LE_OP           reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    GE_OP           reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    EQ_OP           reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    NE_OP           reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    &               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    ^               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    |               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    AND_OP          reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    ?               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    OR_OP           reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    ;               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    ,               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    ]               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    }               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    )               reduce using rule 138 (unary_expr -> unary_op cast_expr .)
    :               reduce using rule 138 (unary_expr -> unary_op cast_expr .)


state 197

    (133) cast_expr -> unary_expr .

    =               reduce using rule 133 (cast_expr -> unary_expr .)
    MUL_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    DIV_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    MOD_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    ADD_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    SUB_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    LEFT_ASSIGN     reduce using rule 133 (cast_expr -> unary_expr .)
    RIGHT_ASSIGN    reduce using rule 133 (cast_expr -> unary_expr .)
    AND_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    XOR_ASSIGN      reduce using rule 133 (cast_expr -> unary_expr .)
    OR_ASSIGN       reduce using rule 133 (cast_expr -> unary_expr .)
    *               reduce using rule 133 (cast_expr -> unary_expr .)
    /               reduce using rule 133 (cast_expr -> unary_expr .)
    %               reduce using rule 133 (cast_expr -> unary_expr .)
    +               reduce using rule 133 (cast_expr -> unary_expr .)
    -               reduce using rule 133 (cast_expr -> unary_expr .)
    LEFT_OP         reduce using rule 133 (cast_expr -> unary_expr .)
    RIGHT_OP        reduce using rule 133 (cast_expr -> unary_expr .)
    <               reduce using rule 133 (cast_expr -> unary_expr .)
    >               reduce using rule 133 (cast_expr -> unary_expr .)
    LE_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    GE_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    EQ_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    NE_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    &               reduce using rule 133 (cast_expr -> unary_expr .)
    ^               reduce using rule 133 (cast_expr -> unary_expr .)
    |               reduce using rule 133 (cast_expr -> unary_expr .)
    AND_OP          reduce using rule 133 (cast_expr -> unary_expr .)
    ?               reduce using rule 133 (cast_expr -> unary_expr .)
    OR_OP           reduce using rule 133 (cast_expr -> unary_expr .)
    ;               reduce using rule 133 (cast_expr -> unary_expr .)
    ,               reduce using rule 133 (cast_expr -> unary_expr .)
    ]               reduce using rule 133 (cast_expr -> unary_expr .)
    }               reduce using rule 133 (cast_expr -> unary_expr .)
    )               reduce using rule 133 (cast_expr -> unary_expr .)
    :               reduce using rule 133 (cast_expr -> unary_expr .)


state 198

    (134) cast_expr -> ( . type_name ) cast_expr
    (155) post_expr -> ( . type_name ) { init_list }
    (156) post_expr -> ( . type_name ) { init_list , }
    (160) prim_expr -> ( . expr )
    (163) type_name -> . spec_qual_list
    (164) type_name -> . spec_qual_list abs_declr
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 281
    cast_expr                      shift and go to state 91
    expr                           shift and go to state 202
    spec_qual_list                 shift and go to state 203
    assign_expr                    shift and go to state 138
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    struct_or_union                shift and go to state 31
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 199

    (139) unary_expr -> SIZEOF unary_expr .

    =               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    MUL_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    DIV_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    MOD_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    ADD_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    SUB_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    LEFT_ASSIGN     reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    RIGHT_ASSIGN    reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    AND_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    XOR_ASSIGN      reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    OR_ASSIGN       reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    *               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    /               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    %               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    +               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    -               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    LEFT_OP         reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    RIGHT_OP        reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    <               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    >               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    LE_OP           reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    GE_OP           reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    EQ_OP           reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    NE_OP           reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    &               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    ^               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    |               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    AND_OP          reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    ?               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    OR_OP           reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    ;               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    ,               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    ]               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    }               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    )               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)
    :               reduce using rule 139 (unary_expr -> SIZEOF unary_expr .)


state 200

    (140) unary_expr -> SIZEOF ( . type_name )
    (155) post_expr -> ( . type_name ) { init_list }
    (156) post_expr -> ( . type_name ) { init_list , }
    (160) prim_expr -> ( . expr )
    (163) type_name -> . spec_qual_list
    (164) type_name -> . spec_qual_list abs_declr
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (57) spec_qual_list -> . type_spec spec_qual_list
    (58) spec_qual_list -> . type_spec
    (59) spec_qual_list -> . type_qual spec_qual_list
    (60) spec_qual_list -> . type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 282
    expr                           shift and go to state 202
    spec_qual_list                 shift and go to state 203
    assign_expr                    shift and go to state 138
    type_spec                      shift and go to state 72
    type_qual                      shift and go to state 73
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    struct_or_union                shift and go to state 31
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 201

    (155) post_expr -> ( type_name . ) { init_list }
    (156) post_expr -> ( type_name . ) { init_list , }
    (134) cast_expr -> ( type_name . ) cast_expr

    )               shift and go to state 283


state 202

    (160) prim_expr -> ( expr . )
    (162) expr -> expr . , assign_expr

    )               shift and go to state 284
    ,               shift and go to state 228


state 203

    (163) type_name -> spec_qual_list .
    (164) type_name -> spec_qual_list . abs_declr
    (165) abs_declr -> . ptr
    (166) abs_declr -> . direct_abs_declr
    (167) abs_declr -> . ptr direct_abs_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (168) direct_abs_declr -> . ( abs_declr )
    (169) direct_abs_declr -> . [ ]
    (170) direct_abs_declr -> . [ assign_expr ]
    (171) direct_abs_declr -> . direct_abs_declr [ ]
    (172) direct_abs_declr -> . direct_abs_declr [ assign_expr ]
    (173) direct_abs_declr -> . [ * ]
    (174) direct_abs_declr -> . direct_abs_declr [ * ]
    (175) direct_abs_declr -> . ( )
    (176) direct_abs_declr -> . ( param_type_list )
    (177) direct_abs_declr -> . direct_abs_declr ( )
    (178) direct_abs_declr -> . direct_abs_declr ( param_type_list )

    )               reduce using rule 163 (type_name -> spec_qual_list .)
    *               shift and go to state 42
    (               shift and go to state 287
    [               shift and go to state 255

    abs_declr                      shift and go to state 285
    ptr                            shift and go to state 286
    direct_abs_declr               shift and go to state 253

state 204

    (108) log_and_expr -> log_and_expr AND_OP . incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    incl_or_expr                   shift and go to state 288
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 205

    (110) incl_or_expr -> incl_or_expr | . excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    excl_or_expr                   shift and go to state 289
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 206

    (112) excl_or_expr -> excl_or_expr ^ . and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    and_expr                       shift and go to state 290
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 207

    (114) and_expr -> and_expr & . eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    eq_expr                        shift and go to state 291
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 208

    (116) eq_expr -> eq_expr EQ_OP . rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    rel_expr                       shift and go to state 292
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 209

    (117) eq_expr -> eq_expr NE_OP . rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    rel_expr                       shift and go to state 293
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 210

    (119) rel_expr -> rel_expr < . shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expr                     shift and go to state 294
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 211

    (120) rel_expr -> rel_expr > . shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expr                     shift and go to state 295
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 212

    (121) rel_expr -> rel_expr LE_OP . shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expr                     shift and go to state 296
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 213

    (122) rel_expr -> rel_expr GE_OP . shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expr                     shift and go to state 297
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 214

    (124) shift_expr -> shift_expr LEFT_OP . add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    add_expr                       shift and go to state 298
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 215

    (125) shift_expr -> shift_expr RIGHT_OP . add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    add_expr                       shift and go to state 299
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 216

    (127) add_expr -> add_expr + . mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    mult_expr                      shift and go to state 300
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 217

    (128) add_expr -> add_expr - . mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    mult_expr                      shift and go to state 301
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 218

    (130) mult_expr -> mult_expr * . cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expr                      shift and go to state 302
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 219

    (131) mult_expr -> mult_expr / . cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expr                      shift and go to state 303
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 220

    (132) mult_expr -> mult_expr % . cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expr                      shift and go to state 304
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 221

    (204) comp_stmt -> { block_item_list } .

    TYPEDEF         reduce using rule 204 (comp_stmt -> { block_item_list } .)
    EXTERN          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    STATIC          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    AUTO            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    REGISTER        reduce using rule 204 (comp_stmt -> { block_item_list } .)
    VOID            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    CHAR            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    SHORT           reduce using rule 204 (comp_stmt -> { block_item_list } .)
    INT             reduce using rule 204 (comp_stmt -> { block_item_list } .)
    LONG            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    FLOAT           reduce using rule 204 (comp_stmt -> { block_item_list } .)
    DOUBLE          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    SIGNED          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    UNSIGNED        reduce using rule 204 (comp_stmt -> { block_item_list } .)
    BOOL            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    CONST           reduce using rule 204 (comp_stmt -> { block_item_list } .)
    RESTRICT        reduce using rule 204 (comp_stmt -> { block_item_list } .)
    VOLATILE        reduce using rule 204 (comp_stmt -> { block_item_list } .)
    INLINE          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    ENUM            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    STRUCT          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    UNION           reduce using rule 204 (comp_stmt -> { block_item_list } .)
    $end            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    }               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    IDENTIFIER      reduce using rule 204 (comp_stmt -> { block_item_list } .)
    CASE            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    DEFAULT         reduce using rule 204 (comp_stmt -> { block_item_list } .)
    {               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    ;               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    IF              reduce using rule 204 (comp_stmt -> { block_item_list } .)
    SWITCH          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    WHILE           reduce using rule 204 (comp_stmt -> { block_item_list } .)
    DO              reduce using rule 204 (comp_stmt -> { block_item_list } .)
    FOR             reduce using rule 204 (comp_stmt -> { block_item_list } .)
    GOTO            reduce using rule 204 (comp_stmt -> { block_item_list } .)
    CONTINUE        reduce using rule 204 (comp_stmt -> { block_item_list } .)
    BREAK           reduce using rule 204 (comp_stmt -> { block_item_list } .)
    RETURN          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    INC_OP          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    DEC_OP          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    SIZEOF          reduce using rule 204 (comp_stmt -> { block_item_list } .)
    (               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    &               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    *               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    +               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    -               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    ~               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    !               reduce using rule 204 (comp_stmt -> { block_item_list } .)
    CONSTANT        reduce using rule 204 (comp_stmt -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 204 (comp_stmt -> { block_item_list } .)
    ELSE            reduce using rule 204 (comp_stmt -> { block_item_list } .)


state 222

    (206) block_item_list -> block_item_list block_item .

    }               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 206 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 206 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 206 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 206 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 206 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 206 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 206 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 206 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 206 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 206 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 206 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 206 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 206 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 206 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 206 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 206 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 206 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 206 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 206 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 206 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 206 (block_item_list -> block_item_list block_item .)
    CONSTANT        reduce using rule 206 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 206 (block_item_list -> block_item_list block_item .)


state 223

    (215) labeled_stmt -> IDENTIFIER : . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    stmt                           shift and go to state 305
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 224

    (216) labeled_stmt -> CASE const_expr . : stmt

    :               shift and go to state 306


state 225

    (102) const_expr -> cond_expr .

    :               reduce using rule 102 (const_expr -> cond_expr .)
    ;               reduce using rule 102 (const_expr -> cond_expr .)
    ,               reduce using rule 102 (const_expr -> cond_expr .)
    }               reduce using rule 102 (const_expr -> cond_expr .)
    ]               reduce using rule 102 (const_expr -> cond_expr .)


state 226

    (217) labeled_stmt -> DEFAULT : . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    stmt                           shift and go to state 307
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 227

    (219) expr_stmt -> expr ; .

    }               reduce using rule 219 (expr_stmt -> expr ; .)
    IDENTIFIER      reduce using rule 219 (expr_stmt -> expr ; .)
    CASE            reduce using rule 219 (expr_stmt -> expr ; .)
    DEFAULT         reduce using rule 219 (expr_stmt -> expr ; .)
    {               reduce using rule 219 (expr_stmt -> expr ; .)
    ;               reduce using rule 219 (expr_stmt -> expr ; .)
    IF              reduce using rule 219 (expr_stmt -> expr ; .)
    SWITCH          reduce using rule 219 (expr_stmt -> expr ; .)
    WHILE           reduce using rule 219 (expr_stmt -> expr ; .)
    DO              reduce using rule 219 (expr_stmt -> expr ; .)
    FOR             reduce using rule 219 (expr_stmt -> expr ; .)
    GOTO            reduce using rule 219 (expr_stmt -> expr ; .)
    CONTINUE        reduce using rule 219 (expr_stmt -> expr ; .)
    BREAK           reduce using rule 219 (expr_stmt -> expr ; .)
    RETURN          reduce using rule 219 (expr_stmt -> expr ; .)
    TYPEDEF         reduce using rule 219 (expr_stmt -> expr ; .)
    EXTERN          reduce using rule 219 (expr_stmt -> expr ; .)
    STATIC          reduce using rule 219 (expr_stmt -> expr ; .)
    AUTO            reduce using rule 219 (expr_stmt -> expr ; .)
    REGISTER        reduce using rule 219 (expr_stmt -> expr ; .)
    VOID            reduce using rule 219 (expr_stmt -> expr ; .)
    CHAR            reduce using rule 219 (expr_stmt -> expr ; .)
    SHORT           reduce using rule 219 (expr_stmt -> expr ; .)
    INT             reduce using rule 219 (expr_stmt -> expr ; .)
    LONG            reduce using rule 219 (expr_stmt -> expr ; .)
    FLOAT           reduce using rule 219 (expr_stmt -> expr ; .)
    DOUBLE          reduce using rule 219 (expr_stmt -> expr ; .)
    SIGNED          reduce using rule 219 (expr_stmt -> expr ; .)
    UNSIGNED        reduce using rule 219 (expr_stmt -> expr ; .)
    BOOL            reduce using rule 219 (expr_stmt -> expr ; .)
    CONST           reduce using rule 219 (expr_stmt -> expr ; .)
    RESTRICT        reduce using rule 219 (expr_stmt -> expr ; .)
    VOLATILE        reduce using rule 219 (expr_stmt -> expr ; .)
    INLINE          reduce using rule 219 (expr_stmt -> expr ; .)
    ENUM            reduce using rule 219 (expr_stmt -> expr ; .)
    STRUCT          reduce using rule 219 (expr_stmt -> expr ; .)
    UNION           reduce using rule 219 (expr_stmt -> expr ; .)
    INC_OP          reduce using rule 219 (expr_stmt -> expr ; .)
    DEC_OP          reduce using rule 219 (expr_stmt -> expr ; .)
    SIZEOF          reduce using rule 219 (expr_stmt -> expr ; .)
    (               reduce using rule 219 (expr_stmt -> expr ; .)
    &               reduce using rule 219 (expr_stmt -> expr ; .)
    *               reduce using rule 219 (expr_stmt -> expr ; .)
    +               reduce using rule 219 (expr_stmt -> expr ; .)
    -               reduce using rule 219 (expr_stmt -> expr ; .)
    ~               reduce using rule 219 (expr_stmt -> expr ; .)
    !               reduce using rule 219 (expr_stmt -> expr ; .)
    CONSTANT        reduce using rule 219 (expr_stmt -> expr ; .)
    STRING_LITERAL  reduce using rule 219 (expr_stmt -> expr ; .)
    ELSE            reduce using rule 219 (expr_stmt -> expr ; .)
    )               reduce using rule 219 (expr_stmt -> expr ; .)


state 228

    (162) expr -> expr , . assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 308
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 229

    (220) sel_stmt -> IF ( . expr ) stmt ELSE stmt
    (221) sel_stmt -> IF ( . expr ) stmt
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 309
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 230

    (222) sel_stmt -> SWITCH ( . expr ) stmt
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 310
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 231

    (223) iter_stmt -> WHILE ( . expr ) stmt
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 311
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 232

    (224) iter_stmt -> DO stmt . WHILE ( expr ) ;

    WHILE           shift and go to state 312


state 233

    (225) iter_stmt -> FOR ( . expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> FOR ( . expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> FOR ( . decl expr_stmt ) stmt
    (228) iter_stmt -> FOR ( . decl expr_stmt expr ) stmt
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (5) decl -> . decl_specs ;
    (6) decl -> . decl_specs init_decl_list ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ;               shift and go to state 118
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 313
    expr                           shift and go to state 128
    decl                           shift and go to state 314
    decl_specs                     shift and go to state 53
    assign_expr                    shift and go to state 138
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    struct_or_union                shift and go to state 31
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 234

    (229) jump_stmt -> GOTO IDENTIFIER . ;

    ;               shift and go to state 315


state 235

    (230) jump_stmt -> CONTINUE ; .

    }               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    CASE            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    DEFAULT         reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    {               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    ;               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    IF              reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    SWITCH          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    WHILE           reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    DO              reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    FOR             reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    GOTO            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    BREAK           reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    RETURN          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    TYPEDEF         reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    EXTERN          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    STATIC          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    AUTO            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    REGISTER        reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    VOID            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    CHAR            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    SHORT           reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    INT             reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    LONG            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    FLOAT           reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    DOUBLE          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    SIGNED          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    UNSIGNED        reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    BOOL            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    CONST           reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    RESTRICT        reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    VOLATILE        reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    INLINE          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    ENUM            reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    STRUCT          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    UNION           reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    INC_OP          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    DEC_OP          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    SIZEOF          reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    (               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    &               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    *               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    +               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    -               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    ~               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    !               reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    CONSTANT        reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 230 (jump_stmt -> CONTINUE ; .)
    ELSE            reduce using rule 230 (jump_stmt -> CONTINUE ; .)


state 236

    (231) jump_stmt -> BREAK ; .

    }               reduce using rule 231 (jump_stmt -> BREAK ; .)
    IDENTIFIER      reduce using rule 231 (jump_stmt -> BREAK ; .)
    CASE            reduce using rule 231 (jump_stmt -> BREAK ; .)
    DEFAULT         reduce using rule 231 (jump_stmt -> BREAK ; .)
    {               reduce using rule 231 (jump_stmt -> BREAK ; .)
    ;               reduce using rule 231 (jump_stmt -> BREAK ; .)
    IF              reduce using rule 231 (jump_stmt -> BREAK ; .)
    SWITCH          reduce using rule 231 (jump_stmt -> BREAK ; .)
    WHILE           reduce using rule 231 (jump_stmt -> BREAK ; .)
    DO              reduce using rule 231 (jump_stmt -> BREAK ; .)
    FOR             reduce using rule 231 (jump_stmt -> BREAK ; .)
    GOTO            reduce using rule 231 (jump_stmt -> BREAK ; .)
    CONTINUE        reduce using rule 231 (jump_stmt -> BREAK ; .)
    BREAK           reduce using rule 231 (jump_stmt -> BREAK ; .)
    RETURN          reduce using rule 231 (jump_stmt -> BREAK ; .)
    TYPEDEF         reduce using rule 231 (jump_stmt -> BREAK ; .)
    EXTERN          reduce using rule 231 (jump_stmt -> BREAK ; .)
    STATIC          reduce using rule 231 (jump_stmt -> BREAK ; .)
    AUTO            reduce using rule 231 (jump_stmt -> BREAK ; .)
    REGISTER        reduce using rule 231 (jump_stmt -> BREAK ; .)
    VOID            reduce using rule 231 (jump_stmt -> BREAK ; .)
    CHAR            reduce using rule 231 (jump_stmt -> BREAK ; .)
    SHORT           reduce using rule 231 (jump_stmt -> BREAK ; .)
    INT             reduce using rule 231 (jump_stmt -> BREAK ; .)
    LONG            reduce using rule 231 (jump_stmt -> BREAK ; .)
    FLOAT           reduce using rule 231 (jump_stmt -> BREAK ; .)
    DOUBLE          reduce using rule 231 (jump_stmt -> BREAK ; .)
    SIGNED          reduce using rule 231 (jump_stmt -> BREAK ; .)
    UNSIGNED        reduce using rule 231 (jump_stmt -> BREAK ; .)
    BOOL            reduce using rule 231 (jump_stmt -> BREAK ; .)
    CONST           reduce using rule 231 (jump_stmt -> BREAK ; .)
    RESTRICT        reduce using rule 231 (jump_stmt -> BREAK ; .)
    VOLATILE        reduce using rule 231 (jump_stmt -> BREAK ; .)
    INLINE          reduce using rule 231 (jump_stmt -> BREAK ; .)
    ENUM            reduce using rule 231 (jump_stmt -> BREAK ; .)
    STRUCT          reduce using rule 231 (jump_stmt -> BREAK ; .)
    UNION           reduce using rule 231 (jump_stmt -> BREAK ; .)
    INC_OP          reduce using rule 231 (jump_stmt -> BREAK ; .)
    DEC_OP          reduce using rule 231 (jump_stmt -> BREAK ; .)
    SIZEOF          reduce using rule 231 (jump_stmt -> BREAK ; .)
    (               reduce using rule 231 (jump_stmt -> BREAK ; .)
    &               reduce using rule 231 (jump_stmt -> BREAK ; .)
    *               reduce using rule 231 (jump_stmt -> BREAK ; .)
    +               reduce using rule 231 (jump_stmt -> BREAK ; .)
    -               reduce using rule 231 (jump_stmt -> BREAK ; .)
    ~               reduce using rule 231 (jump_stmt -> BREAK ; .)
    !               reduce using rule 231 (jump_stmt -> BREAK ; .)
    CONSTANT        reduce using rule 231 (jump_stmt -> BREAK ; .)
    STRING_LITERAL  reduce using rule 231 (jump_stmt -> BREAK ; .)
    ELSE            reduce using rule 231 (jump_stmt -> BREAK ; .)


state 237

    (232) jump_stmt -> RETURN ; .

    }               reduce using rule 232 (jump_stmt -> RETURN ; .)
    IDENTIFIER      reduce using rule 232 (jump_stmt -> RETURN ; .)
    CASE            reduce using rule 232 (jump_stmt -> RETURN ; .)
    DEFAULT         reduce using rule 232 (jump_stmt -> RETURN ; .)
    {               reduce using rule 232 (jump_stmt -> RETURN ; .)
    ;               reduce using rule 232 (jump_stmt -> RETURN ; .)
    IF              reduce using rule 232 (jump_stmt -> RETURN ; .)
    SWITCH          reduce using rule 232 (jump_stmt -> RETURN ; .)
    WHILE           reduce using rule 232 (jump_stmt -> RETURN ; .)
    DO              reduce using rule 232 (jump_stmt -> RETURN ; .)
    FOR             reduce using rule 232 (jump_stmt -> RETURN ; .)
    GOTO            reduce using rule 232 (jump_stmt -> RETURN ; .)
    CONTINUE        reduce using rule 232 (jump_stmt -> RETURN ; .)
    BREAK           reduce using rule 232 (jump_stmt -> RETURN ; .)
    RETURN          reduce using rule 232 (jump_stmt -> RETURN ; .)
    TYPEDEF         reduce using rule 232 (jump_stmt -> RETURN ; .)
    EXTERN          reduce using rule 232 (jump_stmt -> RETURN ; .)
    STATIC          reduce using rule 232 (jump_stmt -> RETURN ; .)
    AUTO            reduce using rule 232 (jump_stmt -> RETURN ; .)
    REGISTER        reduce using rule 232 (jump_stmt -> RETURN ; .)
    VOID            reduce using rule 232 (jump_stmt -> RETURN ; .)
    CHAR            reduce using rule 232 (jump_stmt -> RETURN ; .)
    SHORT           reduce using rule 232 (jump_stmt -> RETURN ; .)
    INT             reduce using rule 232 (jump_stmt -> RETURN ; .)
    LONG            reduce using rule 232 (jump_stmt -> RETURN ; .)
    FLOAT           reduce using rule 232 (jump_stmt -> RETURN ; .)
    DOUBLE          reduce using rule 232 (jump_stmt -> RETURN ; .)
    SIGNED          reduce using rule 232 (jump_stmt -> RETURN ; .)
    UNSIGNED        reduce using rule 232 (jump_stmt -> RETURN ; .)
    BOOL            reduce using rule 232 (jump_stmt -> RETURN ; .)
    CONST           reduce using rule 232 (jump_stmt -> RETURN ; .)
    RESTRICT        reduce using rule 232 (jump_stmt -> RETURN ; .)
    VOLATILE        reduce using rule 232 (jump_stmt -> RETURN ; .)
    INLINE          reduce using rule 232 (jump_stmt -> RETURN ; .)
    ENUM            reduce using rule 232 (jump_stmt -> RETURN ; .)
    STRUCT          reduce using rule 232 (jump_stmt -> RETURN ; .)
    UNION           reduce using rule 232 (jump_stmt -> RETURN ; .)
    INC_OP          reduce using rule 232 (jump_stmt -> RETURN ; .)
    DEC_OP          reduce using rule 232 (jump_stmt -> RETURN ; .)
    SIZEOF          reduce using rule 232 (jump_stmt -> RETURN ; .)
    (               reduce using rule 232 (jump_stmt -> RETURN ; .)
    &               reduce using rule 232 (jump_stmt -> RETURN ; .)
    *               reduce using rule 232 (jump_stmt -> RETURN ; .)
    +               reduce using rule 232 (jump_stmt -> RETURN ; .)
    -               reduce using rule 232 (jump_stmt -> RETURN ; .)
    ~               reduce using rule 232 (jump_stmt -> RETURN ; .)
    !               reduce using rule 232 (jump_stmt -> RETURN ; .)
    CONSTANT        reduce using rule 232 (jump_stmt -> RETURN ; .)
    STRING_LITERAL  reduce using rule 232 (jump_stmt -> RETURN ; .)
    ELSE            reduce using rule 232 (jump_stmt -> RETURN ; .)


state 238

    (233) jump_stmt -> RETURN expr . ;
    (162) expr -> expr . , assign_expr

    ;               shift and go to state 316
    ,               shift and go to state 228


state 239

    (76) direct_declr -> direct_declr [ type_qual_list assign_expr . ]

    ]               shift and go to state 317


state 240

    (77) direct_declr -> direct_declr [ type_qual_list ] .

    [               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    (               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    =               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    {               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    TYPEDEF         reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    EXTERN          reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    STATIC          reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    AUTO            reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    REGISTER        reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    VOID            reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    CHAR            reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    SHORT           reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    INT             reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    LONG            reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    FLOAT           reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    DOUBLE          reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    SIGNED          reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    UNSIGNED        reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    BOOL            reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    CONST           reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    RESTRICT        reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    VOLATILE        reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    INLINE          reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    ENUM            reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    STRUCT          reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    UNION           reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    ;               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    ,               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    )               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)
    :               reduce using rule 77 (direct_declr -> direct_declr [ type_qual_list ] .)


state 241

    (80) direct_declr -> direct_declr [ type_qual_list STATIC . assign_expr ]
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 318
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 242

    (81) direct_declr -> direct_declr [ type_qual_list * . ]
    (142) unary_op -> * .

    ]               shift and go to state 319
    (               reduce using rule 142 (unary_op -> * .)
    INC_OP          reduce using rule 142 (unary_op -> * .)
    DEC_OP          reduce using rule 142 (unary_op -> * .)
    SIZEOF          reduce using rule 142 (unary_op -> * .)
    &               reduce using rule 142 (unary_op -> * .)
    *               reduce using rule 142 (unary_op -> * .)
    +               reduce using rule 142 (unary_op -> * .)
    -               reduce using rule 142 (unary_op -> * .)
    ~               reduce using rule 142 (unary_op -> * .)
    !               reduce using rule 142 (unary_op -> * .)
    IDENTIFIER      reduce using rule 142 (unary_op -> * .)
    CONSTANT        reduce using rule 142 (unary_op -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_op -> * .)


state 243

    (78) direct_declr -> direct_declr [ assign_expr ] .

    [               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    (               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    =               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    {               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    TYPEDEF         reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    EXTERN          reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    STATIC          reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    AUTO            reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    REGISTER        reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    VOID            reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    CHAR            reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    SHORT           reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    INT             reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    LONG            reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    FLOAT           reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    DOUBLE          reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    SIGNED          reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    UNSIGNED        reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    BOOL            reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    CONST           reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    RESTRICT        reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    VOLATILE        reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    INLINE          reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    ENUM            reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    STRUCT          reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    UNION           reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    ;               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    ,               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    )               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)
    :               reduce using rule 78 (direct_declr -> direct_declr [ assign_expr ] .)


state 244

    (79) direct_declr -> direct_declr [ STATIC type_qual_list . assign_expr ]
    (73) type_qual_list -> type_qual_list . type_qual
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 320
    type_qual                      shift and go to state 153
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 245

    (82) direct_declr -> direct_declr [ * ] .

    [               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    (               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    =               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    {               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    TYPEDEF         reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    EXTERN          reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    STATIC          reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    AUTO            reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    REGISTER        reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    VOID            reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    CHAR            reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    SHORT           reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    INT             reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    LONG            reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    FLOAT           reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    DOUBLE          reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    SIGNED          reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    UNSIGNED        reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    BOOL            reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    CONST           reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    RESTRICT        reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    VOLATILE        reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    INLINE          reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    ENUM            reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    STRUCT          reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    UNION           reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    ;               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    ,               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    )               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)
    :               reduce using rule 82 (direct_declr -> direct_declr [ * ] .)


state 246

    (84) direct_declr -> direct_declr ( param_type_list ) .

    [               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    (               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    =               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    {               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    TYPEDEF         reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    EXTERN          reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    STATIC          reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    AUTO            reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    REGISTER        reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    VOID            reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    CHAR            reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    SHORT           reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    INT             reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    LONG            reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    FLOAT           reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    DOUBLE          reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    SIGNED          reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    UNSIGNED        reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    BOOL            reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    CONST           reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    RESTRICT        reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    VOLATILE        reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    INLINE          reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    ENUM            reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    STRUCT          reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    UNION           reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    ;               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    ,               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    )               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)
    :               reduce using rule 84 (direct_declr -> direct_declr ( param_type_list ) .)


state 247

    (85) direct_declr -> direct_declr ( id_list ) .

    [               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    (               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    =               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    {               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    TYPEDEF         reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    EXTERN          reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    STATIC          reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    AUTO            reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    REGISTER        reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    VOID            reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    CHAR            reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    SHORT           reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    INT             reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    LONG            reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    FLOAT           reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    DOUBLE          reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    SIGNED          reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    UNSIGNED        reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    BOOL            reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    CONST           reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    RESTRICT        reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    VOLATILE        reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    INLINE          reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    ENUM            reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    STRUCT          reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    UNION           reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    ;               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    ,               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    )               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)
    :               reduce using rule 85 (direct_declr -> direct_declr ( id_list ) .)


state 248

    (88) id_list -> id_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 321


state 249

    (180) param_type_list -> param_list , . ELLIPSIS
    (182) param_list -> param_list , . param_decl
    (183) param_decl -> . decl_specs declr
    (184) param_decl -> . decl_specs abs_declr
    (185) param_decl -> . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 322
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    param_decl                     shift and go to state 323
    decl_specs                     shift and go to state 151
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 250

    (183) param_decl -> decl_specs declr .

    ,               reduce using rule 183 (param_decl -> decl_specs declr .)
    )               reduce using rule 183 (param_decl -> decl_specs declr .)


state 251

    (184) param_decl -> decl_specs abs_declr .

    ,               reduce using rule 184 (param_decl -> decl_specs abs_declr .)
    )               reduce using rule 184 (param_decl -> decl_specs abs_declr .)


state 252

    (66) declr -> ptr . direct_declr
    (165) abs_declr -> ptr .
    (167) abs_declr -> ptr . direct_abs_declr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )
    (168) direct_abs_declr -> . ( abs_declr )
    (169) direct_abs_declr -> . [ ]
    (170) direct_abs_declr -> . [ assign_expr ]
    (171) direct_abs_declr -> . direct_abs_declr [ ]
    (172) direct_abs_declr -> . direct_abs_declr [ assign_expr ]
    (173) direct_abs_declr -> . [ * ]
    (174) direct_abs_declr -> . direct_abs_declr [ * ]
    (175) direct_abs_declr -> . ( )
    (176) direct_abs_declr -> . ( param_type_list )
    (177) direct_abs_declr -> . direct_abs_declr ( )
    (178) direct_abs_declr -> . direct_abs_declr ( param_type_list )

    ,               reduce using rule 165 (abs_declr -> ptr .)
    )               reduce using rule 165 (abs_declr -> ptr .)
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 254
    [               shift and go to state 255

    direct_declr                   shift and go to state 61
    direct_abs_declr               shift and go to state 324

state 253

    (166) abs_declr -> direct_abs_declr .
    (171) direct_abs_declr -> direct_abs_declr . [ ]
    (172) direct_abs_declr -> direct_abs_declr . [ assign_expr ]
    (174) direct_abs_declr -> direct_abs_declr . [ * ]
    (177) direct_abs_declr -> direct_abs_declr . ( )
    (178) direct_abs_declr -> direct_abs_declr . ( param_type_list )

    ,               reduce using rule 166 (abs_declr -> direct_abs_declr .)
    )               reduce using rule 166 (abs_declr -> direct_abs_declr .)
    [               shift and go to state 325
    (               shift and go to state 326


state 254

    (75) direct_declr -> ( . declr )
    (168) direct_abs_declr -> ( . abs_declr )
    (175) direct_abs_declr -> ( . )
    (176) direct_abs_declr -> ( . param_type_list )
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (165) abs_declr -> . ptr
    (166) abs_declr -> . direct_abs_declr
    (167) abs_declr -> . ptr direct_abs_declr
    (179) param_type_list -> . param_list
    (180) param_type_list -> . param_list , ELLIPSIS
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )
    (168) direct_abs_declr -> . ( abs_declr )
    (169) direct_abs_declr -> . [ ]
    (170) direct_abs_declr -> . [ assign_expr ]
    (171) direct_abs_declr -> . direct_abs_declr [ ]
    (172) direct_abs_declr -> . direct_abs_declr [ assign_expr ]
    (173) direct_abs_declr -> . [ * ]
    (174) direct_abs_declr -> . direct_abs_declr [ * ]
    (175) direct_abs_declr -> . ( )
    (176) direct_abs_declr -> . ( param_type_list )
    (177) direct_abs_declr -> . direct_abs_declr ( )
    (178) direct_abs_declr -> . direct_abs_declr ( param_type_list )
    (181) param_list -> . param_decl
    (182) param_list -> . param_list , param_decl
    (183) param_decl -> . decl_specs declr
    (184) param_decl -> . decl_specs abs_declr
    (185) param_decl -> . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 327
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 254
    [               shift and go to state 255
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declr                          shift and go to state 67
    abs_declr                      shift and go to state 328
    param_type_list                shift and go to state 329
    ptr                            shift and go to state 252
    direct_declr                   shift and go to state 40
    direct_abs_declr               shift and go to state 253
    param_list                     shift and go to state 148
    param_decl                     shift and go to state 150
    decl_specs                     shift and go to state 151
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 255

    (169) direct_abs_declr -> [ . ]
    (170) direct_abs_declr -> [ . assign_expr ]
    (173) direct_abs_declr -> [ . * ]
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ]               shift and go to state 330
    *               shift and go to state 332
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 331
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 256

    (49) struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .

    TYPEDEF         reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    EXTERN          reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    STATIC          reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    AUTO            reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    REGISTER        reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    VOID            reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    CHAR            reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    SHORT           reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    INT             reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    LONG            reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    FLOAT           reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    DOUBLE          reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    SIGNED          reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    UNSIGNED        reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    BOOL            reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    CONST           reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    RESTRICT        reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    VOLATILE        reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    INLINE          reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    ENUM            reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    STRUCT          reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    UNION           reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    ;               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    *               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    IDENTIFIER      reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    (               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    [               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    ,               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    )               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)
    :               reduce using rule 49 (struct_or_union_spec -> struct_or_union IDENTIFIER { struct_decl_list } .)


state 257

    (56) struct_decl -> spec_qual_list struct_declr_list ; .

    }               reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    VOID            reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    CHAR            reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    SHORT           reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    INT             reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    LONG            reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    FLOAT           reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    DOUBLE          reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    SIGNED          reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    UNSIGNED        reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    BOOL            reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    CONST           reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    RESTRICT        reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    VOLATILE        reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    ENUM            reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    STRUCT          reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)
    UNION           reduce using rule 56 (struct_decl -> spec_qual_list struct_declr_list ; .)


state 258

    (62) struct_declr_list -> struct_declr_list , . struct_declr
    (63) struct_declr -> . declr
    (64) struct_declr -> . : const_expr
    (65) struct_declr -> . declr : const_expr
    (66) declr -> . ptr direct_declr
    (67) declr -> . direct_declr
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (74) direct_declr -> . IDENTIFIER
    (75) direct_declr -> . ( declr )
    (76) direct_declr -> . direct_declr [ type_qual_list assign_expr ]
    (77) direct_declr -> . direct_declr [ type_qual_list ]
    (78) direct_declr -> . direct_declr [ assign_expr ]
    (79) direct_declr -> . direct_declr [ STATIC type_qual_list assign_expr ]
    (80) direct_declr -> . direct_declr [ type_qual_list STATIC assign_expr ]
    (81) direct_declr -> . direct_declr [ type_qual_list * ]
    (82) direct_declr -> . direct_declr [ * ]
    (83) direct_declr -> . direct_declr [ ]
    (84) direct_declr -> . direct_declr ( param_type_list )
    (85) direct_declr -> . direct_declr ( id_list )
    (86) direct_declr -> . direct_declr ( )

    :               shift and go to state 161
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declr                   shift and go to state 333
    declr                          shift and go to state 160
    ptr                            shift and go to state 39
    direct_declr                   shift and go to state 40

state 259

    (65) struct_declr -> declr : . const_expr
    (102) const_expr -> . cond_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    const_expr                     shift and go to state 334
    cond_expr                      shift and go to state 225
    log_or_expr                    shift and go to state 86
    log_and_expr                   shift and go to state 94
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 260

    (64) struct_declr -> : const_expr .

    ;               reduce using rule 64 (struct_declr -> : const_expr .)
    ,               reduce using rule 64 (struct_declr -> : const_expr .)


state 261

    (42) enum_spec -> ENUM { enum_list , } .

    TYPEDEF         reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    EXTERN          reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    STATIC          reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    AUTO            reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    REGISTER        reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    VOID            reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    CHAR            reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    SHORT           reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    INT             reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    LONG            reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    FLOAT           reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    DOUBLE          reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    SIGNED          reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    UNSIGNED        reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    BOOL            reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    CONST           reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    RESTRICT        reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    VOLATILE        reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    INLINE          reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    ENUM            reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    STRUCT          reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    UNION           reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    ;               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    *               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    IDENTIFIER      reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    (               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    [               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    ,               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    )               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)
    :               reduce using rule 42 (enum_spec -> ENUM { enum_list , } .)


state 262

    (46) enum_list -> enum_list , enum .

    }               reduce using rule 46 (enum_list -> enum_list , enum .)
    ,               reduce using rule 46 (enum_list -> enum_list , enum .)


state 263

    (48) enum -> IDENTIFIER = const_expr .

    }               reduce using rule 48 (enum -> IDENTIFIER = const_expr .)
    ,               reduce using rule 48 (enum -> IDENTIFIER = const_expr .)


state 264

    (41) enum_spec -> ENUM IDENTIFIER { enum_list } .

    TYPEDEF         reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    EXTERN          reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    STATIC          reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    AUTO            reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    REGISTER        reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    VOID            reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    CHAR            reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    SHORT           reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    INT             reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    LONG            reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    FLOAT           reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    DOUBLE          reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    SIGNED          reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    UNSIGNED        reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    BOOL            reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    CONST           reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    RESTRICT        reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    VOLATILE        reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    INLINE          reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    ENUM            reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    STRUCT          reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    UNION           reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    ;               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    *               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    IDENTIFIER      reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    (               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    [               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    ,               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    )               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)
    :               reduce using rule 41 (enum_spec -> ENUM IDENTIFIER { enum_list } .)


state 265

    (43) enum_spec -> ENUM IDENTIFIER { enum_list , . }
    (46) enum_list -> enum_list , . enum
    (47) enum -> . IDENTIFIER
    (48) enum -> . IDENTIFIER = const_expr

    }               shift and go to state 335
    IDENTIFIER      shift and go to state 76

    enum                           shift and go to state 262

state 266

    (193) init -> { init_list } .

    ;               reduce using rule 193 (init -> { init_list } .)
    ,               reduce using rule 193 (init -> { init_list } .)
    }               reduce using rule 193 (init -> { init_list } .)


state 267

    (194) init -> { init_list , . }
    (190) init_list -> init_list , . init
    (191) init_list -> init_list , . desig init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (197) desig -> . [ const_expr ]
    (198) desig -> . . IDENTIFIER
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    }               shift and go to state 336
    {               shift and go to state 83
    [               shift and go to state 171
    .               shift and go to state 172
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init                           shift and go to state 337
    desig                          shift and go to state 338
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 268

    (189) init_list -> desig init .

    }               reduce using rule 189 (init_list -> desig init .)
    ,               reduce using rule 189 (init_list -> desig init .)


state 269

    (197) desig -> [ const_expr . ]

    ]               shift and go to state 339


state 270

    (198) desig -> . IDENTIFIER .

    {               reduce using rule 198 (desig -> . IDENTIFIER .)
    INC_OP          reduce using rule 198 (desig -> . IDENTIFIER .)
    DEC_OP          reduce using rule 198 (desig -> . IDENTIFIER .)
    SIZEOF          reduce using rule 198 (desig -> . IDENTIFIER .)
    (               reduce using rule 198 (desig -> . IDENTIFIER .)
    &               reduce using rule 198 (desig -> . IDENTIFIER .)
    *               reduce using rule 198 (desig -> . IDENTIFIER .)
    +               reduce using rule 198 (desig -> . IDENTIFIER .)
    -               reduce using rule 198 (desig -> . IDENTIFIER .)
    ~               reduce using rule 198 (desig -> . IDENTIFIER .)
    !               reduce using rule 198 (desig -> . IDENTIFIER .)
    IDENTIFIER      reduce using rule 198 (desig -> . IDENTIFIER .)
    CONSTANT        reduce using rule 198 (desig -> . IDENTIFIER .)
    STRING_LITERAL  reduce using rule 198 (desig -> . IDENTIFIER .)


state 271

    (90) assign_expr -> unary_expr assign_op assign_expr .

    ;               reduce using rule 90 (assign_expr -> unary_expr assign_op assign_expr .)
    ,               reduce using rule 90 (assign_expr -> unary_expr assign_op assign_expr .)
    ]               reduce using rule 90 (assign_expr -> unary_expr assign_op assign_expr .)
    }               reduce using rule 90 (assign_expr -> unary_expr assign_op assign_expr .)
    )               reduce using rule 90 (assign_expr -> unary_expr assign_op assign_expr .)
    :               reduce using rule 90 (assign_expr -> unary_expr assign_op assign_expr .)


state 272

    (104) cond_expr -> log_or_expr ? expr . : cond_expr
    (162) expr -> expr . , assign_expr

    :               shift and go to state 340
    ,               shift and go to state 228


state 273

    (106) log_or_expr -> log_or_expr OR_OP log_and_expr .
    (108) log_and_expr -> log_and_expr . AND_OP incl_or_expr

    ?               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    OR_OP           reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    ;               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    ,               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    ]               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    }               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    )               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    :               reduce using rule 106 (log_or_expr -> log_or_expr OR_OP log_and_expr .)
    AND_OP          shift and go to state 204


state 274

    (148) post_expr -> post_expr [ expr . ]
    (162) expr -> expr . , assign_expr

    ]               shift and go to state 341
    ,               shift and go to state 228


state 275

    (149) post_expr -> post_expr ( ) .

    [               reduce using rule 149 (post_expr -> post_expr ( ) .)
    (               reduce using rule 149 (post_expr -> post_expr ( ) .)
    .               reduce using rule 149 (post_expr -> post_expr ( ) .)
    PTR_OP          reduce using rule 149 (post_expr -> post_expr ( ) .)
    INC_OP          reduce using rule 149 (post_expr -> post_expr ( ) .)
    DEC_OP          reduce using rule 149 (post_expr -> post_expr ( ) .)
    =               reduce using rule 149 (post_expr -> post_expr ( ) .)
    MUL_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    DIV_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    MOD_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    ADD_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    SUB_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    LEFT_ASSIGN     reduce using rule 149 (post_expr -> post_expr ( ) .)
    RIGHT_ASSIGN    reduce using rule 149 (post_expr -> post_expr ( ) .)
    AND_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    XOR_ASSIGN      reduce using rule 149 (post_expr -> post_expr ( ) .)
    OR_ASSIGN       reduce using rule 149 (post_expr -> post_expr ( ) .)
    *               reduce using rule 149 (post_expr -> post_expr ( ) .)
    /               reduce using rule 149 (post_expr -> post_expr ( ) .)
    %               reduce using rule 149 (post_expr -> post_expr ( ) .)
    +               reduce using rule 149 (post_expr -> post_expr ( ) .)
    -               reduce using rule 149 (post_expr -> post_expr ( ) .)
    LEFT_OP         reduce using rule 149 (post_expr -> post_expr ( ) .)
    RIGHT_OP        reduce using rule 149 (post_expr -> post_expr ( ) .)
    <               reduce using rule 149 (post_expr -> post_expr ( ) .)
    >               reduce using rule 149 (post_expr -> post_expr ( ) .)
    LE_OP           reduce using rule 149 (post_expr -> post_expr ( ) .)
    GE_OP           reduce using rule 149 (post_expr -> post_expr ( ) .)
    EQ_OP           reduce using rule 149 (post_expr -> post_expr ( ) .)
    NE_OP           reduce using rule 149 (post_expr -> post_expr ( ) .)
    &               reduce using rule 149 (post_expr -> post_expr ( ) .)
    ^               reduce using rule 149 (post_expr -> post_expr ( ) .)
    |               reduce using rule 149 (post_expr -> post_expr ( ) .)
    AND_OP          reduce using rule 149 (post_expr -> post_expr ( ) .)
    ?               reduce using rule 149 (post_expr -> post_expr ( ) .)
    OR_OP           reduce using rule 149 (post_expr -> post_expr ( ) .)
    ;               reduce using rule 149 (post_expr -> post_expr ( ) .)
    ,               reduce using rule 149 (post_expr -> post_expr ( ) .)
    ]               reduce using rule 149 (post_expr -> post_expr ( ) .)
    }               reduce using rule 149 (post_expr -> post_expr ( ) .)
    )               reduce using rule 149 (post_expr -> post_expr ( ) .)
    :               reduce using rule 149 (post_expr -> post_expr ( ) .)


state 276

    (150) post_expr -> post_expr ( arg_expr_list . )
    (187) arg_expr_list -> arg_expr_list . , assign_expr

    )               shift and go to state 342
    ,               shift and go to state 343


state 277

    (186) arg_expr_list -> assign_expr .

    )               reduce using rule 186 (arg_expr_list -> assign_expr .)
    ,               reduce using rule 186 (arg_expr_list -> assign_expr .)


state 278

    (151) post_expr -> post_expr . IDENTIFIER .

    [               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    (               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    .               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    PTR_OP          reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    INC_OP          reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    DEC_OP          reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    =               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    AND_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    OR_ASSIGN       reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    *               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    /               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    %               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    +               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    -               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    LEFT_OP         reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    RIGHT_OP        reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    <               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    >               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    LE_OP           reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    GE_OP           reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    EQ_OP           reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    NE_OP           reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    &               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    ^               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    |               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    AND_OP          reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    ?               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    OR_OP           reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    ;               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    ,               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    ]               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    }               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    )               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)
    :               reduce using rule 151 (post_expr -> post_expr . IDENTIFIER .)


state 279

    (152) post_expr -> post_expr PTR_OP IDENTIFIER .

    [               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    (               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    .               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    =               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    *               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    /               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    %               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    +               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    -               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    <               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    >               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    &               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    ^               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    |               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    ?               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    ;               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    ,               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    ]               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    }               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    )               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)
    :               reduce using rule 152 (post_expr -> post_expr PTR_OP IDENTIFIER .)


state 280

    (155) post_expr -> ( type_name . ) { init_list }
    (156) post_expr -> ( type_name . ) { init_list , }

    )               shift and go to state 344


state 281

    (134) cast_expr -> ( type_name . ) cast_expr
    (155) post_expr -> ( type_name . ) { init_list }
    (156) post_expr -> ( type_name . ) { init_list , }

    )               shift and go to state 345


state 282

    (140) unary_expr -> SIZEOF ( type_name . )
    (155) post_expr -> ( type_name . ) { init_list }
    (156) post_expr -> ( type_name . ) { init_list , }

    )               shift and go to state 346


state 283

    (155) post_expr -> ( type_name ) . { init_list }
    (156) post_expr -> ( type_name ) . { init_list , }
    (134) cast_expr -> ( type_name ) . cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    {               shift and go to state 347
    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expr                      shift and go to state 348
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 284

    (160) prim_expr -> ( expr ) .

    [               reduce using rule 160 (prim_expr -> ( expr ) .)
    (               reduce using rule 160 (prim_expr -> ( expr ) .)
    .               reduce using rule 160 (prim_expr -> ( expr ) .)
    PTR_OP          reduce using rule 160 (prim_expr -> ( expr ) .)
    INC_OP          reduce using rule 160 (prim_expr -> ( expr ) .)
    DEC_OP          reduce using rule 160 (prim_expr -> ( expr ) .)
    =               reduce using rule 160 (prim_expr -> ( expr ) .)
    MUL_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    DIV_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    MOD_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    ADD_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    SUB_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    LEFT_ASSIGN     reduce using rule 160 (prim_expr -> ( expr ) .)
    RIGHT_ASSIGN    reduce using rule 160 (prim_expr -> ( expr ) .)
    AND_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    XOR_ASSIGN      reduce using rule 160 (prim_expr -> ( expr ) .)
    OR_ASSIGN       reduce using rule 160 (prim_expr -> ( expr ) .)
    *               reduce using rule 160 (prim_expr -> ( expr ) .)
    /               reduce using rule 160 (prim_expr -> ( expr ) .)
    %               reduce using rule 160 (prim_expr -> ( expr ) .)
    +               reduce using rule 160 (prim_expr -> ( expr ) .)
    -               reduce using rule 160 (prim_expr -> ( expr ) .)
    LEFT_OP         reduce using rule 160 (prim_expr -> ( expr ) .)
    RIGHT_OP        reduce using rule 160 (prim_expr -> ( expr ) .)
    <               reduce using rule 160 (prim_expr -> ( expr ) .)
    >               reduce using rule 160 (prim_expr -> ( expr ) .)
    LE_OP           reduce using rule 160 (prim_expr -> ( expr ) .)
    GE_OP           reduce using rule 160 (prim_expr -> ( expr ) .)
    EQ_OP           reduce using rule 160 (prim_expr -> ( expr ) .)
    NE_OP           reduce using rule 160 (prim_expr -> ( expr ) .)
    &               reduce using rule 160 (prim_expr -> ( expr ) .)
    ^               reduce using rule 160 (prim_expr -> ( expr ) .)
    |               reduce using rule 160 (prim_expr -> ( expr ) .)
    AND_OP          reduce using rule 160 (prim_expr -> ( expr ) .)
    ?               reduce using rule 160 (prim_expr -> ( expr ) .)
    OR_OP           reduce using rule 160 (prim_expr -> ( expr ) .)
    ;               reduce using rule 160 (prim_expr -> ( expr ) .)
    ,               reduce using rule 160 (prim_expr -> ( expr ) .)
    ]               reduce using rule 160 (prim_expr -> ( expr ) .)
    }               reduce using rule 160 (prim_expr -> ( expr ) .)
    )               reduce using rule 160 (prim_expr -> ( expr ) .)
    :               reduce using rule 160 (prim_expr -> ( expr ) .)


state 285

    (164) type_name -> spec_qual_list abs_declr .

    )               reduce using rule 164 (type_name -> spec_qual_list abs_declr .)


state 286

    (165) abs_declr -> ptr .
    (167) abs_declr -> ptr . direct_abs_declr
    (168) direct_abs_declr -> . ( abs_declr )
    (169) direct_abs_declr -> . [ ]
    (170) direct_abs_declr -> . [ assign_expr ]
    (171) direct_abs_declr -> . direct_abs_declr [ ]
    (172) direct_abs_declr -> . direct_abs_declr [ assign_expr ]
    (173) direct_abs_declr -> . [ * ]
    (174) direct_abs_declr -> . direct_abs_declr [ * ]
    (175) direct_abs_declr -> . ( )
    (176) direct_abs_declr -> . ( param_type_list )
    (177) direct_abs_declr -> . direct_abs_declr ( )
    (178) direct_abs_declr -> . direct_abs_declr ( param_type_list )

    )               reduce using rule 165 (abs_declr -> ptr .)
    (               shift and go to state 287
    [               shift and go to state 255

    direct_abs_declr               shift and go to state 324

state 287

    (168) direct_abs_declr -> ( . abs_declr )
    (175) direct_abs_declr -> ( . )
    (176) direct_abs_declr -> ( . param_type_list )
    (165) abs_declr -> . ptr
    (166) abs_declr -> . direct_abs_declr
    (167) abs_declr -> . ptr direct_abs_declr
    (179) param_type_list -> . param_list
    (180) param_type_list -> . param_list , ELLIPSIS
    (68) ptr -> . *
    (69) ptr -> . * type_qual_list
    (70) ptr -> . * ptr
    (71) ptr -> . * type_qual_list ptr
    (168) direct_abs_declr -> . ( abs_declr )
    (169) direct_abs_declr -> . [ ]
    (170) direct_abs_declr -> . [ assign_expr ]
    (171) direct_abs_declr -> . direct_abs_declr [ ]
    (172) direct_abs_declr -> . direct_abs_declr [ assign_expr ]
    (173) direct_abs_declr -> . [ * ]
    (174) direct_abs_declr -> . direct_abs_declr [ * ]
    (175) direct_abs_declr -> . ( )
    (176) direct_abs_declr -> . ( param_type_list )
    (177) direct_abs_declr -> . direct_abs_declr ( )
    (178) direct_abs_declr -> . direct_abs_declr ( param_type_list )
    (181) param_list -> . param_decl
    (182) param_list -> . param_list , param_decl
    (183) param_decl -> . decl_specs declr
    (184) param_decl -> . decl_specs abs_declr
    (185) param_decl -> . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 327
    *               shift and go to state 42
    (               shift and go to state 287
    [               shift and go to state 255
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    abs_declr                      shift and go to state 328
    param_type_list                shift and go to state 329
    ptr                            shift and go to state 286
    direct_abs_declr               shift and go to state 253
    param_list                     shift and go to state 148
    param_decl                     shift and go to state 150
    decl_specs                     shift and go to state 151
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 288

    (108) log_and_expr -> log_and_expr AND_OP incl_or_expr .
    (110) incl_or_expr -> incl_or_expr . | excl_or_expr

    AND_OP          reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    ?               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    OR_OP           reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    ;               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    ,               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    ]               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    }               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    )               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    :               reduce using rule 108 (log_and_expr -> log_and_expr AND_OP incl_or_expr .)
    |               shift and go to state 205


state 289

    (110) incl_or_expr -> incl_or_expr | excl_or_expr .
    (112) excl_or_expr -> excl_or_expr . ^ and_expr

    |               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    AND_OP          reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    ?               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    OR_OP           reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    ;               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    ,               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    ]               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    }               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    )               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    :               reduce using rule 110 (incl_or_expr -> incl_or_expr | excl_or_expr .)
    ^               shift and go to state 206


state 290

    (112) excl_or_expr -> excl_or_expr ^ and_expr .
    (114) and_expr -> and_expr . & eq_expr

    ^               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    |               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    AND_OP          reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    ?               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    OR_OP           reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    ;               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    ,               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    ]               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    }               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    )               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    :               reduce using rule 112 (excl_or_expr -> excl_or_expr ^ and_expr .)
    &               shift and go to state 207


state 291

    (114) and_expr -> and_expr & eq_expr .
    (116) eq_expr -> eq_expr . EQ_OP rel_expr
    (117) eq_expr -> eq_expr . NE_OP rel_expr

    &               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    ^               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    |               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    AND_OP          reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    ?               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    OR_OP           reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    ;               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    ,               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    ]               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    }               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    )               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    :               reduce using rule 114 (and_expr -> and_expr & eq_expr .)
    EQ_OP           shift and go to state 208
    NE_OP           shift and go to state 209


state 292

    (116) eq_expr -> eq_expr EQ_OP rel_expr .
    (119) rel_expr -> rel_expr . < shift_expr
    (120) rel_expr -> rel_expr . > shift_expr
    (121) rel_expr -> rel_expr . LE_OP shift_expr
    (122) rel_expr -> rel_expr . GE_OP shift_expr

    EQ_OP           reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    NE_OP           reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    &               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    ^               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    |               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    AND_OP          reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    ?               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    OR_OP           reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    ;               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    ,               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    ]               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    }               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    )               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    :               reduce using rule 116 (eq_expr -> eq_expr EQ_OP rel_expr .)
    <               shift and go to state 210
    >               shift and go to state 211
    LE_OP           shift and go to state 212
    GE_OP           shift and go to state 213


state 293

    (117) eq_expr -> eq_expr NE_OP rel_expr .
    (119) rel_expr -> rel_expr . < shift_expr
    (120) rel_expr -> rel_expr . > shift_expr
    (121) rel_expr -> rel_expr . LE_OP shift_expr
    (122) rel_expr -> rel_expr . GE_OP shift_expr

    EQ_OP           reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    NE_OP           reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    &               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    ^               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    |               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    AND_OP          reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    ?               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    OR_OP           reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    ;               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    ,               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    ]               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    }               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    )               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    :               reduce using rule 117 (eq_expr -> eq_expr NE_OP rel_expr .)
    <               shift and go to state 210
    >               shift and go to state 211
    LE_OP           shift and go to state 212
    GE_OP           shift and go to state 213


state 294

    (119) rel_expr -> rel_expr < shift_expr .
    (124) shift_expr -> shift_expr . LEFT_OP add_expr
    (125) shift_expr -> shift_expr . RIGHT_OP add_expr

    <               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    >               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    LE_OP           reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    GE_OP           reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    EQ_OP           reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    NE_OP           reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    &               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    ^               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    |               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    AND_OP          reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    ?               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    OR_OP           reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    ;               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    ,               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    ]               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    }               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    )               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    :               reduce using rule 119 (rel_expr -> rel_expr < shift_expr .)
    LEFT_OP         shift and go to state 214
    RIGHT_OP        shift and go to state 215


state 295

    (120) rel_expr -> rel_expr > shift_expr .
    (124) shift_expr -> shift_expr . LEFT_OP add_expr
    (125) shift_expr -> shift_expr . RIGHT_OP add_expr

    <               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    >               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    LE_OP           reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    GE_OP           reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    EQ_OP           reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    NE_OP           reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    &               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    ^               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    |               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    AND_OP          reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    ?               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    OR_OP           reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    ;               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    ,               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    ]               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    }               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    )               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    :               reduce using rule 120 (rel_expr -> rel_expr > shift_expr .)
    LEFT_OP         shift and go to state 214
    RIGHT_OP        shift and go to state 215


state 296

    (121) rel_expr -> rel_expr LE_OP shift_expr .
    (124) shift_expr -> shift_expr . LEFT_OP add_expr
    (125) shift_expr -> shift_expr . RIGHT_OP add_expr

    <               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    >               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    LE_OP           reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    GE_OP           reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    EQ_OP           reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    NE_OP           reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    &               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    ^               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    |               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    AND_OP          reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    ?               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    OR_OP           reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    ;               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    ,               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    ]               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    }               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    )               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    :               reduce using rule 121 (rel_expr -> rel_expr LE_OP shift_expr .)
    LEFT_OP         shift and go to state 214
    RIGHT_OP        shift and go to state 215


state 297

    (122) rel_expr -> rel_expr GE_OP shift_expr .
    (124) shift_expr -> shift_expr . LEFT_OP add_expr
    (125) shift_expr -> shift_expr . RIGHT_OP add_expr

    <               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    >               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    LE_OP           reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    GE_OP           reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    EQ_OP           reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    NE_OP           reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    &               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    ^               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    |               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    AND_OP          reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    ?               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    OR_OP           reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    ;               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    ,               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    ]               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    }               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    )               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    :               reduce using rule 122 (rel_expr -> rel_expr GE_OP shift_expr .)
    LEFT_OP         shift and go to state 214
    RIGHT_OP        shift and go to state 215


state 298

    (124) shift_expr -> shift_expr LEFT_OP add_expr .
    (127) add_expr -> add_expr . + mult_expr
    (128) add_expr -> add_expr . - mult_expr

    LEFT_OP         reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    RIGHT_OP        reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    <               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    >               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    LE_OP           reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    GE_OP           reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    EQ_OP           reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    NE_OP           reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    &               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    ^               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    |               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    AND_OP          reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    ?               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    OR_OP           reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    ;               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    ,               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    ]               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    }               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    )               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    :               reduce using rule 124 (shift_expr -> shift_expr LEFT_OP add_expr .)
    +               shift and go to state 216
    -               shift and go to state 217


state 299

    (125) shift_expr -> shift_expr RIGHT_OP add_expr .
    (127) add_expr -> add_expr . + mult_expr
    (128) add_expr -> add_expr . - mult_expr

    LEFT_OP         reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    RIGHT_OP        reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    <               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    >               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    LE_OP           reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    GE_OP           reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    EQ_OP           reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    NE_OP           reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    &               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    ^               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    |               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    AND_OP          reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    ?               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    OR_OP           reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    ;               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    ,               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    ]               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    }               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    )               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    :               reduce using rule 125 (shift_expr -> shift_expr RIGHT_OP add_expr .)
    +               shift and go to state 216
    -               shift and go to state 217


state 300

    (127) add_expr -> add_expr + mult_expr .
    (130) mult_expr -> mult_expr . * cast_expr
    (131) mult_expr -> mult_expr . / cast_expr
    (132) mult_expr -> mult_expr . % cast_expr

    +               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    -               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    LEFT_OP         reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    RIGHT_OP        reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    <               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    >               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    LE_OP           reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    GE_OP           reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    EQ_OP           reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    NE_OP           reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    &               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    ^               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    |               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    AND_OP          reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    ?               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    OR_OP           reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    ;               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    ,               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    ]               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    }               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    )               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    :               reduce using rule 127 (add_expr -> add_expr + mult_expr .)
    *               shift and go to state 218
    /               shift and go to state 219
    %               shift and go to state 220


state 301

    (128) add_expr -> add_expr - mult_expr .
    (130) mult_expr -> mult_expr . * cast_expr
    (131) mult_expr -> mult_expr . / cast_expr
    (132) mult_expr -> mult_expr . % cast_expr

    +               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    -               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    LEFT_OP         reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    RIGHT_OP        reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    <               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    >               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    LE_OP           reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    GE_OP           reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    EQ_OP           reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    NE_OP           reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    &               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    ^               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    |               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    AND_OP          reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    ?               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    OR_OP           reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    ;               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    ,               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    ]               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    }               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    )               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    :               reduce using rule 128 (add_expr -> add_expr - mult_expr .)
    *               shift and go to state 218
    /               shift and go to state 219
    %               shift and go to state 220


state 302

    (130) mult_expr -> mult_expr * cast_expr .

    *               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    /               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    %               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    +               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    -               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    LEFT_OP         reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    RIGHT_OP        reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    <               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    >               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    LE_OP           reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    GE_OP           reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    EQ_OP           reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    NE_OP           reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    &               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    ^               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    |               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    AND_OP          reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    ?               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    OR_OP           reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    ;               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    ,               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    ]               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    }               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    )               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)
    :               reduce using rule 130 (mult_expr -> mult_expr * cast_expr .)


state 303

    (131) mult_expr -> mult_expr / cast_expr .

    *               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    /               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    %               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    +               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    -               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    LEFT_OP         reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    RIGHT_OP        reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    <               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    >               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    LE_OP           reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    GE_OP           reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    EQ_OP           reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    NE_OP           reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    &               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    ^               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    |               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    AND_OP          reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    ?               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    OR_OP           reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    ;               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    ,               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    ]               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    }               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    )               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)
    :               reduce using rule 131 (mult_expr -> mult_expr / cast_expr .)


state 304

    (132) mult_expr -> mult_expr % cast_expr .

    *               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    /               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    %               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    +               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    -               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    LEFT_OP         reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    RIGHT_OP        reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    <               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    >               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    LE_OP           reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    GE_OP           reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    EQ_OP           reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    NE_OP           reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    &               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    ^               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    |               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    AND_OP          reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    ?               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    OR_OP           reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    ;               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    ,               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    ]               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    }               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    )               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)
    :               reduce using rule 132 (mult_expr -> mult_expr % cast_expr .)


state 305

    (215) labeled_stmt -> IDENTIFIER : stmt .

    }               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    IDENTIFIER      reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    CASE            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    DEFAULT         reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    {               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    ;               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    IF              reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    SWITCH          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    WHILE           reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    DO              reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    FOR             reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    GOTO            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    CONTINUE        reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    BREAK           reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    RETURN          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    TYPEDEF         reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    EXTERN          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    STATIC          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    AUTO            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    REGISTER        reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    VOID            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    CHAR            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    SHORT           reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    INT             reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    LONG            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    FLOAT           reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    DOUBLE          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    SIGNED          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    UNSIGNED        reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    BOOL            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    CONST           reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    RESTRICT        reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    VOLATILE        reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    INLINE          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    ENUM            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    STRUCT          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    UNION           reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    INC_OP          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    DEC_OP          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    SIZEOF          reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    (               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    &               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    *               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    +               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    -               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    ~               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    !               reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    CONSTANT        reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    STRING_LITERAL  reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)
    ELSE            reduce using rule 215 (labeled_stmt -> IDENTIFIER : stmt .)


state 306

    (216) labeled_stmt -> CASE const_expr : . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    stmt                           shift and go to state 349
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 307

    (217) labeled_stmt -> DEFAULT : stmt .

    }               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    IDENTIFIER      reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    CASE            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    DEFAULT         reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    {               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    ;               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    IF              reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    SWITCH          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    WHILE           reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    DO              reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    FOR             reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    GOTO            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    CONTINUE        reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    BREAK           reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    RETURN          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    TYPEDEF         reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    EXTERN          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    STATIC          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    AUTO            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    REGISTER        reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    VOID            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    CHAR            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    SHORT           reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    INT             reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    LONG            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    FLOAT           reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    DOUBLE          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    SIGNED          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    UNSIGNED        reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    BOOL            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    CONST           reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    RESTRICT        reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    VOLATILE        reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    INLINE          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    ENUM            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    STRUCT          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    UNION           reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    INC_OP          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    DEC_OP          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    SIZEOF          reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    (               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    &               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    *               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    +               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    -               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    ~               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    !               reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    CONSTANT        reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    STRING_LITERAL  reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)
    ELSE            reduce using rule 217 (labeled_stmt -> DEFAULT : stmt .)


state 308

    (162) expr -> expr , assign_expr .

    ;               reduce using rule 162 (expr -> expr , assign_expr .)
    ,               reduce using rule 162 (expr -> expr , assign_expr .)
    )               reduce using rule 162 (expr -> expr , assign_expr .)
    :               reduce using rule 162 (expr -> expr , assign_expr .)
    ]               reduce using rule 162 (expr -> expr , assign_expr .)


state 309

    (220) sel_stmt -> IF ( expr . ) stmt ELSE stmt
    (221) sel_stmt -> IF ( expr . ) stmt
    (162) expr -> expr . , assign_expr

    )               shift and go to state 350
    ,               shift and go to state 228


state 310

    (222) sel_stmt -> SWITCH ( expr . ) stmt
    (162) expr -> expr . , assign_expr

    )               shift and go to state 351
    ,               shift and go to state 228


state 311

    (223) iter_stmt -> WHILE ( expr . ) stmt
    (162) expr -> expr . , assign_expr

    )               shift and go to state 352
    ,               shift and go to state 228


state 312

    (224) iter_stmt -> DO stmt WHILE . ( expr ) ;

    (               shift and go to state 353


state 313

    (225) iter_stmt -> FOR ( expr_stmt . expr_stmt ) stmt
    (226) iter_stmt -> FOR ( expr_stmt . expr_stmt expr ) stmt
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ;               shift and go to state 118
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 354
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 314

    (227) iter_stmt -> FOR ( decl . expr_stmt ) stmt
    (228) iter_stmt -> FOR ( decl . expr_stmt expr ) stmt
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ;               shift and go to state 118
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 355
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 315

    (229) jump_stmt -> GOTO IDENTIFIER ; .

    }               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    CASE            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    DEFAULT         reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    {               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    ;               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    IF              reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    SWITCH          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    WHILE           reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    DO              reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    FOR             reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    GOTO            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    CONTINUE        reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    BREAK           reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    RETURN          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    TYPEDEF         reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    EXTERN          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    STATIC          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    AUTO            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    REGISTER        reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    VOID            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    CHAR            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    SHORT           reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    INT             reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    LONG            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    FLOAT           reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    DOUBLE          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    SIGNED          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    UNSIGNED        reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    BOOL            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    CONST           reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    RESTRICT        reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    VOLATILE        reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    INLINE          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    ENUM            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    STRUCT          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    UNION           reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    INC_OP          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    DEC_OP          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    SIZEOF          reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    (               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    &               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    *               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    +               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    -               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    ~               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    !               reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    CONSTANT        reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)
    ELSE            reduce using rule 229 (jump_stmt -> GOTO IDENTIFIER ; .)


state 316

    (233) jump_stmt -> RETURN expr ; .

    }               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    IDENTIFIER      reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    CASE            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    DEFAULT         reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    {               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    ;               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    IF              reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    SWITCH          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    WHILE           reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    DO              reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    FOR             reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    GOTO            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    BREAK           reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    RETURN          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    TYPEDEF         reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    EXTERN          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    STATIC          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    AUTO            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    REGISTER        reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    VOID            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    CHAR            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    SHORT           reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    INT             reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    LONG            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    FLOAT           reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    DOUBLE          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    SIGNED          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    UNSIGNED        reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    BOOL            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    CONST           reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    RESTRICT        reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    VOLATILE        reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    INLINE          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    ENUM            reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    STRUCT          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    UNION           reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    INC_OP          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    DEC_OP          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    SIZEOF          reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    (               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    &               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    *               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    +               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    -               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    ~               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    !               reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    CONSTANT        reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    STRING_LITERAL  reduce using rule 233 (jump_stmt -> RETURN expr ; .)
    ELSE            reduce using rule 233 (jump_stmt -> RETURN expr ; .)


state 317

    (76) direct_declr -> direct_declr [ type_qual_list assign_expr ] .

    [               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    (               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    =               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    {               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    TYPEDEF         reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    EXTERN          reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    STATIC          reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    AUTO            reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    REGISTER        reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    VOID            reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    CHAR            reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    SHORT           reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    INT             reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    LONG            reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    FLOAT           reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    DOUBLE          reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    SIGNED          reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    UNSIGNED        reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    BOOL            reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    CONST           reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    RESTRICT        reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    VOLATILE        reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    INLINE          reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    ENUM            reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    STRUCT          reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    UNION           reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    ;               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    ,               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    )               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)
    :               reduce using rule 76 (direct_declr -> direct_declr [ type_qual_list assign_expr ] .)


state 318

    (80) direct_declr -> direct_declr [ type_qual_list STATIC assign_expr . ]

    ]               shift and go to state 356


state 319

    (81) direct_declr -> direct_declr [ type_qual_list * ] .

    [               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    (               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    =               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    {               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    TYPEDEF         reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    EXTERN          reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    STATIC          reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    AUTO            reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    REGISTER        reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    VOID            reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    CHAR            reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    SHORT           reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    INT             reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    LONG            reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    FLOAT           reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    DOUBLE          reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    SIGNED          reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    UNSIGNED        reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    BOOL            reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    CONST           reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    RESTRICT        reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    VOLATILE        reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    INLINE          reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    ENUM            reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    STRUCT          reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    UNION           reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    ;               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    ,               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    )               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)
    :               reduce using rule 81 (direct_declr -> direct_declr [ type_qual_list * ] .)


state 320

    (79) direct_declr -> direct_declr [ STATIC type_qual_list assign_expr . ]

    ]               shift and go to state 357


state 321

    (88) id_list -> id_list , IDENTIFIER .

    )               reduce using rule 88 (id_list -> id_list , IDENTIFIER .)
    ,               reduce using rule 88 (id_list -> id_list , IDENTIFIER .)


state 322

    (180) param_type_list -> param_list , ELLIPSIS .

    )               reduce using rule 180 (param_type_list -> param_list , ELLIPSIS .)


state 323

    (182) param_list -> param_list , param_decl .

    ,               reduce using rule 182 (param_list -> param_list , param_decl .)
    )               reduce using rule 182 (param_list -> param_list , param_decl .)


state 324

    (167) abs_declr -> ptr direct_abs_declr .
    (171) direct_abs_declr -> direct_abs_declr . [ ]
    (172) direct_abs_declr -> direct_abs_declr . [ assign_expr ]
    (174) direct_abs_declr -> direct_abs_declr . [ * ]
    (177) direct_abs_declr -> direct_abs_declr . ( )
    (178) direct_abs_declr -> direct_abs_declr . ( param_type_list )

    ,               reduce using rule 167 (abs_declr -> ptr direct_abs_declr .)
    )               reduce using rule 167 (abs_declr -> ptr direct_abs_declr .)
    [               shift and go to state 325
    (               shift and go to state 326


state 325

    (171) direct_abs_declr -> direct_abs_declr [ . ]
    (172) direct_abs_declr -> direct_abs_declr [ . assign_expr ]
    (174) direct_abs_declr -> direct_abs_declr [ . * ]
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    ]               shift and go to state 358
    *               shift and go to state 360
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 359
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 326

    (177) direct_abs_declr -> direct_abs_declr ( . )
    (178) direct_abs_declr -> direct_abs_declr ( . param_type_list )
    (179) param_type_list -> . param_list
    (180) param_type_list -> . param_list , ELLIPSIS
    (181) param_list -> . param_decl
    (182) param_list -> . param_list , param_decl
    (183) param_decl -> . decl_specs declr
    (184) param_decl -> . decl_specs abs_declr
    (185) param_decl -> . decl_specs
    (11) decl_specs -> . stor_class_spec
    (12) decl_specs -> . stor_class_spec decl_specs
    (13) decl_specs -> . type_spec
    (14) decl_specs -> . type_spec decl_specs
    (15) decl_specs -> . type_qual
    (16) decl_specs -> . type_qual decl_specs
    (17) decl_specs -> . func_spec
    (18) decl_specs -> . func_spec decl_specs
    (19) stor_class_spec -> . TYPEDEF
    (20) stor_class_spec -> . EXTERN
    (21) stor_class_spec -> . STATIC
    (22) stor_class_spec -> . AUTO
    (23) stor_class_spec -> . REGISTER
    (25) type_spec -> . VOID
    (26) type_spec -> . CHAR
    (27) type_spec -> . SHORT
    (28) type_spec -> . INT
    (29) type_spec -> . LONG
    (30) type_spec -> . FLOAT
    (31) type_spec -> . DOUBLE
    (32) type_spec -> . SIGNED
    (33) type_spec -> . UNSIGNED
    (34) type_spec -> . BOOL
    (35) type_spec -> . struct_or_union_spec
    (36) type_spec -> . enum_spec
    (37) type_qual -> . CONST
    (38) type_qual -> . RESTRICT
    (39) type_qual -> . VOLATILE
    (24) func_spec -> . INLINE
    (49) struct_or_union_spec -> . struct_or_union IDENTIFIER { struct_decl_list }
    (50) struct_or_union_spec -> . struct_or_union { struct_decl_list }
    (51) struct_or_union_spec -> . struct_or_union IDENTIFIER
    (40) enum_spec -> . ENUM { enum_list }
    (41) enum_spec -> . ENUM IDENTIFIER { enum_list }
    (42) enum_spec -> . ENUM { enum_list , }
    (43) enum_spec -> . ENUM IDENTIFIER { enum_list , }
    (44) enum_spec -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 361
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    param_type_list                shift and go to state 362
    param_list                     shift and go to state 148
    param_decl                     shift and go to state 150
    decl_specs                     shift and go to state 151
    stor_class_spec                shift and go to state 6
    type_spec                      shift and go to state 7
    type_qual                      shift and go to state 8
    func_spec                      shift and go to state 9
    struct_or_union_spec           shift and go to state 25
    enum_spec                      shift and go to state 26
    struct_or_union                shift and go to state 31

state 327

    (175) direct_abs_declr -> ( ) .

    [               reduce using rule 175 (direct_abs_declr -> ( ) .)
    (               reduce using rule 175 (direct_abs_declr -> ( ) .)
    ,               reduce using rule 175 (direct_abs_declr -> ( ) .)
    )               reduce using rule 175 (direct_abs_declr -> ( ) .)


state 328

    (168) direct_abs_declr -> ( abs_declr . )

    )               shift and go to state 363


state 329

    (176) direct_abs_declr -> ( param_type_list . )

    )               shift and go to state 364


state 330

    (169) direct_abs_declr -> [ ] .

    [               reduce using rule 169 (direct_abs_declr -> [ ] .)
    (               reduce using rule 169 (direct_abs_declr -> [ ] .)
    ,               reduce using rule 169 (direct_abs_declr -> [ ] .)
    )               reduce using rule 169 (direct_abs_declr -> [ ] .)


state 331

    (170) direct_abs_declr -> [ assign_expr . ]

    ]               shift and go to state 365


state 332

    (173) direct_abs_declr -> [ * . ]
    (142) unary_op -> * .

    ]               shift and go to state 366
    (               reduce using rule 142 (unary_op -> * .)
    INC_OP          reduce using rule 142 (unary_op -> * .)
    DEC_OP          reduce using rule 142 (unary_op -> * .)
    SIZEOF          reduce using rule 142 (unary_op -> * .)
    &               reduce using rule 142 (unary_op -> * .)
    *               reduce using rule 142 (unary_op -> * .)
    +               reduce using rule 142 (unary_op -> * .)
    -               reduce using rule 142 (unary_op -> * .)
    ~               reduce using rule 142 (unary_op -> * .)
    !               reduce using rule 142 (unary_op -> * .)
    IDENTIFIER      reduce using rule 142 (unary_op -> * .)
    CONSTANT        reduce using rule 142 (unary_op -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_op -> * .)


state 333

    (62) struct_declr_list -> struct_declr_list , struct_declr .

    ;               reduce using rule 62 (struct_declr_list -> struct_declr_list , struct_declr .)
    ,               reduce using rule 62 (struct_declr_list -> struct_declr_list , struct_declr .)


state 334

    (65) struct_declr -> declr : const_expr .

    ;               reduce using rule 65 (struct_declr -> declr : const_expr .)
    ,               reduce using rule 65 (struct_declr -> declr : const_expr .)


state 335

    (43) enum_spec -> ENUM IDENTIFIER { enum_list , } .

    TYPEDEF         reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    EXTERN          reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    STATIC          reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    AUTO            reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    REGISTER        reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    VOID            reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    CHAR            reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    SHORT           reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    INT             reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    LONG            reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    FLOAT           reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    DOUBLE          reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    SIGNED          reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    UNSIGNED        reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    BOOL            reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    CONST           reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    RESTRICT        reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    VOLATILE        reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    INLINE          reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    ENUM            reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    STRUCT          reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    UNION           reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    ;               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    *               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    IDENTIFIER      reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    (               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    [               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    ,               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    )               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)
    :               reduce using rule 43 (enum_spec -> ENUM IDENTIFIER { enum_list , } .)


state 336

    (194) init -> { init_list , } .

    ;               reduce using rule 194 (init -> { init_list , } .)
    ,               reduce using rule 194 (init -> { init_list , } .)
    }               reduce using rule 194 (init -> { init_list , } .)


state 337

    (190) init_list -> init_list , init .

    }               reduce using rule 190 (init_list -> init_list , init .)
    ,               reduce using rule 190 (init_list -> init_list , init .)


state 338

    (191) init_list -> init_list , desig . init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init                           shift and go to state 367
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 339

    (197) desig -> [ const_expr ] .

    {               reduce using rule 197 (desig -> [ const_expr ] .)
    INC_OP          reduce using rule 197 (desig -> [ const_expr ] .)
    DEC_OP          reduce using rule 197 (desig -> [ const_expr ] .)
    SIZEOF          reduce using rule 197 (desig -> [ const_expr ] .)
    (               reduce using rule 197 (desig -> [ const_expr ] .)
    &               reduce using rule 197 (desig -> [ const_expr ] .)
    *               reduce using rule 197 (desig -> [ const_expr ] .)
    +               reduce using rule 197 (desig -> [ const_expr ] .)
    -               reduce using rule 197 (desig -> [ const_expr ] .)
    ~               reduce using rule 197 (desig -> [ const_expr ] .)
    !               reduce using rule 197 (desig -> [ const_expr ] .)
    IDENTIFIER      reduce using rule 197 (desig -> [ const_expr ] .)
    CONSTANT        reduce using rule 197 (desig -> [ const_expr ] .)
    STRING_LITERAL  reduce using rule 197 (desig -> [ const_expr ] .)


state 340

    (104) cond_expr -> log_or_expr ? expr : . cond_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    log_or_expr                    shift and go to state 86
    cond_expr                      shift and go to state 368
    log_and_expr                   shift and go to state 94
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112
    cast_expr                      shift and go to state 91
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 341

    (148) post_expr -> post_expr [ expr ] .

    [               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    (               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    .               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    PTR_OP          reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    INC_OP          reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    DEC_OP          reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    =               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    MUL_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    DIV_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    MOD_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    ADD_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    SUB_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    LEFT_ASSIGN     reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    RIGHT_ASSIGN    reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    AND_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    XOR_ASSIGN      reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    OR_ASSIGN       reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    *               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    /               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    %               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    +               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    -               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    LEFT_OP         reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    RIGHT_OP        reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    <               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    >               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    LE_OP           reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    GE_OP           reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    EQ_OP           reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    NE_OP           reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    &               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    ^               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    |               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    AND_OP          reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    ?               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    OR_OP           reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    ;               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    ,               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    ]               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    }               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    )               reduce using rule 148 (post_expr -> post_expr [ expr ] .)
    :               reduce using rule 148 (post_expr -> post_expr [ expr ] .)


state 342

    (150) post_expr -> post_expr ( arg_expr_list ) .

    [               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    (               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    .               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    PTR_OP          reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    INC_OP          reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    DEC_OP          reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    =               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    MUL_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    DIV_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    MOD_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    ADD_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    SUB_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    LEFT_ASSIGN     reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    RIGHT_ASSIGN    reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    AND_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    XOR_ASSIGN      reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    OR_ASSIGN       reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    *               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    /               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    %               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    +               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    -               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    LEFT_OP         reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    RIGHT_OP        reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    <               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    >               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    LE_OP           reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    GE_OP           reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    EQ_OP           reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    NE_OP           reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    &               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    ^               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    |               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    AND_OP          reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    ?               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    OR_OP           reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    ;               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    ,               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    ]               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    }               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    )               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)
    :               reduce using rule 150 (post_expr -> post_expr ( arg_expr_list ) .)


state 343

    (187) arg_expr_list -> arg_expr_list , . assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assign_expr                    shift and go to state 369
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 344

    (155) post_expr -> ( type_name ) . { init_list }
    (156) post_expr -> ( type_name ) . { init_list , }

    {               shift and go to state 347


state 345

    (134) cast_expr -> ( type_name ) . cast_expr
    (155) post_expr -> ( type_name ) . { init_list }
    (156) post_expr -> ( type_name ) . { init_list , }
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )

    {               shift and go to state 347
    (               shift and go to state 198
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expr                      shift and go to state 348
    unary_expr                     shift and go to state 197
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    prim_expr                      shift and go to state 95

state 346

    (140) unary_expr -> SIZEOF ( type_name ) .
    (155) post_expr -> ( type_name ) . { init_list }
    (156) post_expr -> ( type_name ) . { init_list , }

    =               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    MUL_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    DIV_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    MOD_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    ADD_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    SUB_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    LEFT_ASSIGN     reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    RIGHT_ASSIGN    reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    AND_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    XOR_ASSIGN      reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    OR_ASSIGN       reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    *               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    /               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    %               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    +               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    -               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    LEFT_OP         reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    RIGHT_OP        reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    <               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    >               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    LE_OP           reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    GE_OP           reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    EQ_OP           reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    NE_OP           reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    &               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    ^               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    |               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    ?               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    ;               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    ,               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    ]               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    }               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    )               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    :               reduce using rule 140 (unary_expr -> SIZEOF ( type_name ) .)
    {               shift and go to state 347


state 347

    (155) post_expr -> ( type_name ) { . init_list }
    (156) post_expr -> ( type_name ) { . init_list , }
    (188) init_list -> . init
    (189) init_list -> . desig init
    (190) init_list -> . init_list , init
    (191) init_list -> . init_list , desig init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (197) desig -> . [ const_expr ]
    (198) desig -> . . IDENTIFIER
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    {               shift and go to state 83
    [               shift and go to state 171
    .               shift and go to state 172
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init_list                      shift and go to state 370
    init                           shift and go to state 169
    desig                          shift and go to state 170
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 348

    (134) cast_expr -> ( type_name ) cast_expr .

    *               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    /               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    %               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    +               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    -               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    LEFT_OP         reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    RIGHT_OP        reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    <               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    >               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    LE_OP           reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    GE_OP           reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    EQ_OP           reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    NE_OP           reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    &               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    ^               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    |               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    AND_OP          reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    ?               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    OR_OP           reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    ;               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    ,               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    ]               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    }               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    =               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    MUL_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    DIV_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    MOD_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    ADD_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    SUB_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    LEFT_ASSIGN     reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    RIGHT_ASSIGN    reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    AND_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    XOR_ASSIGN      reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    OR_ASSIGN       reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    )               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)
    :               reduce using rule 134 (cast_expr -> ( type_name ) cast_expr .)


state 349

    (216) labeled_stmt -> CASE const_expr : stmt .

    }               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    IDENTIFIER      reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    CASE            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    DEFAULT         reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    {               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    ;               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    IF              reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    SWITCH          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    WHILE           reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    DO              reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    FOR             reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    GOTO            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    CONTINUE        reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    BREAK           reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    RETURN          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    TYPEDEF         reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    EXTERN          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    STATIC          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    AUTO            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    REGISTER        reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    VOID            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    CHAR            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    SHORT           reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    INT             reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    LONG            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    FLOAT           reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    DOUBLE          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    SIGNED          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    UNSIGNED        reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    BOOL            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    CONST           reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    RESTRICT        reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    VOLATILE        reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    INLINE          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    ENUM            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    STRUCT          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    UNION           reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    INC_OP          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    DEC_OP          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    SIZEOF          reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    (               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    &               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    *               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    +               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    -               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    ~               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    !               reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    CONSTANT        reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    STRING_LITERAL  reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)
    ELSE            reduce using rule 216 (labeled_stmt -> CASE const_expr : stmt .)


state 350

    (220) sel_stmt -> IF ( expr ) . stmt ELSE stmt
    (221) sel_stmt -> IF ( expr ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 128
    stmt                           shift and go to state 371
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 351

    (222) sel_stmt -> SWITCH ( expr ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 128
    stmt                           shift and go to state 372
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 352

    (223) iter_stmt -> WHILE ( expr ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 128
    stmt                           shift and go to state 373
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 353

    (224) iter_stmt -> DO stmt WHILE ( . expr ) ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 374
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 354

    (225) iter_stmt -> FOR ( expr_stmt expr_stmt . ) stmt
    (226) iter_stmt -> FOR ( expr_stmt expr_stmt . expr ) stmt
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    )               shift and go to state 375
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 376
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 355

    (227) iter_stmt -> FOR ( decl expr_stmt . ) stmt
    (228) iter_stmt -> FOR ( decl expr_stmt . expr ) stmt
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    )               shift and go to state 377
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 378
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 356

    (80) direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .

    [               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    (               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    =               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    {               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    TYPEDEF         reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    EXTERN          reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    STATIC          reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    AUTO            reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    REGISTER        reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    VOID            reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    CHAR            reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    SHORT           reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    INT             reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    LONG            reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    FLOAT           reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    DOUBLE          reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    SIGNED          reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    UNSIGNED        reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    BOOL            reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    CONST           reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    RESTRICT        reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    VOLATILE        reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    INLINE          reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    ENUM            reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    STRUCT          reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    UNION           reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    ;               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    ,               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    )               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)
    :               reduce using rule 80 (direct_declr -> direct_declr [ type_qual_list STATIC assign_expr ] .)


state 357

    (79) direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .

    [               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    (               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    =               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    {               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    TYPEDEF         reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    EXTERN          reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    STATIC          reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    AUTO            reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    REGISTER        reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    VOID            reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    CHAR            reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    SHORT           reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    INT             reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    LONG            reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    FLOAT           reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    DOUBLE          reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    SIGNED          reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    UNSIGNED        reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    BOOL            reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    CONST           reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    RESTRICT        reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    VOLATILE        reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    INLINE          reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    ENUM            reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    STRUCT          reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    UNION           reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    ;               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    ,               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    )               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)
    :               reduce using rule 79 (direct_declr -> direct_declr [ STATIC type_qual_list assign_expr ] .)


state 358

    (171) direct_abs_declr -> direct_abs_declr [ ] .

    [               reduce using rule 171 (direct_abs_declr -> direct_abs_declr [ ] .)
    (               reduce using rule 171 (direct_abs_declr -> direct_abs_declr [ ] .)
    ,               reduce using rule 171 (direct_abs_declr -> direct_abs_declr [ ] .)
    )               reduce using rule 171 (direct_abs_declr -> direct_abs_declr [ ] .)


state 359

    (172) direct_abs_declr -> direct_abs_declr [ assign_expr . ]

    ]               shift and go to state 379


state 360

    (174) direct_abs_declr -> direct_abs_declr [ * . ]
    (142) unary_op -> * .

    ]               shift and go to state 380
    (               reduce using rule 142 (unary_op -> * .)
    INC_OP          reduce using rule 142 (unary_op -> * .)
    DEC_OP          reduce using rule 142 (unary_op -> * .)
    SIZEOF          reduce using rule 142 (unary_op -> * .)
    &               reduce using rule 142 (unary_op -> * .)
    *               reduce using rule 142 (unary_op -> * .)
    +               reduce using rule 142 (unary_op -> * .)
    -               reduce using rule 142 (unary_op -> * .)
    ~               reduce using rule 142 (unary_op -> * .)
    !               reduce using rule 142 (unary_op -> * .)
    IDENTIFIER      reduce using rule 142 (unary_op -> * .)
    CONSTANT        reduce using rule 142 (unary_op -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_op -> * .)


state 361

    (177) direct_abs_declr -> direct_abs_declr ( ) .

    [               reduce using rule 177 (direct_abs_declr -> direct_abs_declr ( ) .)
    (               reduce using rule 177 (direct_abs_declr -> direct_abs_declr ( ) .)
    ,               reduce using rule 177 (direct_abs_declr -> direct_abs_declr ( ) .)
    )               reduce using rule 177 (direct_abs_declr -> direct_abs_declr ( ) .)


state 362

    (178) direct_abs_declr -> direct_abs_declr ( param_type_list . )

    )               shift and go to state 381


state 363

    (168) direct_abs_declr -> ( abs_declr ) .

    [               reduce using rule 168 (direct_abs_declr -> ( abs_declr ) .)
    (               reduce using rule 168 (direct_abs_declr -> ( abs_declr ) .)
    ,               reduce using rule 168 (direct_abs_declr -> ( abs_declr ) .)
    )               reduce using rule 168 (direct_abs_declr -> ( abs_declr ) .)


state 364

    (176) direct_abs_declr -> ( param_type_list ) .

    [               reduce using rule 176 (direct_abs_declr -> ( param_type_list ) .)
    (               reduce using rule 176 (direct_abs_declr -> ( param_type_list ) .)
    ,               reduce using rule 176 (direct_abs_declr -> ( param_type_list ) .)
    )               reduce using rule 176 (direct_abs_declr -> ( param_type_list ) .)


state 365

    (170) direct_abs_declr -> [ assign_expr ] .

    [               reduce using rule 170 (direct_abs_declr -> [ assign_expr ] .)
    (               reduce using rule 170 (direct_abs_declr -> [ assign_expr ] .)
    ,               reduce using rule 170 (direct_abs_declr -> [ assign_expr ] .)
    )               reduce using rule 170 (direct_abs_declr -> [ assign_expr ] .)


state 366

    (173) direct_abs_declr -> [ * ] .

    [               reduce using rule 173 (direct_abs_declr -> [ * ] .)
    (               reduce using rule 173 (direct_abs_declr -> [ * ] .)
    ,               reduce using rule 173 (direct_abs_declr -> [ * ] .)
    )               reduce using rule 173 (direct_abs_declr -> [ * ] .)


state 367

    (191) init_list -> init_list , desig init .

    }               reduce using rule 191 (init_list -> init_list , desig init .)
    ,               reduce using rule 191 (init_list -> init_list , desig init .)


state 368

    (104) cond_expr -> log_or_expr ? expr : cond_expr .

    ;               reduce using rule 104 (cond_expr -> log_or_expr ? expr : cond_expr .)
    ,               reduce using rule 104 (cond_expr -> log_or_expr ? expr : cond_expr .)
    ]               reduce using rule 104 (cond_expr -> log_or_expr ? expr : cond_expr .)
    }               reduce using rule 104 (cond_expr -> log_or_expr ? expr : cond_expr .)
    )               reduce using rule 104 (cond_expr -> log_or_expr ? expr : cond_expr .)
    :               reduce using rule 104 (cond_expr -> log_or_expr ? expr : cond_expr .)


state 369

    (187) arg_expr_list -> arg_expr_list , assign_expr .

    )               reduce using rule 187 (arg_expr_list -> arg_expr_list , assign_expr .)
    ,               reduce using rule 187 (arg_expr_list -> arg_expr_list , assign_expr .)


state 370

    (155) post_expr -> ( type_name ) { init_list . }
    (156) post_expr -> ( type_name ) { init_list . , }
    (190) init_list -> init_list . , init
    (191) init_list -> init_list . , desig init

    }               shift and go to state 382
    ,               shift and go to state 383


state 371

    (220) sel_stmt -> IF ( expr ) stmt . ELSE stmt
    (221) sel_stmt -> IF ( expr ) stmt .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 384
    }               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    IDENTIFIER      reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    CASE            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    DEFAULT         reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    {               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    ;               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    SWITCH          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    DO              reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    FOR             reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    GOTO            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    CONTINUE        reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    TYPEDEF         reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    EXTERN          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    STATIC          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    AUTO            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    REGISTER        reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    VOID            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    CHAR            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    SHORT           reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    INT             reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    LONG            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    FLOAT           reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    DOUBLE          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    SIGNED          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    UNSIGNED        reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    BOOL            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    CONST           reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    RESTRICT        reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    VOLATILE        reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    INLINE          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    ENUM            reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    STRUCT          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    UNION           reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    INC_OP          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    DEC_OP          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    SIZEOF          reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    (               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    &               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    *               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    +               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    -               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    ~               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    !               reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    CONSTANT        reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)
    STRING_LITERAL  reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .)

  ! ELSE            [ reduce using rule 221 (sel_stmt -> IF ( expr ) stmt .) ]


state 372

    (222) sel_stmt -> SWITCH ( expr ) stmt .

    }               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    IDENTIFIER      reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    CASE            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    DEFAULT         reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    {               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    ;               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    IF              reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    SWITCH          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    WHILE           reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    DO              reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    FOR             reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    GOTO            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    CONTINUE        reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    BREAK           reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    RETURN          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    TYPEDEF         reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    EXTERN          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    STATIC          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    AUTO            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    REGISTER        reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    VOID            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    CHAR            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    SHORT           reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    INT             reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    LONG            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    FLOAT           reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    DOUBLE          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    SIGNED          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    UNSIGNED        reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    BOOL            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    CONST           reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    RESTRICT        reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    VOLATILE        reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    INLINE          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    ENUM            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    STRUCT          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    UNION           reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    INC_OP          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    DEC_OP          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    SIZEOF          reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    (               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    &               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    *               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    +               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    -               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    ~               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    !               reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    CONSTANT        reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    STRING_LITERAL  reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)
    ELSE            reduce using rule 222 (sel_stmt -> SWITCH ( expr ) stmt .)


state 373

    (223) iter_stmt -> WHILE ( expr ) stmt .

    }               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    IDENTIFIER      reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    CASE            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    DEFAULT         reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    ;               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    SWITCH          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    DO              reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    FOR             reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    GOTO            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    CONTINUE        reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    RETURN          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    TYPEDEF         reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    EXTERN          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    STATIC          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    AUTO            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    REGISTER        reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    VOID            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    CHAR            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    SHORT           reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    INT             reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    LONG            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    FLOAT           reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    DOUBLE          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    SIGNED          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    UNSIGNED        reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    BOOL            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    CONST           reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    RESTRICT        reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    VOLATILE        reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    INLINE          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    ENUM            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    STRUCT          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    UNION           reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    INC_OP          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    DEC_OP          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    SIZEOF          reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    &               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    *               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    +               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    -               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    ~               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    !               reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    CONSTANT        reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    STRING_LITERAL  reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 223 (iter_stmt -> WHILE ( expr ) stmt .)


state 374

    (224) iter_stmt -> DO stmt WHILE ( expr . ) ;
    (162) expr -> expr . , assign_expr

    )               shift and go to state 385
    ,               shift and go to state 228


state 375

    (225) iter_stmt -> FOR ( expr_stmt expr_stmt ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 121
    stmt                           shift and go to state 386
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 376

    (226) iter_stmt -> FOR ( expr_stmt expr_stmt expr . ) stmt
    (162) expr -> expr . , assign_expr

    )               shift and go to state 387
    ,               shift and go to state 228


state 377

    (227) iter_stmt -> FOR ( decl expr_stmt ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 121
    stmt                           shift and go to state 388
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    expr                           shift and go to state 128
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 378

    (228) iter_stmt -> FOR ( decl expr_stmt expr . ) stmt
    (162) expr -> expr . , assign_expr

    )               shift and go to state 389
    ,               shift and go to state 228


state 379

    (172) direct_abs_declr -> direct_abs_declr [ assign_expr ] .

    [               reduce using rule 172 (direct_abs_declr -> direct_abs_declr [ assign_expr ] .)
    (               reduce using rule 172 (direct_abs_declr -> direct_abs_declr [ assign_expr ] .)
    ,               reduce using rule 172 (direct_abs_declr -> direct_abs_declr [ assign_expr ] .)
    )               reduce using rule 172 (direct_abs_declr -> direct_abs_declr [ assign_expr ] .)


state 380

    (174) direct_abs_declr -> direct_abs_declr [ * ] .

    [               reduce using rule 174 (direct_abs_declr -> direct_abs_declr [ * ] .)
    (               reduce using rule 174 (direct_abs_declr -> direct_abs_declr [ * ] .)
    ,               reduce using rule 174 (direct_abs_declr -> direct_abs_declr [ * ] .)
    )               reduce using rule 174 (direct_abs_declr -> direct_abs_declr [ * ] .)


state 381

    (178) direct_abs_declr -> direct_abs_declr ( param_type_list ) .

    [               reduce using rule 178 (direct_abs_declr -> direct_abs_declr ( param_type_list ) .)
    (               reduce using rule 178 (direct_abs_declr -> direct_abs_declr ( param_type_list ) .)
    ,               reduce using rule 178 (direct_abs_declr -> direct_abs_declr ( param_type_list ) .)
    )               reduce using rule 178 (direct_abs_declr -> direct_abs_declr ( param_type_list ) .)


state 382

    (155) post_expr -> ( type_name ) { init_list } .

    [               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    (               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    .               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    PTR_OP          reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    INC_OP          reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    DEC_OP          reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    =               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    MUL_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    DIV_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    MOD_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    ADD_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    SUB_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    LEFT_ASSIGN     reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    RIGHT_ASSIGN    reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    AND_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    XOR_ASSIGN      reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    OR_ASSIGN       reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    *               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    /               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    %               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    +               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    -               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    LEFT_OP         reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    RIGHT_OP        reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    <               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    >               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    LE_OP           reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    GE_OP           reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    EQ_OP           reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    NE_OP           reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    &               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    ^               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    |               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    AND_OP          reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    ?               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    OR_OP           reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    ;               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    ,               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    ]               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    }               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    )               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)
    :               reduce using rule 155 (post_expr -> ( type_name ) { init_list } .)


state 383

    (156) post_expr -> ( type_name ) { init_list , . }
    (190) init_list -> init_list , . init
    (191) init_list -> init_list , . desig init
    (192) init -> . assign_expr
    (193) init -> . { init_list }
    (194) init -> . { init_list , }
    (197) desig -> . [ const_expr ]
    (198) desig -> . . IDENTIFIER
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    }               shift and go to state 390
    {               shift and go to state 83
    [               shift and go to state 171
    .               shift and go to state 172
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    init                           shift and go to state 337
    desig                          shift and go to state 338
    assign_expr                    shift and go to state 82
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 384

    (220) sel_stmt -> IF ( expr ) stmt ELSE . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr                           shift and go to state 128
    stmt                           shift and go to state 391
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    expr_stmt                      shift and go to state 121
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 385

    (224) iter_stmt -> DO stmt WHILE ( expr ) . ;

    ;               shift and go to state 392


state 386

    (225) iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .

    }               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    IDENTIFIER      reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    CASE            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    DEFAULT         reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    {               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    ;               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    IF              reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    SWITCH          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    WHILE           reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    DO              reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    FOR             reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    GOTO            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    CONTINUE        reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    BREAK           reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    RETURN          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    TYPEDEF         reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    EXTERN          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    STATIC          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    AUTO            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    REGISTER        reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    VOID            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    CHAR            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    SHORT           reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    INT             reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    LONG            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    FLOAT           reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    DOUBLE          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    SIGNED          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    UNSIGNED        reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    BOOL            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    CONST           reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    RESTRICT        reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    VOLATILE        reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    INLINE          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    ENUM            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    STRUCT          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    UNION           reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    INC_OP          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    DEC_OP          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    SIZEOF          reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    (               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    &               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    *               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    +               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    -               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    ~               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    !               reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    CONSTANT        reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    STRING_LITERAL  reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)
    ELSE            reduce using rule 225 (iter_stmt -> FOR ( expr_stmt expr_stmt ) stmt .)


state 387

    (226) iter_stmt -> FOR ( expr_stmt expr_stmt expr ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 121
    expr                           shift and go to state 128
    stmt                           shift and go to state 393
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 388

    (227) iter_stmt -> FOR ( decl expr_stmt ) stmt .

    }               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    IDENTIFIER      reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    CASE            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    DEFAULT         reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    {               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    ;               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    IF              reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    SWITCH          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    WHILE           reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    DO              reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    FOR             reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    GOTO            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    CONTINUE        reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    BREAK           reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    RETURN          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    TYPEDEF         reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    EXTERN          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    STATIC          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    AUTO            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    REGISTER        reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    VOID            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    CHAR            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    SHORT           reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    INT             reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    LONG            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    FLOAT           reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    DOUBLE          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    SIGNED          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    UNSIGNED        reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    BOOL            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    CONST           reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    RESTRICT        reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    VOLATILE        reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    INLINE          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    ENUM            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    STRUCT          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    UNION           reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    INC_OP          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    DEC_OP          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    SIZEOF          reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    (               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    &               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    *               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    +               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    -               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    ~               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    !               reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    CONSTANT        reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    STRING_LITERAL  reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)
    ELSE            reduce using rule 227 (iter_stmt -> FOR ( decl expr_stmt ) stmt .)


state 389

    (228) iter_stmt -> FOR ( decl expr_stmt expr ) . stmt
    (209) stmt -> . labeled_stmt
    (210) stmt -> . comp_stmt
    (211) stmt -> . expr_stmt
    (212) stmt -> . sel_stmt
    (213) stmt -> . iter_stmt
    (214) stmt -> . jump_stmt
    (215) labeled_stmt -> . IDENTIFIER : stmt
    (216) labeled_stmt -> . CASE const_expr : stmt
    (217) labeled_stmt -> . DEFAULT : stmt
    (203) comp_stmt -> . { }
    (204) comp_stmt -> . { block_item_list }
    (218) expr_stmt -> . ;
    (219) expr_stmt -> . expr ;
    (220) sel_stmt -> . IF ( expr ) stmt ELSE stmt
    (221) sel_stmt -> . IF ( expr ) stmt
    (222) sel_stmt -> . SWITCH ( expr ) stmt
    (223) iter_stmt -> . WHILE ( expr ) stmt
    (224) iter_stmt -> . DO stmt WHILE ( expr ) ;
    (225) iter_stmt -> . FOR ( expr_stmt expr_stmt ) stmt
    (226) iter_stmt -> . FOR ( expr_stmt expr_stmt expr ) stmt
    (227) iter_stmt -> . FOR ( decl expr_stmt ) stmt
    (228) iter_stmt -> . FOR ( decl expr_stmt expr ) stmt
    (229) jump_stmt -> . GOTO IDENTIFIER ;
    (230) jump_stmt -> . CONTINUE ;
    (231) jump_stmt -> . BREAK ;
    (232) jump_stmt -> . RETURN ;
    (233) jump_stmt -> . RETURN expr ;
    (161) expr -> . assign_expr
    (162) expr -> . expr , assign_expr
    (89) assign_expr -> . cond_expr
    (90) assign_expr -> . unary_expr assign_op assign_expr
    (103) cond_expr -> . log_or_expr
    (104) cond_expr -> . log_or_expr ? expr : cond_expr
    (135) unary_expr -> . post_expr
    (136) unary_expr -> . INC_OP unary_expr
    (137) unary_expr -> . DEC_OP unary_expr
    (138) unary_expr -> . unary_op cast_expr
    (139) unary_expr -> . SIZEOF unary_expr
    (140) unary_expr -> . SIZEOF ( type_name )
    (105) log_or_expr -> . log_and_expr
    (106) log_or_expr -> . log_or_expr OR_OP log_and_expr
    (147) post_expr -> . prim_expr
    (148) post_expr -> . post_expr [ expr ]
    (149) post_expr -> . post_expr ( )
    (150) post_expr -> . post_expr ( arg_expr_list )
    (151) post_expr -> . post_expr . IDENTIFIER
    (152) post_expr -> . post_expr PTR_OP IDENTIFIER
    (153) post_expr -> . post_expr INC_OP
    (154) post_expr -> . post_expr DEC_OP
    (155) post_expr -> . ( type_name ) { init_list }
    (156) post_expr -> . ( type_name ) { init_list , }
    (141) unary_op -> . &
    (142) unary_op -> . *
    (143) unary_op -> . +
    (144) unary_op -> . -
    (145) unary_op -> . ~
    (146) unary_op -> . !
    (107) log_and_expr -> . incl_or_expr
    (108) log_and_expr -> . log_and_expr AND_OP incl_or_expr
    (157) prim_expr -> . IDENTIFIER
    (158) prim_expr -> . CONSTANT
    (159) prim_expr -> . STRING_LITERAL
    (160) prim_expr -> . ( expr )
    (109) incl_or_expr -> . excl_or_expr
    (110) incl_or_expr -> . incl_or_expr | excl_or_expr
    (111) excl_or_expr -> . and_expr
    (112) excl_or_expr -> . excl_or_expr ^ and_expr
    (113) and_expr -> . eq_expr
    (114) and_expr -> . and_expr & eq_expr
    (115) eq_expr -> . rel_expr
    (116) eq_expr -> . eq_expr EQ_OP rel_expr
    (117) eq_expr -> . eq_expr NE_OP rel_expr
    (118) rel_expr -> . shift_expr
    (119) rel_expr -> . rel_expr < shift_expr
    (120) rel_expr -> . rel_expr > shift_expr
    (121) rel_expr -> . rel_expr LE_OP shift_expr
    (122) rel_expr -> . rel_expr GE_OP shift_expr
    (123) shift_expr -> . add_expr
    (124) shift_expr -> . shift_expr LEFT_OP add_expr
    (125) shift_expr -> . shift_expr RIGHT_OP add_expr
    (126) add_expr -> . mult_expr
    (127) add_expr -> . add_expr + mult_expr
    (128) add_expr -> . add_expr - mult_expr
    (129) mult_expr -> . cast_expr
    (130) mult_expr -> . mult_expr * cast_expr
    (131) mult_expr -> . mult_expr / cast_expr
    (132) mult_expr -> . mult_expr % cast_expr
    (133) cast_expr -> . unary_expr
    (134) cast_expr -> . ( type_name ) cast_expr

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expr_stmt                      shift and go to state 121
    expr                           shift and go to state 128
    stmt                           shift and go to state 394
    labeled_stmt                   shift and go to state 119
    comp_stmt                      shift and go to state 120
    sel_stmt                       shift and go to state 122
    iter_stmt                      shift and go to state 123
    jump_stmt                      shift and go to state 124
    assign_expr                    shift and go to state 138
    cond_expr                      shift and go to state 84
    unary_expr                     shift and go to state 85
    log_or_expr                    shift and go to state 86
    post_expr                      shift and go to state 87
    unary_op                       shift and go to state 90
    cast_expr                      shift and go to state 91
    log_and_expr                   shift and go to state 94
    prim_expr                      shift and go to state 95
    incl_or_expr                   shift and go to state 103
    excl_or_expr                   shift and go to state 106
    and_expr                       shift and go to state 107
    eq_expr                        shift and go to state 108
    rel_expr                       shift and go to state 109
    shift_expr                     shift and go to state 110
    add_expr                       shift and go to state 111
    mult_expr                      shift and go to state 112

state 390

    (156) post_expr -> ( type_name ) { init_list , } .

    [               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    (               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    .               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    PTR_OP          reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    INC_OP          reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    DEC_OP          reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    =               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    MUL_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    DIV_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    MOD_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    ADD_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    SUB_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    LEFT_ASSIGN     reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    RIGHT_ASSIGN    reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    AND_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    XOR_ASSIGN      reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    OR_ASSIGN       reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    *               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    /               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    %               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    +               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    -               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    LEFT_OP         reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    RIGHT_OP        reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    <               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    >               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    LE_OP           reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    GE_OP           reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    EQ_OP           reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    NE_OP           reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    &               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    ^               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    |               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    AND_OP          reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    ?               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    OR_OP           reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    ;               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    ,               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    ]               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    }               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    )               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)
    :               reduce using rule 156 (post_expr -> ( type_name ) { init_list , } .)


state 391

    (220) sel_stmt -> IF ( expr ) stmt ELSE stmt .

    }               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    IDENTIFIER      reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    CASE            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    DEFAULT         reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    ;               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    SWITCH          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    DO              reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    FOR             reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    GOTO            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    RETURN          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    TYPEDEF         reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    EXTERN          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    STATIC          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    AUTO            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    REGISTER        reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    VOID            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    CHAR            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    SHORT           reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    INT             reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    LONG            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOAT           reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    DOUBLE          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    SIGNED          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    UNSIGNED        reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    BOOL            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    CONST           reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    RESTRICT        reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    VOLATILE        reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    INLINE          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    ENUM            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRUCT          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    UNION           reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    INC_OP          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    DEC_OP          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    SIZEOF          reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    &               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    *               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    +               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    -               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    ~               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    !               reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    CONSTANT        reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRING_LITERAL  reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 220 (sel_stmt -> IF ( expr ) stmt ELSE stmt .)


state 392

    (224) iter_stmt -> DO stmt WHILE ( expr ) ; .

    }               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    IDENTIFIER      reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    CASE            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    DEFAULT         reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    {               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    ;               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    IF              reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    SWITCH          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    WHILE           reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    DO              reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    FOR             reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    GOTO            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    CONTINUE        reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    BREAK           reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    RETURN          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    TYPEDEF         reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    EXTERN          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    STATIC          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    AUTO            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    REGISTER        reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    VOID            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    CHAR            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    SHORT           reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    INT             reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    LONG            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    FLOAT           reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    DOUBLE          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    SIGNED          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    UNSIGNED        reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    BOOL            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    CONST           reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    RESTRICT        reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    VOLATILE        reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    INLINE          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    ENUM            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    STRUCT          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    UNION           reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    INC_OP          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    DEC_OP          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    SIZEOF          reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    (               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    &               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    *               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    +               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    -               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    ~               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    !               reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    CONSTANT        reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    STRING_LITERAL  reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)
    ELSE            reduce using rule 224 (iter_stmt -> DO stmt WHILE ( expr ) ; .)


state 393

    (226) iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .

    }               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    IDENTIFIER      reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    CASE            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    DEFAULT         reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    {               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    ;               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    IF              reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    SWITCH          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    WHILE           reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    DO              reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    FOR             reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    GOTO            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    CONTINUE        reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    BREAK           reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    RETURN          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    TYPEDEF         reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    EXTERN          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    STATIC          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    AUTO            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    REGISTER        reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    VOID            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    CHAR            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    SHORT           reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    INT             reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    LONG            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    FLOAT           reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    DOUBLE          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    SIGNED          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    UNSIGNED        reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    BOOL            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    CONST           reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    RESTRICT        reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    VOLATILE        reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    INLINE          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    ENUM            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    STRUCT          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    UNION           reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    INC_OP          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    DEC_OP          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    SIZEOF          reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    (               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    &               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    *               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    +               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    -               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    ~               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    !               reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    CONSTANT        reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    STRING_LITERAL  reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)
    ELSE            reduce using rule 226 (iter_stmt -> FOR ( expr_stmt expr_stmt expr ) stmt .)


state 394

    (228) iter_stmt -> FOR ( decl expr_stmt expr ) stmt .

    }               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    IDENTIFIER      reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    CASE            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    DEFAULT         reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    {               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    ;               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    IF              reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    SWITCH          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    WHILE           reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    DO              reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    FOR             reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    GOTO            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    CONTINUE        reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    BREAK           reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    RETURN          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    TYPEDEF         reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    EXTERN          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    STATIC          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    AUTO            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    REGISTER        reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    VOID            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    CHAR            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    SHORT           reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    INT             reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    LONG            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    FLOAT           reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    DOUBLE          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    SIGNED          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    UNSIGNED        reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    BOOL            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    CONST           reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    RESTRICT        reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    VOLATILE        reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    INLINE          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    ENUM            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    STRUCT          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    UNION           reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    INC_OP          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    DEC_OP          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    SIZEOF          reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    (               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    &               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    *               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    +               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    -               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    ~               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    !               reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    CONSTANT        reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    STRING_LITERAL  reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)
    ELSE            reduce using rule 228 (iter_stmt -> FOR ( decl expr_stmt expr ) stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 371 resolved as shift
